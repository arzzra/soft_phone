package main

import (
	"context"
	"fmt"
	"log"
	"log/slog"
	"net"
	"strings"
	"sync"
	"time"

	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/media_with_sdp"
	"github.com/arzzra/soft_phone/pkg/rtp"
	pionrtp "github.com/pion/rtp"
	"github.com/pion/sdp/v3"
)

// TestSession –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
type TestSession struct {
	session       *media_with_sdp.SessionWithSDP
	sessionID     string
	description   string
	receivedAudio [][]byte
	receivedDTMF  []media.DTMFEvent
	mutex         sync.Mutex
}

// RTPSessionWithTransport —Ö—Ä–∞–Ω–∏—Ç RTP —Å–µ—Å—Å–∏—é –∏ –µ—ë —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
type RTPSessionWithTransport struct {
	Session   *rtp.Session
	Transport *rtp.UDPTransport
}

func main() {
	slog.SetLogLoggerLevel(slog.LevelDebug)
	// –£–º–µ–Ω—å—à–∞–µ–º –æ–±—â–∏–π timeout –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ—Å—Ç–∞ –¥–æ 20 —Å–µ–∫—É–Ω–¥
	ctx, cancel := context.WithTimeout(context.Background(), 2000000*time.Second)
	defer cancel()

	done := make(chan bool, 1)

	go func() {
		defer func() {
			if r := recover(); r != nil {
				log.Printf("‚ùå –ü–∞–Ω–∏–∫–∞ –≤ main: %v", r)
			}
			done <- true
		}()

		runTest()
	}()

	select {
	case <-done:
		fmt.Println("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
	case <-ctx.Done():
		fmt.Println("‚ùå –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ timeout (20 —Å–µ–∫—É–Ω–¥)")
	}
}

func runTest() {
	fmt.Println("üß™ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç media_with_sdp")
	fmt.Println(strings.Repeat("=", 50))

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
	manager := createManager()

	// –°–æ–∑–¥–∞–µ–º –¥–≤–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
	caller := createTestSession(manager, "caller-001", "–ò—Å—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫")
	callee := createTestSession(manager, "callee-002", "–í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫")

	fmt.Printf("‚úÖ –°–æ–∑–¥–∞–Ω—ã –¥–≤–µ —Å–µ—Å—Å–∏–∏:\n")
	fmt.Printf("   üìû %s (%s)\n", caller.sessionID, caller.description)
	fmt.Printf("   üìû %s (%s)\n", callee.sessionID, callee.description)

	// –≠—Ç–∞–ø 1: SDP –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã
	fmt.Println("\nüîÑ –≠—Ç–∞–ø 1: SDP –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã")
	offer, answer := performSDPNegotiation(caller, callee)

	// –≠—Ç–∞–ø 2: –ó–∞–ø—É—Å–∫ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
	fmt.Println("\nüéµ –≠—Ç–∞–ø 2: –ó–∞–ø—É—Å–∫ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π")
	rtpSessions := startMediaSessions(caller, callee)

	// –≠—Ç–∞–ø 3: –û–±–º–µ–Ω –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–º–∏
	fmt.Println("\nüì° –≠—Ç–∞–ø 3: –û–±–º–µ–Ω –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–º–∏")
	exchangeAudioData(caller, callee)

	// –≠—Ç–∞–ø 4: –û—Ç–ø—Ä–∞–≤–∫–∞ DTMF —Å–∏–≥–Ω–∞–ª–æ–≤
	fmt.Println("\nüî¢ –≠—Ç–∞–ø 4: –û—Ç–ø—Ä–∞–≤–∫–∞ DTMF —Å–∏–≥–Ω–∞–ª–æ–≤")
	exchangeDTMFSignals(caller, callee)

	// –≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	fmt.Println("\nüìä –≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
	verifyResults(caller, callee, offer, answer)

	// –≠—Ç–∞–ø 6: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫)
	fmt.Println("\nüõë –≠—Ç–∞–ø 6: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π")

	// –°–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º RTP —Å–µ—Å—Å–∏–∏
	fmt.Println("   üîß –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RTP —Å–µ—Å—Å–∏–π...")
	cleanupRTPSessions(rtpSessions)
	fmt.Println("   ‚úÖ RTP —Å–µ—Å—Å–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

	// –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è RTP –æ–ø–µ—Ä–∞—Ü–∏–π
	time.Sleep(50 * time.Millisecond)

	// –ó–∞—Ç–µ–º –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	terminateSessions(caller, callee)

	// –ò –Ω–∞–∫–æ–Ω–µ—Ü –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å timeout
	fmt.Println("   üîß –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
	managerDone := make(chan bool, 1)
	go func() {
		manager.StopAll()
		managerDone <- true
	}()

	select {
	case <-managerDone:
		fmt.Println("   ‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
	case <-time.After(2 * time.Second):
		fmt.Println("   ‚ö†Ô∏è  Timeout –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)")
	}

	fmt.Println("\nüéâ –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}

// createManager —Å–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
func createManager() *media_with_sdp.Manager {
	config := media_with_sdp.DefaultMediaSessionWithSDPManagerConfig()
	config.LocalIP = "127.0.0.1"
	config.PortRange = media_with_sdp.PortRange{Min: 12000, Max: 12100}
	config.MaxSessions = 5
	config.SessionTimeout = time.Minute * 10
	config.PreferredCodecs = []string{"PCMU", "PCMA"}

	// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	config.BaseMediaSessionConfig = media.DefaultMediaSessionConfig()
	config.BaseMediaSessionConfig.Direction = media.DirectionSendRecv
	config.BaseMediaSessionConfig.PayloadType = media.PayloadTypePCMU
	config.BaseMediaSessionConfig.Ptime = time.Millisecond * 20
	config.BaseMediaSessionConfig.DTMFEnabled = true
	config.BaseMediaSessionConfig.JitterEnabled = true

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö callback —Ñ—É–Ω–∫—Ü–∏–π
	config.OnSessionCreated = func(sessionID string, session *media_with_sdp.SessionWithSDP) {
		fmt.Printf("   üìà –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: %s\n", sessionID)
	}
	config.OnSessionDestroyed = func(sessionID string) {
		fmt.Printf("   üìâ –£–¥–∞–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è: %s\n", sessionID)
	}
	config.OnNegotiationStateChange = func(sessionID string, state media_with_sdp.NegotiationState) {
		fmt.Printf("   üîÑ %s: —Å–æ—Å—Ç–æ—è–Ω–∏–µ SDP -> %s\n", sessionID, state)
	}
	config.OnPortsAllocated = func(sessionID string, rtpPort, rtcpPort int) {
		fmt.Printf("   üîå %s: –ø–æ—Ä—Ç—ã RTP=%d, RTCP=%d\n", sessionID, rtpPort, rtcpPort)
	}

	manager, err := media_with_sdp.NewMediaSessionWithSDPManager(config)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: %v", err)
	}

	fmt.Printf("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω (localhost:%d-%d)\n",
		config.PortRange.Min, config.PortRange.Max)

	return manager
}

// createTestSession —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Å–µ—Å—Å–∏—é —Å callback —Ñ—É–Ω–∫—Ü–∏—è–º–∏
func createTestSession(manager *media_with_sdp.Manager, sessionID, description string) *TestSession {
	testSession := &TestSession{
		sessionID:     sessionID,
		description:   description,
		receivedAudio: make([][]byte, 0),
		receivedDTMF:  make([]media.DTMFEvent, 0),
	}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–µ—Å—Å–∏–∏ —Å callback
	baseConfig := media.DefaultMediaSessionConfig()
	baseConfig.SessionID = sessionID // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º session ID

	sessionConfig := media_with_sdp.SessionWithSDPConfig{
		MediaSessionConfig: baseConfig,
		LocalIP:            "127.0.0.1",
		SessionName:        fmt.Sprintf("Test Session %s", sessionID),
		PreferredCodecs:    []string{"PCMU", "PCMA"},
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback –¥–ª—è –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
	sessionConfig.MediaSessionConfig.OnRawAudioReceived = func(audioData []byte, payloadType media.PayloadType, duration time.Duration) {
		testSession.mutex.Lock()
		defer testSession.mutex.Unlock()
		testSession.receivedAudio = append(testSession.receivedAudio, audioData)
		fmt.Printf("   üéµ %s: –ø–æ–ª—É—á–µ–Ω—ã –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ (%d –±–∞–π—Ç, PT=%d)\n",
			sessionID, len(audioData), payloadType)
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ callback –¥–ª—è DTMF
	sessionConfig.MediaSessionConfig.OnDTMFReceived = func(event media.DTMFEvent) {
		testSession.mutex.Lock()
		defer testSession.mutex.Unlock()
		testSession.receivedDTMF = append(testSession.receivedDTMF, event)
		fmt.Printf("   üî¢ %s: –ø–æ–ª—É—á–µ–Ω DTMF —Å–∏–º–≤–æ–ª '%c' (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v)\n",
			sessionID, rune(event.Digit+'0'), event.Duration)
	}

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
	session, err := manager.CreateSessionWithConfig(sessionID, sessionConfig)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ %s: %v", sessionID, err)
	}

	testSession.session = session
	return testSession
}

// performSDPNegotiation –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª SDP –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤
func performSDPNegotiation(caller, callee *TestSession) (*sdp.SessionDescription, *sdp.SessionDescription) {
	fmt.Printf("   üì§ %s —Å–æ–∑–¥–∞–µ—Ç SDP offer...\n", caller.sessionID)

	// Caller —Å–æ–∑–¥–∞–µ—Ç offer
	offer, err := caller.session.CreateOffer()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer: %v", err)
	}

	offerBytes, err := offer.Marshal()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ offer: %v", err)
	}

	fmt.Printf("   ‚úÖ SDP Offer —Å–æ–∑–¥–∞–Ω (%d –±–∞–π—Ç)\n", len(offerBytes))
	fmt.Printf("   üìã Offer summary: %d –º–µ–¥–∏–∞ –æ–ø–∏—Å–∞–Ω–∏–π\n", len(offer.MediaDescriptions))

	// Callee –ø–æ–ª—É—á–∞–µ—Ç offer –∏ —Å–æ–∑–¥–∞–µ—Ç answer
	fmt.Printf("   üì• %s –ø–æ–ª—É—á–∞–µ—Ç offer –∏ —Å–æ–∑–¥–∞–µ—Ç answer...\n", callee.sessionID)

	err = callee.session.SetRemoteDescription(offer)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ remote description: %v", err)
	}

	answer, err := callee.session.CreateAnswer(offer)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è answer: %v", err)
	}

	answerBytes, err := answer.Marshal()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ answer: %v", err)
	}

	fmt.Printf("   ‚úÖ SDP Answer —Å–æ–∑–¥–∞–Ω (%d –±–∞–π—Ç)\n", len(answerBytes))

	// Caller –ø–æ–ª—É—á–∞–µ—Ç answer
	fmt.Printf("   üì• %s –ø–æ–ª—É—á–∞–µ—Ç answer...\n", caller.sessionID)

	err = caller.session.SetRemoteDescription(answer)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ remote description –≤ caller: %v", err)
	}

	fmt.Printf("   ü§ù SDP –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ\n")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤
	fmt.Printf("   üìä –°–æ—Å—Ç–æ—è–Ω–∏—è: %s=%s, %s=%s\n",
		caller.sessionID, caller.session.GetNegotiationState(),
		callee.sessionID, callee.session.GetNegotiationState())

	return offer, answer
}

// startMediaSessions –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
func startMediaSessions(caller, callee *TestSession) []*RTPSessionWithTransport {
	defer func() {
		if r := recover(); r != nil {
			log.Printf("‚ùå –ü–∞–Ω–∏–∫–∞ –≤ startMediaSessions: %v", r)
			panic(r)
		}
	}()

	// –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º RTP —Å–µ—Å—Å–∏–∏
	fmt.Println("   üîß –°–æ–∑–¥–∞–Ω–∏–µ RTP —Å–µ—Å—Å–∏–π...")

	// –°–æ–∑–¥–∞–µ–º RTP —Å–µ—Å—Å–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã)
	fmt.Printf("   üîß –°–æ–∑–¥–∞–Ω–∏–µ RTP —Å–µ—Å—Å–∏–∏ –¥–ª—è caller –Ω–∞ –ø–æ—Ä—Ç—É 16000...\n")
	callerRTPSession, callerTransport, err := createRealRTPSession(caller.sessionID, 16000)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RTP —Å–µ—Å—Å–∏–∏ –¥–ª—è caller: %v", err)
	}
	fmt.Printf("   ‚úÖ RTP —Å–µ—Å—Å–∏—è –¥–ª—è caller —Å–æ–∑–¥–∞–Ω–∞\n")

	fmt.Printf("   üîß –°–æ–∑–¥–∞–Ω–∏–µ RTP —Å–µ—Å—Å–∏–∏ –¥–ª—è callee –Ω–∞ –ø–æ—Ä—Ç—É 16002...\n")
	calleeRTPSession, calleeTransport, err := createRealRTPSession(callee.sessionID, 16002)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RTP —Å–µ—Å—Å–∏–∏ –¥–ª—è callee: %v", err)
	}
	fmt.Printf("   ‚úÖ RTP —Å–µ—Å—Å–∏—è –¥–ª—è callee —Å–æ–∑–¥–∞–Ω–∞\n")

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–µ—Å—Å–∏–π
	fmt.Printf("   üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–ª—è caller...\n")
	err = callerTransport.SetRemoteAddr("127.0.0.1:16002")
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–ª—è caller: %v", err)
	}

	fmt.Printf("   üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–ª—è callee...\n")
	err = calleeTransport.SetRemoteAddr("127.0.0.1:16000")
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–ª—è callee: %v", err)
	}

	// –î–æ–±–∞–≤–ª—è–µ–º RTP —Å–µ—Å—Å–∏–∏ –∫ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è–º
	fmt.Printf("   üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ RTP —Å–µ—Å—Å–∏–∏ –∫ caller –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏...\n")
	err = caller.session.AddRTPSession("primary", callerRTPSession)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è RTP —Å–µ—Å—Å–∏–∏ –¥–ª—è caller: %v", err)
	}

	fmt.Printf("   üîß –î–æ–±–∞–≤–ª–µ–Ω–∏–µ RTP —Å–µ—Å—Å–∏–∏ –∫ callee –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏...\n")
	err = callee.session.AddRTPSession("primary", calleeRTPSession)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è RTP —Å–µ—Å—Å–∏–∏ –¥–ª—è callee: %v", err)
	}

	fmt.Printf("   ‚úÖ RTP —Å–µ—Å—Å–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –∫ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è–º\n")

	fmt.Printf("   üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ %s...\n", caller.sessionID)
	err = caller.session.Start()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ caller —Å–µ—Å—Å–∏–∏: %v", err)
	}

	fmt.Printf("   üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ %s...\n", callee.sessionID)
	err = callee.session.Start()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ callee —Å–µ—Å—Å–∏–∏: %v", err)
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã
	callerRTP, callerRTCP, _ := caller.session.GetAllocatedPorts()
	calleeRTP, calleeRTCP, _ := callee.session.GetAllocatedPorts()

	fmt.Printf("   üîå %s: RTP=%d, RTCP=%d -> —É–¥–∞–ª–µ–Ω–Ω—ã–π RTP=16002\n", caller.sessionID, callerRTP, callerRTCP)
	fmt.Printf("   üîå %s: RTP=%d, RTCP=%d -> —É–¥–∞–ª–µ–Ω–Ω—ã–π RTP=16000\n", callee.sessionID, calleeRTP, calleeRTCP)
	fmt.Printf("   ‚úÖ –û–±–µ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏ –∑–∞–ø—É—â–µ–Ω—ã\n")

	return []*RTPSessionWithTransport{
		{Session: callerRTPSession, Transport: callerTransport},
		{Session: calleeRTPSession, Transport: calleeTransport},
	}
}

// createRealRTPSession —Å–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é RTP —Å–µ—Å—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func createRealRTPSession(sessionID string, localPort int) (*rtp.Session, *rtp.UDPTransport, error) {
	defer func() {
		if r := recover(); r != nil {
			log.Printf("‚ùå –ü–∞–Ω–∏–∫–∞ –≤ createRealRTPSession –¥–ª—è %s –ø–æ—Ä—Ç %d: %v", sessionID, localPort, r)
			panic(r)
		}
	}()

	// –°–æ–∑–¥–∞–µ–º UDP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
	transportConfig := rtp.TransportConfig{
		LocalAddr:  fmt.Sprintf("127.0.0.1:%d", localPort),
		BufferSize: 1500,
	}

	fmt.Printf("   üîß –°–æ–∑–¥–∞–Ω–∏–µ UDP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è %s –Ω–∞ %s...\n", sessionID, transportConfig.LocalAddr)
	transport, err := rtp.NewUDPTransport(transportConfig)
	if err != nil {
		return nil, nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è UDP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: %w", err)
	}
	fmt.Printf("   ‚úÖ UDP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è %s\n", sessionID)

	// –°–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
	localDesc := rtp.SourceDescription{
		CNAME: fmt.Sprintf("test@%s", sessionID),
		NAME:  "Test Session",
		TOOL:  "Media Test v1.0",
	}

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è RTP —Å–µ—Å—Å–∏–∏
	sessionConfig := rtp.SessionConfig{
		PayloadType: rtp.PayloadTypePCMU, // G.711 Œº-law
		MediaType:   rtp.MediaTypeAudio,
		ClockRate:   8000, // 8kHz –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏
		Transport:   transport,
		LocalSDesc:  localDesc,

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
		OnPacketReceived: func(packet *pionrtp.Packet, addr net.Addr) {
			fmt.Printf("   üéµ %s: –ø–æ–ª—É—á–µ–Ω RTP –ø–∞–∫–µ—Ç (SSRC=%d, Seq=%d, —Ä–∞–∑–º–µ—Ä=%d –±–∞–π—Ç)\n",
				sessionID, packet.SSRC, packet.SequenceNumber, len(packet.Payload))
		},
		OnSourceAdded: func(ssrc uint32) {
			fmt.Printf("   üì° %s: –¥–æ–±–∞–≤–ª–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ SSRC=%d\n", sessionID, ssrc)
		},
		OnSourceRemoved: func(ssrc uint32) {
			fmt.Printf("   üì° %s: —É–¥–∞–ª–µ–Ω –∏—Å—Ç–æ—á–Ω–∏–∫ SSRC=%d\n", sessionID, ssrc)
		},
	}

	// –°–æ–∑–¥–∞–µ–º RTP —Å–µ—Å—Å–∏—é
	fmt.Printf("   üîß –°–æ–∑–¥–∞–Ω–∏–µ RTP —Å–µ—Å—Å–∏–∏ –¥–ª—è %s...\n", sessionID)
	session, err := rtp.NewSession(sessionConfig)
	if err != nil {
		transport.Close()
		return nil, nil, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RTP —Å–µ—Å—Å–∏–∏: %w", err)
	}
	fmt.Printf("   ‚úÖ RTP —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ –¥–ª—è %s\n", sessionID)

	return session, transport, nil
}

// exchangeAudioData —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±–º–µ–Ω –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–º–∏
func exchangeAudioData(caller, callee *TestSession) {
	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ (PCMU –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—ç–º–ø–ª—ã)
	testAudioData1 := generateTestAudio("Hello from caller", 160)
	testAudioData2 := generateTestAudio("Hello from callee", 160)
	testAudioData3 := generateTestAudio("Testing audio", 160)

	fmt.Printf("   üì§ %s –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ...\n", caller.sessionID)

	// Caller –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ
	err := caller.session.SendAudioRaw(testAudioData1)
	if err != nil {
		fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –æ—Ç caller: %v\n", err)
	} else {
		fmt.Printf("   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –±–∞–π—Ç –∞—É–¥–∏–æ –æ—Ç %s\n", len(testAudioData1), caller.sessionID)
	}

	// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
	time.Sleep(100 * time.Millisecond)

	fmt.Printf("   üì§ %s –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ...\n", callee.sessionID)

	// Callee –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ
	err = callee.session.SendAudioRaw(testAudioData2)
	if err != nil {
		fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –æ—Ç callee: %v\n", err)
	} else {
		fmt.Printf("   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –±–∞–π—Ç –∞—É–¥–∏–æ –æ—Ç %s\n", len(testAudioData2), callee.sessionID)
	}

	// –ï—â–µ –æ–¥–Ω–∞ –ø–∞—É–∑–∞
	time.Sleep(100 * time.Millisecond)

	// –ï—â–µ –æ–¥–∏–Ω –æ–±–º–µ–Ω
	fmt.Printf("   üì§ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –æ–±–º–µ–Ω –∞—É–¥–∏–æ...\n")

	err = caller.session.SendAudioRaw(testAudioData3)
	if err != nil {
		fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞—É–¥–∏–æ: %v\n", err)
	} else {
		fmt.Printf("   ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ %d –±–∞–π—Ç –∞—É–¥–∏–æ\n", len(testAudioData3))
	}

	// –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
	time.Sleep(200 * time.Millisecond)
	fmt.Printf("   ‚úÖ –û–±–º–µ–Ω –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω\n")
}

// exchangeDTMFSignals –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç DTMF —Å–∏–≥–Ω–∞–ª—ã –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
func exchangeDTMFSignals(caller, callee *TestSession) {
	dtmfSequence1 := []media.DTMFDigit{media.DTMF1, media.DTMF2, media.DTMF3}
	dtmfSequence2 := []media.DTMFDigit{media.DTMF9, media.DTMF0, media.DTMFStar}

	fmt.Printf("   üì§ %s –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç DTMF –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1-2-3\n", caller.sessionID)

	// Caller –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç DTMF
	for _, digit := range dtmfSequence1 {
		err := caller.session.SendDTMF(digit, 200*time.Millisecond)
		if err != nil {
			fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DTMF %c: %v\n", rune(digit+'0'), err)
		} else {
			fmt.Printf("   üî¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω DTMF '%c' –æ—Ç %s\n", rune(digit+'0'), caller.sessionID)
		}
		time.Sleep(50 * time.Millisecond)
	}

	// –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏
	time.Sleep(300 * time.Millisecond)

	fmt.Printf("   üì§ %s –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç DTMF –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 9-0-*\n", callee.sessionID)

	// Callee –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç DTMF
	for _, digit := range dtmfSequence2 {
		err := callee.session.SendDTMF(digit, 200*time.Millisecond)
		if err != nil {
			fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DTMF %c: %v\n", rune(digit+'0'), err)
		} else {
			fmt.Printf("   üî¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω DTMF '%c' –æ—Ç %s\n", rune(digit+'0'), callee.sessionID)
		}
		time.Sleep(50 * time.Millisecond)
	}

	// –ü–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö DTMF —Å–∏–≥–Ω–∞–ª–æ–≤
	time.Sleep(500 * time.Millisecond)
	fmt.Printf("   ‚úÖ –û–±–º–µ–Ω DTMF —Å–∏–≥–Ω–∞–ª–∞–º–∏ –∑–∞–≤–µ—Ä—à–µ–Ω\n")
}

// verifyResults –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
func verifyResults(caller, callee *TestSession, offer, answer *sdp.SessionDescription) {
	fmt.Printf("   üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SDP –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤...\n")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º SDP —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
	if len(offer.MediaDescriptions) == 0 {
		fmt.Printf("   ‚ùå Offer –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ –æ–ø–∏—Å–∞–Ω–∏–π\n")
	} else {
		fmt.Printf("   ‚úÖ Offer —Å–æ–¥–µ—Ä–∂–∏—Ç %d –º–µ–¥–∏–∞ –æ–ø–∏—Å–∞–Ω–∏–π\n", len(offer.MediaDescriptions))
	}

	if len(answer.MediaDescriptions) == 0 {
		fmt.Printf("   ‚ùå Answer –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ –æ–ø–∏—Å–∞–Ω–∏–π\n")
	} else {
		fmt.Printf("   ‚úÖ Answer —Å–æ–¥–µ—Ä–∂–∏—Ç %d –º–µ–¥–∏–∞ –æ–ø–∏—Å–∞–Ω–∏–π\n", len(answer.MediaDescriptions))
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–π
	callerState := caller.session.GetState()
	calleeState := callee.session.GetState()

	fmt.Printf("   üìä –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–π: %s=%s, %s=%s\n",
		caller.sessionID, callerState,
		callee.sessionID, calleeState)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	callerStats := caller.session.GetStatistics()
	calleeStats := callee.session.GetStatistics()

	fmt.Printf("   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ %s: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –ø–∞–∫–µ—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ %d –ø–∞–∫–µ—Ç–æ–≤\n",
		caller.sessionID, callerStats.AudioPacketsSent, callerStats.AudioPacketsReceived)
	fmt.Printf("   üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ %s: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –ø–∞–∫–µ—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ %d –ø–∞–∫–µ—Ç–æ–≤\n",
		callee.sessionID, calleeStats.AudioPacketsSent, calleeStats.AudioPacketsReceived)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
	caller.mutex.Lock()
	callerReceivedAudio := len(caller.receivedAudio)
	callerReceivedDTMF := len(caller.receivedDTMF)
	caller.mutex.Unlock()

	callee.mutex.Lock()
	calleeReceivedAudio := len(callee.receivedAudio)
	calleeReceivedDTMF := len(callee.receivedDTMF)
	callee.mutex.Unlock()

	fmt.Printf("   üì• %s –ø–æ–ª—É—á–∏–ª: %d –∞—É–¥–∏–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤, %d DTMF —Å–æ–±—ã—Ç–∏–π\n",
		caller.sessionID, callerReceivedAudio, callerReceivedDTMF)
	fmt.Printf("   üì• %s –ø–æ–ª—É—á–∏–ª: %d –∞—É–¥–∏–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤, %d DTMF —Å–æ–±—ã—Ç–∏–π\n",
		callee.sessionID, calleeReceivedAudio, calleeReceivedDTMF)

	// –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
	totalSuccess := true
	if callerState != media.MediaStateActive && callerState != media.MediaStateIdle {
		fmt.Printf("   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ caller —Å–µ—Å—Å–∏–∏: %s\n", callerState)
		totalSuccess = false
	}
	if calleeState != media.MediaStateActive && calleeState != media.MediaStateIdle {
		fmt.Printf("   ‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ callee —Å–µ—Å—Å–∏–∏: %s\n", calleeState)
		totalSuccess = false
	}

	if totalSuccess {
		fmt.Printf("   ‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ\n")
	} else {
		fmt.Printf("   ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–±–ª–µ–º—ã\n")
	}
}

// terminateSessions –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–µ—Å—Å–∏–∏
func terminateSessions(caller, callee *TestSession) {
	// –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º RTP —Å–µ—Å—Å–∏–∏ –∏–∑ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
	fmt.Printf("   üîß –£–¥–∞–ª–µ–Ω–∏–µ RTP —Å–µ—Å—Å–∏–π –∏–∑ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π...\n")

	err := caller.session.RemoveRTPSession("primary")
	if err != nil {
		fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è RTP —Å–µ—Å—Å–∏–∏ –∏–∑ caller: %v\n", err)
	}

	err = callee.session.RemoveRTPSession("primary")
	if err != nil {
		fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è RTP —Å–µ—Å—Å–∏–∏ –∏–∑ callee: %v\n", err)
	}

	fmt.Printf("   ‚úÖ RTP —Å–µ—Å—Å–∏–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π\n")

	// –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
	time.Sleep(200 * time.Millisecond)

	// –£–º–µ–Ω—å—à–∞–µ–º timeout –¥–æ 1 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	timeout := 1 * time.Second

	fmt.Printf("   üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ %s...\n", caller.sessionID)
	stopSessionWithTimeout(caller.session, caller.sessionID, timeout)

	fmt.Printf("   üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Å—Å–∏–∏ %s...\n", callee.sessionID)
	stopSessionWithTimeout(callee.session, callee.sessionID, timeout)

	fmt.Printf("   ‚úÖ –í—Å–µ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã\n")
}

// stopSessionWithTimeout –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–µ—Å—Å–∏—é —Å timeout
func stopSessionWithTimeout(session *media_with_sdp.SessionWithSDP, sessionID string, timeout time.Duration) {
	// –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –æ—á–∏—Å—Ç–∏—Ç—å –±—É—Ñ–µ—Ä—ã
	fmt.Printf("     üîß –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤ %s...\n", sessionID)

	// –ï—Å–ª–∏ –µ—Å—Ç—å –±–∞–∑–æ–≤–∞—è –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è, –ø—ã—Ç–∞–µ–º—Å—è –æ—á–∏—Å—Ç–∏—Ç—å –µ—ë –±—É—Ñ–µ—Ä—ã
	// (—ç—Ç–æ –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏)

	done := make(chan error, 1)

	//go func() {
	defer func() {
		if r := recover(); r != nil {
			done <- fmt.Errorf("–ø–∞–Ω–∏–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: %v", r)
		}
	}()
	done <- session.Stop()
	//}()

	select {
	case err := <-done:
		if err != nil {
			fmt.Printf("   ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ %s: %v\n", sessionID, err)
		} else {
			fmt.Printf("   ‚úÖ –°–µ—Å—Å–∏—è %s –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n", sessionID)
		}
	case <-time.After(timeout):
		fmt.Printf("   ‚ö†Ô∏è  Timeout –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ %s (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)\n", sessionID)
		// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º - –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
	}
}

// generateTestAudio —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ (—Å–∏–º—É–ª—è—Ü–∏—è PCMU –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
func generateTestAudio(description string, size int) []byte {
	// –°–æ–∑–¥–∞–µ–º –ø—Å–µ–≤–¥–æ-—Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–∏
	data := make([]byte, size)
	seed := 0
	for _, char := range description {
		seed += int(char)
	}

	for i := range data {
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Å–µ–≤–¥–æ-PCMU –¥–∞–Ω–Ω—ã–µ (Œº-law encoding –∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è)
		data[i] = byte((seed + i*7) % 256)
		// Œº-law –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ, –∏–∑–±–µ–≥–∞–µ–º 0x00 –∏ 0xFF
		if data[i] == 0x00 {
			data[i] = 0x01
		}
		if data[i] == 0xFF {
			data[i] = 0xFE
		}
	}

	return data
}

// cleanupRTPSessions –∑–∞–≤–µ—Ä—à–∞–µ—Ç –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã RTP —Å–µ—Å—Å–∏–π
func cleanupRTPSessions(sessions []*RTPSessionWithTransport) {
	for i, sessionWithTransport := range sessions {
		fmt.Printf("     üîß –û—Å—Ç–∞–Ω–æ–≤–∫–∞ RTP —Å–µ—Å—Å–∏–∏ %d...\n", i+1)

		// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º RTP —Å–µ—Å—Å–∏—é —Å timeout
		stopChannel := make(chan error, 1)
		go func(session *rtp.Session) {
			stopChannel <- session.Stop()
		}(sessionWithTransport.Session)

		select {
		case err := <-stopChannel:
			if err != nil {
				log.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ RTP —Å–µ—Å—Å–∏–∏ %d: %v", i+1, err)
			} else {
				fmt.Printf("     ‚úÖ RTP —Å–µ—Å—Å–∏—è %d –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n", i+1)
			}
		case <-time.After(2 * time.Second):
			fmt.Printf("     ‚ö†Ô∏è  Timeout –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ RTP —Å–µ—Å—Å–∏–∏ %d\n", i+1)
		}

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
		fmt.Printf("     üîß –ó–∞–∫—Ä—ã—Ç–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ %d...\n", i+1)
		err := sessionWithTransport.Transport.Close()
		if err != nil {
			log.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è UDP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ %d: %v", i+1, err)
		} else {
			fmt.Printf("     ‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç %d –∑–∞–∫—Ä—ã—Ç\n", i+1)
		}

		// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
		time.Sleep(50 * time.Millisecond)
	}
}
