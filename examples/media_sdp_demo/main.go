package main

import (
	"fmt"
	"log"
	"time"

	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/media_sdp"
	"github.com/arzzra/soft_phone/pkg/rtp"
)

func main() {
	fmt.Println("üéµ Media SDP Package Demo üéµ")
	fmt.Println("================================")

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è SDP Offer
	fmt.Println("\n--- –°–æ–∑–¥–∞–Ω–∏–µ SDP Offer ---")

	builderConfig := media_sdp.DefaultBuilderConfig()
	builderConfig.SessionID = "demo-offer-session"
	builderConfig.SessionName = "Demo Audio Call"
	builderConfig.PayloadType = rtp.PayloadTypePCMU
	builderConfig.ClockRate = 8000
	builderConfig.Transport.LocalAddr = ":5004"

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback'–∏
	builderConfig.MediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration) {
		fmt.Printf("[OFFER] –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ: %d –±–∞–π—Ç, payload type %d\n", len(data), pt)
	}

	builderConfig.MediaConfig.OnDTMFReceived = func(event media.DTMFEvent) {
		fmt.Printf("[OFFER] –ü–æ–ª—É—á–µ–Ω DTMF: %s\n", event.Digit)
	}

	// –°–æ–∑–¥–∞–µ–º builder
	builder, err := media_sdp.NewSDPMediaBuilder(builderConfig)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SDP Builder: %v", err)
	}
	defer builder.Stop()

	// –°–æ–∑–¥–∞–µ–º SDP offer
	offer, err := builder.CreateOffer()
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SDP offer: %v", err)
	}

	fmt.Printf("‚úÖ SDP Offer —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:\n")
	fmt.Printf("Session Name: %s\n", offer.SessionName)
	fmt.Printf("Origin: %+v\n", offer.Origin)

	if len(offer.MediaDescriptions) > 0 {
		media := offer.MediaDescriptions[0]
		fmt.Printf("Media: %s, Port: %d, Formats: %v\n",
			media.MediaName.Media, media.MediaName.Port.Value, media.MediaName.Formats)

		fmt.Printf("Attributes: ")
		for _, attr := range media.Attributes {
			fmt.Printf("%s=%s ", attr.Key, attr.Value)
		}
		fmt.Println()
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ SDP Offer –∏ —Å–æ–∑–¥–∞–Ω–∏—è Answer
	fmt.Println("\n--- –û–±—Ä–∞–±–æ—Ç–∫–∞ SDP Offer –∏ —Å–æ–∑–¥–∞–Ω–∏–µ Answer ---")

	handlerConfig := media_sdp.DefaultHandlerConfig()
	handlerConfig.SessionID = "demo-answer-session"
	handlerConfig.SessionName = "Demo Audio Response"
	handlerConfig.Transport.LocalAddr = ":5006"

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback'–∏
	handlerConfig.MediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration) {
		fmt.Printf("[ANSWER] –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ: %d –±–∞–π—Ç, payload type %d\n", len(data), pt)
	}

	handlerConfig.MediaConfig.OnDTMFReceived = func(event media.DTMFEvent) {
		fmt.Printf("[ANSWER] –ü–æ–ª—É—á–µ–Ω DTMF: %s\n", event.Digit)
	}

	// –°–æ–∑–¥–∞–µ–º handler
	handler, err := media_sdp.NewSDPMediaHandler(handlerConfig)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SDP Handler: %v", err)
	}
	defer handler.Stop()

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π offer
	err = handler.ProcessOffer(offer)
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å SDP offer: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º SDP answer
	answer, err := handler.CreateAnswer()
	if err != nil {
		log.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SDP answer: %v", err)
	}

	fmt.Printf("‚úÖ SDP Answer —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:\n")
	fmt.Printf("Session Name: %s\n", answer.SessionName)
	fmt.Printf("Origin: %+v\n", answer.Origin)

	if len(answer.MediaDescriptions) > 0 {
		media := answer.MediaDescriptions[0]
		fmt.Printf("Media: %s, Port: %d, Formats: %v\n",
			media.MediaName.Media, media.MediaName.Port.Value, media.MediaName.Formats)

		fmt.Printf("Attributes: ")
		for _, attr := range media.Attributes {
			fmt.Printf("%s=%s ", attr.Key, attr.Value)
		}
		fmt.Println()
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–π
	fmt.Println("\n--- –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–π ---")

	fmt.Println("–ó–∞–ø—É—Å–∫–∞–µ–º offer session...")
	if err := builder.Start(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ offer session: %v", err)
	} else {
		fmt.Println("‚úÖ Offer session –∑–∞–ø—É—â–µ–Ω–∞")
	}

	fmt.Println("–ó–∞–ø—É—Å–∫–∞–µ–º answer session...")
	if err := handler.Start(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ answer session: %v", err)
	} else {
		fmt.Println("‚úÖ Answer session –∑–∞–ø—É—â–µ–Ω–∞")
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	fmt.Println("\n--- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏—è—Ö ---")

	if builderMediaSession := builder.GetMediaSession(); builderMediaSession != nil {
		stats := builderMediaSession.GetStatistics()
		fmt.Printf("Offer MediaSession Stats: %+v\n", stats)
	}

	if builderRTPSession := builder.GetRTPSession(); builderRTPSession != nil {
		fmt.Printf("Offer RTP SSRC: %d\n", builderRTPSession.GetSSRC())
	}

	if handlerMediaSession := handler.GetMediaSession(); handlerMediaSession != nil {
		stats := handlerMediaSession.GetStatistics()
		fmt.Printf("Answer MediaSession Stats: %+v\n", stats)
	}

	if handlerRTPSession := handler.GetRTPSession(); handlerRTPSession != nil {
		fmt.Printf("Answer RTP SSRC: %d\n", handlerRTPSession.GetSSRC())
	}

	fmt.Println("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
	fmt.Println("\n–û–±–µ —Å—Ç–æ—Ä–æ–Ω—ã –≥–æ—Ç–æ–≤—ã –¥–ª—è –æ–±–º–µ–Ω–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–º–∏ —á–µ—Ä–µ–∑ RTP/Media —Å—Ç–µ–∫.")
}
