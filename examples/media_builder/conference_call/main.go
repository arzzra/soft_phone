// Package main –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
package main

import (
	"fmt"
	"log"
	"sync"
	"sync/atomic"
	"time"

	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/media_builder"
	"github.com/pion/sdp/v3"
)

// Participant –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
type Participant struct {
	ID       string
	Name     string
	Builders map[string]media_builder.Builder // –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
	Sessions map[string]media.Session         // –ú–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
}

// Conference –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é
type Conference struct {
	mu           sync.RWMutex
	participants map[string]*Participant
	manager      media_builder.BuilderManager
	stats        *ConferenceStats
}

// ConferenceStats –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
type ConferenceStats struct {
	audioPacketsSent     int64
	audioPacketsReceived int64
	dtmfEventsSent       int64
	dtmfEventsReceived   int64
	connectionsCreated   int64
	connectionsFailed    int64
}

// ConferenceExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
func ConferenceExample() error {
	fmt.Println("üéôÔ∏è  –ü—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —Å media_builder")
	fmt.Println("=====================================")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
	config := media_builder.DefaultConfig()
	config.LocalHost = "127.0.0.1"
	config.MinPort = 20000
	config.MaxPort = 21000
	config.MaxConcurrentBuilders = 100 // –ë–æ–ª—å—à–µ builder'–æ–≤ –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
	config.PortAllocationStrategy = media_builder.PortAllocationRandom

	stats := &ConferenceStats{}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callbacks
	config.DefaultMediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration, sessionID string) {
		atomic.AddInt64(&stats.audioPacketsReceived, 1)
		// –í —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ
	}

	config.DefaultMediaConfig.OnDTMFReceived = func(event media.DTMFEvent, sessionID string) {
		atomic.AddInt64(&stats.dtmfEventsReceived, 1)
		fmt.Printf("‚òéÔ∏è  [%s] DTMF: %s\n", sessionID, event.Digit)
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
	manager, err := media_builder.NewBuilderManager(config)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä: %w", err)
	}
	defer manager.Shutdown()

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é
	conference := &Conference{
		participants: make(map[string]*Participant),
		manager:      manager,
		stats:        stats,
	}

	fmt.Printf("‚úÖ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞. –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Ä—Ç–æ–≤: %d\n\n", manager.GetAvailablePortsCount())

	// –®–∞–≥ 1: –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	participantNames := []struct {
		id   string
		name string
	}{
		{"alice", "–ê–ª–∏—Å–∞"},
		{"bob", "–ë–æ–±"},
		{"charlie", "–ß–∞—Ä–ª–∏"},
		{"diana", "–î–∏–∞–Ω–∞"},
	}

	fmt.Println("üë• –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é...")
	for _, p := range participantNames {
		if err := conference.AddParticipant(p.id, p.name); err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ %s: %w", p.name, err)
		}
		fmt.Printf("  ‚úÖ %s –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏\n", p.name)
		time.Sleep(100 * time.Millisecond) // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	}

	// –®–∞–≥ 2: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ (full mesh)
	fmt.Println("\nüîó –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏...")
	if err := conference.EstablishFullMesh(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: %w", err)
	}

	// –®–∞–≥ 3: –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	fmt.Println("\nüé¨ –ó–∞–ø—É—Å–∫ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π...")
	if err := conference.StartAllSessions(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏–∏: %w", err)
	}

	// –®–∞–≥ 4: –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
	fmt.Println("\nüí¨ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –Ω–∞—á–∞–ª–∞—Å—å...")

	// –ê–ª–∏—Å–∞ –≥–æ–≤–æ—Ä–∏—Ç
	go func() {
		participant := conference.GetParticipant("alice")
		if participant == nil {
			return
		}

		audioData := generateTestAudio(160) // 20ms –∞—É–¥–∏–æ
		for i := 0; i < 10; i++ {
			conference.BroadcastAudio("alice", audioData)
			atomic.AddInt64(&stats.audioPacketsSent, int64(len(participant.Sessions)))
			time.Sleep(20 * time.Millisecond)
		}
		fmt.Println("üé§ –ê–ª–∏—Å–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞ –≥–æ–≤–æ—Ä–∏—Ç—å")
	}()

	time.Sleep(300 * time.Millisecond)

	// –ë–æ–± –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç DTMF
	go func() {
		participant := conference.GetParticipant("bob")
		if participant == nil {
			return
		}

		// –ë–æ–± –Ω–∞–±–∏—Ä–∞–µ—Ç –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞
		dtmfCode := []media.DTMFDigit{media.DTMF1, media.DTMF2, media.DTMF3, media.DTMF4}
		for _, digit := range dtmfCode {
			conference.BroadcastDTMF("bob", digit, 100*time.Millisecond)
			atomic.AddInt64(&stats.dtmfEventsSent, 1)
			time.Sleep(150 * time.Millisecond)
		}
		fmt.Println("‚òéÔ∏è  –ë–æ–± –æ—Ç–ø—Ä–∞–≤–∏–ª DTMF –∫–æ–¥")
	}()

	time.Sleep(1 * time.Second)

	// –ß–∞—Ä–ª–∏ –≥–æ–≤–æ—Ä–∏—Ç
	go func() {
		participant := conference.GetParticipant("charlie")
		if participant == nil {
			return
		}

		audioData := generateTestAudio(160)
		for i := 0; i < 5; i++ {
			conference.BroadcastAudio("charlie", audioData)
			atomic.AddInt64(&stats.audioPacketsSent, int64(len(participant.Sessions)))
			time.Sleep(20 * time.Millisecond)
		}
		fmt.Println("üé§ –ß–∞—Ä–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª –≥–æ–≤–æ—Ä–∏—Ç—å")
	}()

	time.Sleep(500 * time.Millisecond)

	// –®–∞–≥ 5: –î–∏–∞–Ω–∞ –ø–æ–∫–∏–¥–∞–µ—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é
	fmt.Println("\nüëã –î–∏–∞–Ω–∞ –ø–æ–∫–∏–¥–∞–µ—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é...")
	if err := conference.RemoveParticipant("diana"); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞: %v\n", err)
	}

	time.Sleep(500 * time.Millisecond)

	// –®–∞–≥ 6: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	conference.PrintStatistics()

	// –®–∞–≥ 7: –ó–∞–≤–µ—Ä—à–∞–µ–º –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é
	fmt.Println("\nüì¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏...")
	conference.Shutdown()

	fmt.Println("‚úÖ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

	return nil
}

// AddParticipant –¥–æ–±–∞–≤–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é
func (c *Conference) AddParticipant(id, name string) error {
	c.mu.Lock()
	defer c.mu.Unlock()

	if _, exists := c.participants[id]; exists {
		return fmt.Errorf("—É—á–∞—Å—Ç–Ω–∏–∫ %s —É–∂–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏", id)
	}

	c.participants[id] = &Participant{
		ID:       id,
		Name:     name,
		Builders: make(map[string]media_builder.Builder),
		Sessions: make(map[string]media.Session),
	}

	return nil
}

// RemoveParticipant —É–¥–∞–ª—è–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
func (c *Conference) RemoveParticipant(id string) error {
	c.mu.Lock()
	defer c.mu.Unlock()

	participant, exists := c.participants[id]
	if !exists {
		return fmt.Errorf("—É—á–∞—Å—Ç–Ω–∏–∫ %s –Ω–µ –Ω–∞–π–¥–µ–Ω", id)
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
	for peerID, session := range participant.Sessions {
		session.Stop()
		participant.Builders[peerID].Close()
		c.manager.ReleaseBuilder(fmt.Sprintf("%s-%s", id, peerID))

		// –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		if peer, exists := c.participants[peerID]; exists {
			if peerSession, ok := peer.Sessions[id]; ok {
				peerSession.Stop()
			}
			if peerBuilder, ok := peer.Builders[id]; ok {
				peerBuilder.Close()
				c.manager.ReleaseBuilder(fmt.Sprintf("%s-%s", peerID, id))
			}
			delete(peer.Sessions, id)
			delete(peer.Builders, id)
		}
	}

	delete(c.participants, id)
	fmt.Printf("  ‚úÖ %s –ø–æ–∫–∏–Ω—É–ª –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é\n", participant.Name)

	return nil
}

// EstablishFullMesh —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
func (c *Conference) EstablishFullMesh() error {
	c.mu.RLock()
	participantIDs := make([]string, 0, len(c.participants))
	for id := range c.participants {
		participantIDs = append(participantIDs, id)
	}
	c.mu.RUnlock()

	connectionsCreated := 0

	// –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –∫–∞–∂–¥–æ–π –ø–∞—Ä–æ–π —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	for i := 0; i < len(participantIDs); i++ {
		for j := i + 1; j < len(participantIDs); j++ {
			id1, id2 := participantIDs[i], participantIDs[j]

			if err := c.createConnection(id1, id2); err != nil {
				atomic.AddInt64(&c.stats.connectionsFailed, 1)
				fmt.Printf("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å %s –∏ %s: %v\n", id1, id2, err)
			} else {
				atomic.AddInt64(&c.stats.connectionsCreated, 1)
				connectionsCreated++
				fmt.Printf("  ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: %s ‚ÜîÔ∏è %s\n",
					c.participants[id1].Name, c.participants[id2].Name)
			}
		}
	}

	fmt.Printf("\nüìä –°–æ–∑–¥–∞–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %d\n", connectionsCreated)
	return nil
}

// createConnection —Å–æ–∑–¥–∞–µ—Ç –¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–µ–∂–¥—É —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
func (c *Conference) createConnection(id1, id2 string) error {
	// –°–æ–∑–¥–∞–µ–º builder'—ã –¥–ª—è –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
	builder1to2, err := c.manager.CreateBuilder(fmt.Sprintf("%s-%s", id1, id2))
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å builder %s->%s: %w", id1, id2, err)
	}

	builder2to1, err := c.manager.CreateBuilder(fmt.Sprintf("%s-%s", id2, id1))
	if err != nil {
		c.manager.ReleaseBuilder(fmt.Sprintf("%s-%s", id1, id2))
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å builder %s->%s: %w", id2, id1, err)
	}

	// SDP negotiation
	offer, err := builder1to2.CreateOffer()
	if err != nil {
		return err
	}

	if err := builder2to1.ProcessOffer(offer); err != nil {
		return err
	}

	answer, err := builder2to1.CreateAnswer()
	if err != nil {
		return err
	}

	if err := builder1to2.ProcessAnswer(answer); err != nil {
		return err
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º builder'—ã –∏ —Å–µ—Å—Å–∏–∏
	c.mu.Lock()
	c.participants[id1].Builders[id2] = builder1to2
	c.participants[id1].Sessions[id2] = builder1to2.GetMediaSession()
	c.participants[id2].Builders[id1] = builder2to1
	c.participants[id2].Sessions[id1] = builder2to1.GetMediaSession()
	c.mu.Unlock()

	return nil
}

// StartAllSessions –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
func (c *Conference) StartAllSessions() error {
	c.mu.RLock()
	defer c.mu.RUnlock()

	sessionsStarted := 0

	for _, participant := range c.participants {
		for peerID, session := range participant.Sessions {
			if err := session.Start(); err != nil {
				fmt.Printf("  ‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é %s->%s: %v\n",
					participant.ID, peerID, err)
			} else {
				sessionsStarted++
			}
		}
	}

	fmt.Printf("‚úÖ –ó–∞–ø—É—â–µ–Ω–æ —Å–µ—Å—Å–∏–π: %d\n", sessionsStarted)
	return nil
}

// BroadcastAudio –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º
func (c *Conference) BroadcastAudio(senderID string, audioData []byte) {
	c.mu.RLock()
	sender, exists := c.participants[senderID]
	c.mu.RUnlock()

	if !exists {
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
	for peerID, session := range sender.Sessions {
		if err := session.SendAudio(audioData); err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ %s->%s: %v\n", senderID, peerID, err)
		}
	}
}

// BroadcastDTMF –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç DTMF –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º
func (c *Conference) BroadcastDTMF(senderID string, digit media.DTMFDigit, duration time.Duration) {
	c.mu.RLock()
	sender, exists := c.participants[senderID]
	c.mu.RUnlock()

	if !exists {
		return
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DTMF –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
	for peerID, session := range sender.Sessions {
		if err := session.SendDTMF(digit, duration); err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DTMF %s->%s: %v\n", senderID, peerID, err)
		}
	}
}

// GetParticipant –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ ID
func (c *Conference) GetParticipant(id string) *Participant {
	c.mu.RLock()
	defer c.mu.RUnlock()
	return c.participants[id]
}

// PrintStatistics –≤—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
func (c *Conference) PrintStatistics() {
	fmt.Println("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:")
	fmt.Printf("  –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: %d\n", len(c.participants))
	fmt.Printf("  –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: %d\n", atomic.LoadInt64(&c.stats.connectionsCreated))
	fmt.Printf("  –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–µ —É–¥–∞–ª–æ—Å—å: %d\n", atomic.LoadInt64(&c.stats.connectionsFailed))
	fmt.Printf("  –ê—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n", atomic.LoadInt64(&c.stats.audioPacketsSent))
	fmt.Printf("  –ê—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: %d\n", atomic.LoadInt64(&c.stats.audioPacketsReceived))
	fmt.Printf("  DTMF —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n", atomic.LoadInt64(&c.stats.dtmfEventsSent))
	fmt.Printf("  DTMF —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—É—á–µ–Ω–æ: %d\n", atomic.LoadInt64(&c.stats.dtmfEventsReceived))

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
	mgrStats := c.manager.GetStatistics()
	fmt.Printf("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n")
	fmt.Printf("  –ê–∫—Ç–∏–≤–Ω—ã—Ö builder'–æ–≤: %d\n", mgrStats.ActiveBuilders)
	fmt.Printf("  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä—Ç–æ–≤: %d\n", mgrStats.PortsInUse)
	fmt.Printf("  –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Ä—Ç–æ–≤: %d\n", mgrStats.AvailablePorts)

	// –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
	fmt.Println("\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∏ –∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:")
	c.mu.RLock()
	for _, p := range c.participants {
		fmt.Printf("  %s (%s): %d —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π\n", p.Name, p.ID, len(p.Sessions))
	}
	c.mu.RUnlock()
}

// Shutdown –∑–∞–≤–µ—Ä—à–∞–µ—Ç –≤—Å–µ —Å–µ—Å—Å–∏–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
func (c *Conference) Shutdown() {
	c.mu.Lock()
	defer c.mu.Unlock()

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Å—Å–∏–∏
	for _, participant := range c.participants {
		for _, session := range participant.Sessions {
			session.Stop()
		}
		for _, builder := range participant.Builders {
			builder.Close()
		}
	}

	// –û—á–∏—â–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	c.participants = make(map[string]*Participant)
}

// generateTestAudio –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
func generateTestAudio(size int) []byte {
	data := make([]byte, size)
	for i := range data {
		data[i] = 0xFF // Œº-law —Ç–∏—à–∏–Ω–∞
	}
	return data
}

func main() {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏\n")

	if err := ConferenceExample(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞: %v", err)
	}

	fmt.Println("\n‚ú® –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
}
