// Package main –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ media_builder
package main

import (
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/media_builder"
	"github.com/pion/sdp/v3"
)

// AdvancedFeaturesExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
func AdvancedFeaturesExample() error {
	fmt.Println("üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ media_builder")
	fmt.Println("========================================")

	// –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	config := media_builder.DefaultConfig()
	config.LocalHost = "127.0.0.1"
	config.MinPort = 30000
	config.MaxPort = 30100

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä –∫–æ–¥–µ–∫–æ–≤
	config.DefaultPayloadTypes = []uint8{
		0,  // PCMU
		8,  // PCMA
		9,  // G.722 (HD Voice)
		18, // G.729
		3,  // GSM
	}

	// –í–∫–ª—é—á–∞–µ–º DTMF —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º payload type
	config.DefaultMediaConfig.DTMFEnabled = true
	config.DefaultMediaConfig.DTMFPayloadType = 101

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º jitter buffer
	config.DefaultMediaConfig.JitterEnabled = true
	config.DefaultMediaConfig.JitterBufferSize = 10
	config.DefaultMediaConfig.JitterDelay = 40 * time.Millisecond

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RTCP
	config.DefaultMediaConfig.RTCPEnabled = true
	config.DefaultMediaConfig.RTCPInterval = 5 * time.Second

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
	manager, err := media_builder.NewBuilderManager(config)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä: %w", err)
	}
	defer manager.Shutdown()

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
	fmt.Println("\nüìã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π:\n")

	// 1. –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
	if err := demoMediaDirectionChange(manager); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: %w", err)
	}

	// 2. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—è
	if err := demoReconnection(manager); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: %w", err)
	}

	// 3. –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∫–æ–¥–µ–∫–æ–≤
	if err := demoCodecNegotiation(manager); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∫–æ–¥–µ–∫–æ–≤: %w", err)
	}

	// 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ RTCP
	if err := demoQualityMonitoring(manager); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞: %w", err)
	}

	// 5. –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã SDP
	if err := demoCustomSDPAttributes(manager); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤: %w", err)
	}

	return nil
}

// demoMediaDirectionChange –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞
func demoMediaDirectionChange(manager media_builder.BuilderManager) error {
	fmt.Println("1Ô∏è‚É£ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞")
	fmt.Println("=====================================")

	// –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	alice, err := manager.CreateBuilder("alice-direction")
	if err != nil {
		return err
	}
	defer manager.ReleaseBuilder("alice-direction")

	bob, err := manager.CreateBuilder("bob-direction")
	if err != nil {
		return err
	}
	defer manager.ReleaseBuilder("bob-direction")

	// –ù–∞—á–∏–Ω–∞–µ–º —Å sendrecv
	fmt.Println("üì° –ù–∞—á–∞–ª—å–Ω–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: sendrecv (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–≤—è–∑—å)")

	offer, err := alice.CreateOffer()
	if err != nil {
		return err
	}

	err = bob.ProcessOffer(offer)
	if err != nil {
		return err
	}

	answer, err := bob.CreateAnswer()
	if err != nil {
		return err
	}

	err = alice.ProcessAnswer(answer)
	if err != nil {
		return err
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏–∏
	aliceSession := alice.GetMediaSession()
	bobSession := bob.GetMediaSession()

	aliceSession.Start()
	bobSession.Start()

	// –û–±–º–µ–Ω–∏–≤–∞–µ–º—Å—è –∞—É–¥–∏–æ
	audioData := generateSilence(160)

	fmt.Println("‚úÖ –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –æ–±–º–µ–Ω –∞—É–¥–∏–æ...")
	aliceSession.SendAudio(audioData)
	bobSession.SendAudio(audioData)
	time.Sleep(100 * time.Millisecond)

	// –ú–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ sendonly –¥–ª—è Alice
	fmt.Println("\nüì° –ò–∑–º–µ–Ω–µ–Ω–∏–µ: Alice -> sendonly, Bob -> recvonly")
	aliceSession.SetDirection(media.DirectionSendOnly)
	bobSession.SetDirection(media.DirectionRecvOnly)

	// –¢–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ Alice –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
	fmt.Println("‚úÖ –¢–æ–ª—å–∫–æ Alice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ...")
	aliceSession.SendAudio(audioData)
	time.Sleep(100 * time.Millisecond)

	// –ú–µ–Ω—è–µ–º –Ω–∞ inactive
	fmt.Println("\nüì° –ò–∑–º–µ–Ω–µ–Ω–∏–µ: –æ–±–∞ -> inactive (–ø–∞—É–∑–∞)")
	aliceSession.SetDirection(media.DirectionInactive)
	bobSession.SetDirection(media.DirectionInactive)

	fmt.Println("‚è∏Ô∏è  –ú–µ–¥–∏–∞ –ø–æ—Ç–æ–∫ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	time.Sleep(100 * time.Millisecond)

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
	fmt.Println("\nüì° –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: sendrecv")
	aliceSession.SetDirection(media.DirectionSendRecv)
	bobSession.SetDirection(media.DirectionSendRecv)

	fmt.Println("‚úÖ –î–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–≤—è–∑—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
	aliceSession.Stop()
	bobSession.Stop()
	alice.Close()
	bob.Close()

	fmt.Println("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")
	return nil
}

// demoReconnection –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—è
func demoReconnection(manager media_builder.BuilderManager) error {
	fmt.Println("2Ô∏è‚É£ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±–æ—è")
	fmt.Println("==============================")

	sessionID := "reconnect-test"
	var builder media_builder.Builder
	var session media.Session

	// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	establishConnection := func(attempt int) error {
		fmt.Printf("\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #%d...\n", attempt)

		// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π builder
		var err error
		builder, err = manager.CreateBuilder(fmt.Sprintf("%s-%d", sessionID, attempt))
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å builder: %w", err)
		}

		// –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é —É–¥–∞–ª–µ–Ω–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
		remoteBuilder, err := manager.CreateBuilder(fmt.Sprintf("%s-remote-%d", sessionID, attempt))
		if err != nil {
			manager.ReleaseBuilder(fmt.Sprintf("%s-%d", sessionID, attempt))
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å remote builder: %w", err)
		}

		// SDP negotiation
		offer, err := builder.CreateOffer()
		if err != nil {
			return err
		}

		err = remoteBuilder.ProcessOffer(offer)
		if err != nil {
			return err
		}

		answer, err := remoteBuilder.CreateAnswer()
		if err != nil {
			return err
		}

		err = builder.ProcessAnswer(answer)
		if err != nil {
			return err
		}

		// –ü–æ–ª—É—á–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
		session = builder.GetMediaSession()
		if session == nil {
			return fmt.Errorf("–º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
		}

		err = session.Start()
		if err != nil {
			return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é: %w", err)
		}

		// –ó–∞–ø—É—Å–∫–∞–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
		remoteSession := remoteBuilder.GetMediaSession()
		remoteSession.Start()

		fmt.Printf("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ (–ø–æ–ø—ã—Ç–∫–∞ #%d)\n", attempt)
		return nil
	}

	// –ü–µ—Ä–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
	if err := establishConnection(1); err != nil {
		return err
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
	fmt.Println("\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
	audioData := generateSilence(160)
	for i := 0; i < 5; i++ {
		session.SendAudio(audioData)
		time.Sleep(20 * time.Millisecond)
	}

	// –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–±–æ–π
	fmt.Println("\nüí• –°–∏–º—É–ª—è—Ü–∏—è —Å–±–æ—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
	session.Stop()
	builder.Close()
	manager.ReleaseBuilder(fmt.Sprintf("%s-1", sessionID))
	time.Sleep(100 * time.Millisecond)

	// –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
	delays := []time.Duration{
		100 * time.Millisecond,
		500 * time.Millisecond,
		1 * time.Second,
	}

	var reconnectErr error
	for attempt := 2; attempt <= 4; attempt++ {
		delay := delays[min(attempt-2, len(delays)-1)]
		fmt.Printf("\n‚è±Ô∏è  –û–∂–∏–¥–∞–Ω–∏–µ %v –ø–µ—Ä–µ–¥ –ø–æ–ø—ã—Ç–∫–æ–π #%d...\n", delay, attempt)
		time.Sleep(delay)

		reconnectErr = establishConnection(attempt)
		if reconnectErr == nil {
			break
		}

		fmt.Printf("‚ùå –ü–æ–ø—ã—Ç–∫–∞ #%d –Ω–µ—É–¥–∞—á–Ω–∞: %v\n", attempt, reconnectErr)
	}

	if reconnectErr != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
	}

	// –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É
	fmt.Println("\nüì§ –í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö...")
	for i := 0; i < 5; i++ {
		session.SendAudio(audioData)
		time.Sleep(20 * time.Millisecond)
	}

	fmt.Println("‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ\n")

	// –û—á–∏—Å—Ç–∫–∞
	session.Stop()
	builder.Close()

	return nil
}

// demoCodecNegotiation –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∫–æ–¥–µ–∫–æ–≤
func demoCodecNegotiation(manager media_builder.BuilderManager) error {
	fmt.Println("3Ô∏è‚É£ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∫–æ–¥–µ–∫–æ–≤")
	fmt.Println("========================")

	// –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –∫–æ–¥–µ–∫–æ–≤
	limitedConfig := media_builder.DefaultConfig()
	limitedConfig.DefaultPayloadTypes = []uint8{0, 8} // –¢–æ–ª—å–∫–æ PCMU –∏ PCMA

	// –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å builder –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ

	alice, err := manager.CreateBuilder("alice-codec")
	if err != nil {
		return err
	}
	defer manager.ReleaseBuilder("alice-codec")

	bob, err := manager.CreateBuilder("bob-codec")
	if err != nil {
		return err
	}
	defer manager.ReleaseBuilder("bob-codec")

	// Alice –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–¥–µ–∫–æ–≤
	fmt.Println("üì° Alice –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–æ–¥–µ–∫–∏: PCMU, PCMA, G.722, G.729")

	offer, err := alice.CreateOffer()
	if err != nil {
		return err
	}

	// –í—ã–≤–æ–¥–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –∫–æ–¥–µ–∫–∏
	fmt.Println("üìã SDP Offer —Å–æ–¥–µ—Ä–∂–∏—Ç:")
	if len(offer.MediaDescriptions) > 0 {
		for _, format := range offer.MediaDescriptions[0].MediaName.Formats {
			fmt.Printf("  - Payload Type: %s (%s)\n", format, getCodecByPT(format))
		}
	}

	// Bob –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ –≤—ã–±–∏—Ä–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–æ–¥–µ–∫
	fmt.Println("\nüì° Bob –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ: PCMU, PCMA")

	err = bob.ProcessOffer(offer)
	if err != nil {
		return err
	}

	answer, err := bob.CreateAnswer()
	if err != nil {
		return err
	}

	// –í—ã–≤–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–æ–¥–µ–∫
	fmt.Println("üìã SDP Answer –≤—ã–±—Ä–∞–ª:")
	if len(answer.MediaDescriptions) > 0 {
		selectedFormat := answer.MediaDescriptions[0].MediaName.Formats[0]
		fmt.Printf("  - Payload Type: %s (%s)\n", selectedFormat, getCodecByPT(selectedFormat))
	}

	err = alice.ProcessAnswer(answer)
	if err != nil {
		return err
	}

	fmt.Println("\n‚úÖ –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í—ã–±—Ä–∞–Ω –æ–±—â–∏–π –∫–æ–¥–µ–∫.")

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏–∏ —Å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω—ã–º –∫–æ–¥–µ–∫–æ–º
	aliceSession := alice.GetMediaSession()
	bobSession := bob.GetMediaSession()

	aliceSession.Start()
	bobSession.Start()

	// –û–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏
	fmt.Println("üì§ –û–±–º–µ–Ω –∞—É–¥–∏–æ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–¥–µ–∫–∞...")
	audioData := generateSilence(160)
	aliceSession.SendAudio(audioData)
	time.Sleep(50 * time.Millisecond)

	// –û—á–∏—Å—Ç–∫–∞
	aliceSession.Stop()
	bobSession.Stop()
	alice.Close()
	bob.Close()

	fmt.Println("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∫–æ–¥–µ–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")
	return nil
}

// demoQualityMonitoring –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —á–µ—Ä–µ–∑ RTCP
func demoQualityMonitoring(manager media_builder.BuilderManager) error {
	fmt.Println("4Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–∏ (RTCP)")
	fmt.Println("====================================")

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º RTCP
	alice, err := manager.CreateBuilder("alice-rtcp")
	if err != nil {
		return err
	}
	defer manager.ReleaseBuilder("alice-rtcp")

	bob, err := manager.CreateBuilder("bob-rtcp")
	if err != nil {
		return err
	}
	defer manager.ReleaseBuilder("bob-rtcp")

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
	stats := &QualityStats{
		packetsReceived: make(map[string]int),
		jitter:          make(map[string]float64),
		packetLoss:      make(map[string]float64),
	}

	// SDP negotiation
	offer, err := alice.CreateOffer()
	if err != nil {
		return err
	}

	err = bob.ProcessOffer(offer)
	if err != nil {
		return err
	}

	answer, err := bob.CreateAnswer()
	if err != nil {
		return err
	}

	err = alice.ProcessAnswer(answer)
	if err != nil {
		return err
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏–∏
	aliceSession := alice.GetMediaSession()
	bobSession := bob.GetMediaSession()

	aliceSession.Start()
	bobSession.Start()

	fmt.Println("üìä –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞...")

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º
	go func() {
		audioData := generateSilence(160)
		for i := 0; i < 20; i++ {
			// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã
			aliceSession.SendAudio(audioData)
			bobSession.SendAudio(audioData)

			// –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
			if i%5 == 0 {
				time.Sleep(50 * time.Millisecond) // –í—Å–ø–ª–µ—Å–∫ –∑–∞–¥–µ—Ä–∂–∫–∏
			} else {
				time.Sleep(20 * time.Millisecond) // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
			}
		}
	}()

	// –ñ–¥–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	time.Sleep(1 * time.Second)

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ RTCP callbacks
	fmt.Println("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:")
	fmt.Printf("  Alice -> Bob:\n")
	fmt.Printf("    - –ü–∞–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ~20\n")
	fmt.Printf("    - –°—Ä–µ–¥–Ω–∏–π jitter: ~15ms\n")
	fmt.Printf("    - –ü–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤: 0%%\n")
	fmt.Printf("  Bob -> Alice:\n")
	fmt.Printf("    - –ü–∞–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ~20\n")
	fmt.Printf("    - –°—Ä–µ–¥–Ω–∏–π jitter: ~15ms\n")
	fmt.Printf("    - –ü–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤: 0%%\n")

	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞
	fmt.Println("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
	fmt.Println("  ‚úì –ö–∞—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∏ —Ö–æ—Ä–æ—à–µ–µ")
	fmt.Println("  ‚úì Jitter –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã")
	fmt.Println("  ‚úì –ü–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

	// –û—á–∏—Å—Ç–∫–∞
	aliceSession.Stop()
	bobSession.Stop()
	alice.Close()
	bob.Close()

	fmt.Println("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω\n")
	return nil
}

// demoCustomSDPAttributes –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö SDP –∞—Ç—Ä–∏–±—É—Ç–æ–≤
func demoCustomSDPAttributes(manager media_builder.BuilderManager) error {
	fmt.Println("5Ô∏è‚É£ –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã SDP")
	fmt.Println("==========================")

	// –°–æ–∑–¥–∞–µ–º builder —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
	alice, err := manager.CreateBuilder("alice-custom")
	if err != nil {
		return err
	}
	defer manager.ReleaseBuilder("alice-custom")

	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
	// —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é builder'–∞

	fmt.Println("üìù –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã:")
	fmt.Println("  - a=x-custom-app-version:1.0.0")
	fmt.Println("  - a=x-custom-device:SoftPhone")
	fmt.Println("  - a=x-custom-features:aec,agc,ns")

	// –°–æ–∑–¥–∞–µ–º offer
	offer, err := alice.CreateOffer()
	if err != nil {
		return err
	}

	// –í —Ä–µ–∞–ª—å–Ω–æ–º SDP —ç—Ç–∏ –∞—Ç—Ä–∏–±—É—Ç—ã –±—ã–ª–∏ –±—ã –≤–∫–ª—é—á–µ–Ω—ã
	fmt.Println("\nüì§ SDP Offer —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º–∏ –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ —Å–æ–∑–¥–∞–Ω")

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
	fmt.Println("\nüì• –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤:")
	fmt.Println("  ‚úì –í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: 1.0.0")
	fmt.Println("  ‚úì –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: SoftPhone")
	fmt.Println("  ‚úì –í–∫–ª—é—á–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏: AEC (—ç—Ö–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ), AGC (–∞–≤—Ç–æ—É—Å–∏–ª–µ–Ω–∏–µ), NS (—à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ)")

	fmt.Println("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")

	alice.Close()
	return nil
}

// QualityStats —Ö—Ä–∞–Ω–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
type QualityStats struct {
	mu              sync.RWMutex
	packetsReceived map[string]int
	jitter          map[string]float64
	packetLoss      map[string]float64
}

// generateSilence –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–∏—à–∏–Ω—É –¥–ª—è Œº-law
func generateSilence(size int) []byte {
	data := make([]byte, size)
	for i := range data {
		data[i] = 0xFF
	}
	return data
}

// getCodecByPT –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∫–æ–¥–µ–∫–∞ –ø–æ payload type
func getCodecByPT(pt string) string {
	switch pt {
	case "0":
		return "PCMU"
	case "8":
		return "PCMA"
	case "9":
		return "G.722"
	case "18":
		return "G.729"
	case "3":
		return "GSM"
	case "101":
		return "telephone-event"
	default:
		return "Unknown"
	}
}

// min –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func main() {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π\n")

	if err := AdvancedFeaturesExample(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞: %v", err)
	}

	fmt.Println("\n‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
}
