// Package main –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞–º–∏ –≤ media_builder
package main

import (
	"fmt"
	"log"
	"sync"
	"sync/atomic"
	"time"

	"github.com/arzzra/soft_phone/pkg/media_builder"
)

// PortManagementExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–∞–º–∏
func PortManagementExample() error {
	fmt.Println("üîå –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞–º–∏ –≤ media_builder")
	fmt.Println("=====================================")

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏

	// 1. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
	if err := demoSequentialPortAllocation(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º –≤—ã–¥–µ–ª–µ–Ω–∏–∏: %w", err)
	}

	// 2. –°–ª—É—á–∞–π–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
	if err := demoRandomPortAllocation(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –≤—ã–¥–µ–ª–µ–Ω–∏–∏: %w", err)
	}

	// 3. –ò—Å—á–µ—Ä–ø–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
	if err := demoPortExhaustion(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤: %w", err)
	}

	// 4. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
	if err := demoPortMonitoring(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ –ø–æ—Ä—Ç–æ–≤: %w", err)
	}

	// 5. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ—Ä—Ç–æ–≤
	if err := demoPortRangeOptimization(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≤ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–∏–∞–ø–∞–∑–æ–Ω–∞: %w", err)
	}

	return nil
}

// demoSequentialPortAllocation –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
func demoSequentialPortAllocation() error {
	fmt.Println("\n1Ô∏è‚É£ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤")
	fmt.Println("=====================================")

	config := media_builder.DefaultConfig()
	config.MinPort = 40000
	config.MaxPort = 40020 // –ú–∞–ª–µ–Ω—å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	config.PortAllocationStrategy = media_builder.PortAllocationSequential
	config.MaxConcurrentBuilders = 10

	manager, err := media_builder.NewBuilderManager(config)
	if err != nil {
		return err
	}
	defer manager.Shutdown()

	fmt.Printf("üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –¥–æ—Å—Ç—É–ø–Ω–æ %d –ø–æ—Ä—Ç–æ–≤\n", manager.GetAvailablePortsCount())
	fmt.Println("üî¢ –í—ã–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ:")

	// –í—ã–¥–µ–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Ä—Ç–æ–≤
	builders := make([]media_builder.Builder, 0)
	for i := 1; i <= 5; i++ {
		builder, err := manager.CreateBuilder(fmt.Sprintf("seq-%d", i))
		if err != nil {
			fmt.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å builder %d: %v\n", i, err)
			continue
		}
		builders = append(builders, builder)

		// –°–æ–∑–¥–∞–µ–º offer —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ—Ä—Ç
		offer, _ := builder.CreateOffer()
		if len(offer.MediaDescriptions) > 0 {
			port := offer.MediaDescriptions[0].MediaName.Port.Value
			fmt.Printf("  ‚úì Builder %d –ø–æ–ª—É—á–∏–ª –ø–æ—Ä—Ç: %d\n", i, port)
		}
	}

	fmt.Printf("\nüìä –ü–æ—Å–ª–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è: –¥–æ—Å—Ç—É–ø–Ω–æ %d –ø–æ—Ä—Ç–æ–≤\n", manager.GetAvailablePortsCount())

	// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ä–µ–¥–Ω–∏–π –ø–æ—Ä—Ç
	fmt.Println("\n‚ôªÔ∏è  –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º builder 3...")
	manager.ReleaseBuilder("seq-3")
	fmt.Printf("üìä –ü–æ—Å–ª–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è: –¥–æ—Å—Ç—É–ø–Ω–æ %d –ø–æ—Ä—Ç–æ–≤\n", manager.GetAvailablePortsCount())

	// –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—Ç - –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω—ã–π
	fmt.Println("\nüî¢ –í—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—Ç:")
	newBuilder, err := manager.CreateBuilder("seq-new")
	if err == nil {
		offer, _ := newBuilder.CreateOffer()
		if len(offer.MediaDescriptions) > 0 {
			port := offer.MediaDescriptions[0].MediaName.Port.Value
			fmt.Printf("  ‚úì –ù–æ–≤—ã–π builder –ø–æ–ª—É—á–∏–ª –ø–æ—Ä—Ç: %d (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π)\n", port)
		}
		manager.ReleaseBuilder("seq-new")
	}

	// –û—á–∏—Å—Ç–∫–∞
	for i := range builders {
		if i != 2 { // Builder 3 —É–∂–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω
			manager.ReleaseBuilder(fmt.Sprintf("seq-%d", i+1))
		}
	}

	fmt.Println("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

// demoRandomPortAllocation –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ
func demoRandomPortAllocation() error {
	fmt.Println("\n2Ô∏è‚É£ –°–ª—É—á–∞–π–Ω–æ–µ –≤—ã–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤")
	fmt.Println("===============================")

	config := media_builder.DefaultConfig()
	config.MinPort = 50000
	config.MaxPort = 50100
	config.PortAllocationStrategy = media_builder.PortAllocationRandom
	config.MaxConcurrentBuilders = 20

	manager, err := media_builder.NewBuilderManager(config)
	if err != nil {
		return err
	}
	defer manager.Shutdown()

	fmt.Printf("üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –¥–æ—Å—Ç—É–ø–Ω–æ %d –ø–æ—Ä—Ç–æ–≤\n", manager.GetAvailablePortsCount())
	fmt.Println("üé≤ –í—ã–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç—ã —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º:")

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
	portDistribution := make(map[int]int)
	var mu sync.Mutex

	// –í—ã–¥–µ–ª—è–µ–º –ø–æ—Ä—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
	var wg sync.WaitGroup
	for i := 1; i <= 10; i++ {
		wg.Add(1)
		go func(id int) {
			defer wg.Done()

			builder, err := manager.CreateBuilder(fmt.Sprintf("rnd-%d", id))
			if err != nil {
				fmt.Printf("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å builder %d: %v\n", id, err)
				return
			}

			offer, _ := builder.CreateOffer()
			if len(offer.MediaDescriptions) > 0 {
				port := offer.MediaDescriptions[0].MediaName.Port.Value

				mu.Lock()
				portDistribution[port]++
				mu.Unlock()

				fmt.Printf("  ‚úì Builder %d –ø–æ–ª—É—á–∏–ª –ø–æ—Ä—Ç: %d\n", id, port)
			}

			// –î–µ—Ä–∂–∏–º –ø–æ—Ä—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
			time.Sleep(50 * time.Millisecond)

			manager.ReleaseBuilder(fmt.Sprintf("rnd-%d", id))
		}(i)

		time.Sleep(10 * time.Millisecond) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
	}

	wg.Wait()

	fmt.Printf("\nüìä –ü–æ—Å–ª–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è: –¥–æ—Å—Ç—É–ø–Ω–æ %d –ø–æ—Ä—Ç–æ–≤\n", manager.GetAvailablePortsCount())
	fmt.Println("\nüìà –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏—è")

	fmt.Println("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

// demoPortExhaustion –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å—á–µ—Ä–ø–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤
func demoPortExhaustion() error {
	fmt.Println("\n3Ô∏è‚É£ –ò—Å—á–µ—Ä–ø–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ")
	fmt.Println("======================================")

	// –û—á–µ–Ω—å –º–∞–ª–µ–Ω—å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	config := media_builder.DefaultConfig()
	config.MinPort = 60000
	config.MaxPort = 60010 // –¢–æ–ª—å–∫–æ 6 –ø–æ—Ä—Ç–æ–≤ (—É—á–∏—Ç—ã–≤–∞—è —à–∞–≥ 2)
	config.PortAllocationStrategy = media_builder.PortAllocationSequential
	config.MaxConcurrentBuilders = 10

	manager, err := media_builder.NewBuilderManager(config)
	if err != nil {
		return err
	}
	defer manager.Shutdown()

	totalPorts := manager.GetAvailablePortsCount()
	fmt.Printf("üìä –í—Å–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Ä—Ç–æ–≤: %d\n", totalPorts)

	// –í—ã–¥–µ–ª—è–µ–º –≤—Å–µ –ø–æ—Ä—Ç—ã
	fmt.Println("\nüîÑ –í—ã–¥–µ–ª—è–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã:")
	builders := make([]string, 0)

	for i := 1; ; i++ {
		builderID := fmt.Sprintf("exhaust-%d", i)
		builder, err := manager.CreateBuilder(builderID)
		if err != nil {
			fmt.Printf("  ‚ùå Builder %d: –ø–æ—Ä—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã - %v\n", i, err)
			break
		}

		builders = append(builders, builderID)
		fmt.Printf("  ‚úì Builder %d —Å–æ–∑–¥–∞–Ω. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ—Ä—Ç–æ–≤: %d\n", i, manager.GetAvailablePortsCount())
	}

	fmt.Printf("\nüö® –í—Å–µ –ø–æ—Ä—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã! –°–æ–∑–¥–∞–Ω–æ builder'–æ–≤: %d\n", len(builders))

	// –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω
	fmt.Println("\nüîÑ –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω builder:")
	_, err = manager.CreateBuilder("exhaust-extra")
	if err != nil {
		fmt.Printf("  ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: %v\n", err)
	}

	// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –ø–æ—Ä—Ç–æ–≤
	fmt.Println("\n‚ôªÔ∏è  –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ–ª–æ–≤–∏–Ω—É –ø–æ—Ä—Ç–æ–≤:")
	halfCount := len(builders) / 2
	for i := 0; i < halfCount; i++ {
		manager.ReleaseBuilder(builders[i])
		fmt.Printf("  ‚úì –û—Å–≤–æ–±–æ–∂–¥–µ–Ω %s. –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Ä—Ç–æ–≤: %d\n", builders[i], manager.GetAvailablePortsCount())
	}

	// –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ
	fmt.Println("\nüîÑ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ builder'—ã –Ω–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö:")
	for i := 1; i <= halfCount; i++ {
		builderID := fmt.Sprintf("recover-%d", i)
		_, err := manager.CreateBuilder(builderID)
		if err != nil {
			fmt.Printf("  ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å %s: %v\n", builderID, err)
		} else {
			fmt.Printf("  ‚úì –°–æ–∑–¥–∞–Ω %s. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ—Ä—Ç–æ–≤: %d\n", builderID, manager.GetAvailablePortsCount())
		}
	}

	// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ
	fmt.Println("\n‚ôªÔ∏è  –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...")
	activeBuilders := manager.GetActiveBuilders()
	for _, id := range activeBuilders {
		manager.ReleaseBuilder(id)
	}

	fmt.Printf("üìä –ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Ä—Ç–æ–≤: %d\n", manager.GetAvailablePortsCount())

	fmt.Println("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

// demoPortMonitoring –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
func demoPortMonitoring() error {
	fmt.Println("\n4Ô∏è‚É£ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ—Ä—Ç–æ–≤")
	fmt.Println("===================================")

	config := media_builder.DefaultConfig()
	config.MinPort = 70000
	config.MaxPort = 70200
	config.PortAllocationStrategy = media_builder.PortAllocationRandom
	config.MaxConcurrentBuilders = 50
	config.SessionTimeout = 5 * time.Second // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	config.CleanupInterval = 1 * time.Second

	manager, err := media_builder.NewBuilderManager(config)
	if err != nil {
		return err
	}
	defer manager.Shutdown()

	// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	var (
		created  int64
		released int64
		active   int64
	)

	// –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	monitor := func() {
		stats := manager.GetStatistics()
		fmt.Printf("üìä [%s] –ê–∫—Ç–∏–≤–Ω–æ: %d, –°–æ–∑–¥–∞–Ω–æ: %d, –ü–æ—Ä—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: %d, –î–æ—Å—Ç—É–ø–Ω–æ: %d\n",
			time.Now().Format("15:04:05"),
			stats.ActiveBuilders,
			stats.TotalBuildersCreated,
			stats.PortsInUse,
			stats.AvailablePorts)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
	stopMonitor := make(chan bool)
	go func() {
		ticker := time.NewTicker(500 * time.Millisecond)
		defer ticker.Stop()

		for {
			select {
			case <-ticker.C:
				monitor()
			case <-stopMonitor:
				return
			}
		}
	}()

	fmt.Println("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å...")
	fmt.Println()

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
	var wg sync.WaitGroup

	// –í–æ–ª–Ω–∞ 1: –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
	fmt.Println("üìà –í–æ–ª–Ω–∞ 1: –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ builder'–æ–≤")
	for i := 1; i <= 10; i++ {
		wg.Add(1)
		go func(id int) {
			defer wg.Done()

			builderID := fmt.Sprintf("monitor-%d", id)
			_, err := manager.CreateBuilder(builderID)
			if err == nil {
				atomic.AddInt64(&created, 1)
				atomic.AddInt64(&active, 1)
			}
		}(i)
		time.Sleep(50 * time.Millisecond)
	}

	wg.Wait()
	time.Sleep(1 * time.Second)

	// –í–æ–ª–Ω–∞ 2: –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ
	fmt.Println("\nüìâ –í–æ–ª–Ω–∞ 2: –ß–∞—Å—Ç–∏—á–Ω–æ–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ")
	for i := 1; i <= 5; i++ {
		builderID := fmt.Sprintf("monitor-%d", i)
		manager.ReleaseBuilder(builderID)
		atomic.AddInt64(&released, 1)
		atomic.AddInt64(&active, -1)
		time.Sleep(100 * time.Millisecond)
	}

	time.Sleep(1 * time.Second)

	// –í–æ–ª–Ω–∞ 3: –ù–æ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
	fmt.Println("\nüìà –í–æ–ª–Ω–∞ 3: –ù–æ–≤—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
	for i := 11; i <= 15; i++ {
		wg.Add(1)
		go func(id int) {
			defer wg.Done()

			builderID := fmt.Sprintf("monitor-new-%d", id)
			_, err := manager.CreateBuilder(builderID)
			if err == nil {
				atomic.AddInt64(&created, 1)
				atomic.AddInt64(&active, 1)
			}
		}(i)
		time.Sleep(100 * time.Millisecond)
	}

	wg.Wait()
	time.Sleep(2 * time.Second)

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
	close(stopMonitor)

	// –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	fmt.Println("\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
	finalStats := manager.GetStatistics()
	fmt.Printf("  –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ builder'–æ–≤: %d\n", finalStats.TotalBuildersCreated)
	fmt.Printf("  –°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω–æ: %d\n", finalStats.ActiveBuilders)
	fmt.Printf("  –ü–æ—Ä—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: %d\n", finalStats.PortsInUse)
	fmt.Printf("  –ü–æ—Ä—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: %d\n", finalStats.AvailablePorts)
	fmt.Printf("  –°–µ—Å—Å–∏–π –∑–∞–∫—Ä—ã—Ç–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: %d\n", finalStats.SessionTimeouts)

	fmt.Println("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
	return nil
}

// demoPortRangeOptimization –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—é –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ—Ä—Ç–æ–≤
func demoPortRangeOptimization() error {
	fmt.Println("\n5Ô∏è‚É£ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ—Ä—Ç–æ–≤")
	fmt.Println("=================================")

	// –°—Ü–µ–Ω–∞—Ä–∏–π 1: –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
	fmt.Println("\n‚ùå –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤")
	config1 := media_builder.DefaultConfig()
	config1.MinPort = 80000
	config1.MaxPort = 80010            // –¢–æ–ª—å–∫–æ 6 –ø–æ—Ä—Ç–æ–≤
	config1.MaxConcurrentBuilders = 20 // –ù–æ —Ö–æ—Ç–∏–º 20 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π

	_, err := media_builder.NewBuilderManager(config1)
	if err != nil {
		fmt.Printf("  ‚úÖ –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞: %v\n", err)
	}

	// –°—Ü–µ–Ω–∞—Ä–∏–π 2: –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
	fmt.Println("\n‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π 2: –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω")
	config2 := media_builder.DefaultConfig()
	expectedConnections := 100
	config2.MaxConcurrentBuilders = expectedConnections

	// –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
	// –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º MaxConcurrentBuilders * 2 (—Å –∑–∞–ø–∞—Å–æ–º)
	requiredPorts := expectedConnections * 2
	config2.MinPort = 81000
	config2.MaxPort = config2.MinPort + uint16(requiredPorts*2) // *2 –¥–ª—è —à–∞–≥–∞ 2

	manager2, err := media_builder.NewBuilderManager(config2)
	if err != nil {
		return err
	}
	defer manager2.Shutdown()

	fmt.Printf("  üìä –î–ª—è %d —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π:\n", expectedConnections)
	fmt.Printf("     - –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤: %d-%d\n", config2.MinPort, config2.MaxPort)
	fmt.Printf("     - –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Ä—Ç–æ–≤: %d\n", manager2.GetAvailablePortsCount())
	fmt.Printf("     - –ó–∞–ø–∞—Å: %.0f%%\n",
		float64(manager2.GetAvailablePortsCount()-expectedConnections)/float64(expectedConnections)*100)

	// –°—Ü–µ–Ω–∞—Ä–∏–π 3: –£—á–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
	fmt.Println("\nüéØ –°—Ü–µ–Ω–∞—Ä–∏–π 3: –í—ã–±–æ—Ä —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è use case")

	fmt.Println("\n  üìå –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:")
	fmt.Println("     - –ü—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤")
	fmt.Println("     - –û—Ç–ª–∞–¥–∫–∏ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
	fmt.Println("     - –ú–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏")

	fmt.Println("\n  üìå –°–ª—É—á–∞–π–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è:")
	fmt.Println("     - –ü–æ–≤—ã—à–µ–Ω–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
	fmt.Println("     - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º")
	fmt.Println("     - –ò–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–ª–ª–∏–∑–∏–π –ø—Ä–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ")

	// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
	fmt.Println("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
	fmt.Println("  1. –î–∏–∞–ø–∞–∑–æ–Ω = MaxConcurrentBuilders * 2-3 (—Å –∑–∞–ø–∞—Å–æ–º)")
	fmt.Println("  2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–µ—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã (–Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞)")
	fmt.Println("  3. –ò–∑–±–µ–≥–∞–π—Ç–µ well-known –ø–æ—Ä—Ç–æ–≤ (< 1024)")
	fmt.Println("  4. –£—á–∏—Ç—ã–≤–∞–π—Ç–µ firewall –ø—Ä–∞–≤–∏–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏")
	fmt.Println("  5. –î–ª—è production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω 10000-65000")

	fmt.Println("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

func main() {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–∞–º–∏\n")

	if err := PortManagementExample(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞: %v", err)
	}

	fmt.Println("\n‚ú® –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
}
