// Package main –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ media_builder –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞
package main

import (
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/media_builder"
)

// BasicCallExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –∑–≤–æ–Ω–æ–∫ –º–µ–∂–¥—É –¥–≤—É–º—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
// —Å –æ–±–º–µ–Ω–æ–º –∞—É–¥–∏–æ –∏ DTMF —Å–∏–≥–Ω–∞–ª–∞–º–∏
func BasicCallExample() error {
	fmt.Println("üìû –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞ —Å media_builder")
	fmt.Println("==========================================")

	// –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ BuilderManager
	config := media_builder.DefaultConfig()
	config.LocalHost = "127.0.0.1"
	config.MinPort = 10000
	config.MaxPort = 10100
	config.MaxConcurrentBuilders = 10

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–¥–µ–∫–∏
	config.DefaultPayloadTypes = []uint8{
		0,  // PCMU (G.711 Œº-law)
		8,  // PCMA (G.711 A-law)
		9,  // G.722
		18, // G.729
	}

	// –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
	stats := &CallStatistics{}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback'–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Å–æ–±—ã—Ç–∏–π
	config.DefaultMediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration, sessionID string) {
		stats.AudioReceived(sessionID, len(data))
		fmt.Printf("üéµ [%s] –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ: %d –±–∞–π—Ç, codec: %s, ptime: %v\n",
			sessionID, len(data), getCodecName(uint8(pt)), ptime)
	}

	config.DefaultMediaConfig.OnDTMFReceived = func(event media.DTMFEvent, sessionID string) {
		stats.DTMFReceived(sessionID, event.Digit)
		fmt.Printf("‚òéÔ∏è  [%s] –ü–æ–ª—É—á–µ–Ω DTMF: %s (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v)\n",
			sessionID, event.Digit, event.Duration)
	}

	config.DefaultMediaConfig.OnMediaError = func(err error, sessionID string) {
		fmt.Printf("‚ùå [%s] –û—à–∏–±–∫–∞ –º–µ–¥–∏–∞: %v\n", sessionID, err)
	}

	config.DefaultMediaConfig.OnRTCPReport = func(report media.RTCPReport) {
		fmt.Printf("üìä RTCP –æ—Ç—á–µ—Ç –ø–æ–ª—É—á–µ–Ω (—Ç–∏–ø: %d)\n", report.GetType())
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
	manager, err := media_builder.NewBuilderManager(config)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä: %w", err)
	}
	defer func() {
		fmt.Println("\nüîö –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞...")
		if err := manager.Shutdown(); err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏: %v\n", err)
		}
	}()

	fmt.Printf("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω. –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Ä—Ç–æ–≤: %d\n", manager.GetAvailablePortsCount())

	// –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ builder'–æ–≤ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	fmt.Println("\nüì± –°–æ–∑–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∑–≤–æ–Ω–∫–∞...")

	// –°–æ–∑–¥–∞–µ–º caller (–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä –∑–≤–æ–Ω–∫–∞)
	callerBuilder, err := manager.CreateBuilder("caller-001")
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å caller builder: %w", err)
	}
	defer func() {
		if err := manager.ReleaseBuilder("caller-001"); err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ caller builder: %v\n", err)
		}
	}()

	// –°–æ–∑–¥–∞–µ–º callee (–ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è —Å—Ç–æ—Ä–æ–Ω–∞)
	calleeBuilder, err := manager.CreateBuilder("callee-001")
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å callee builder: %w", err)
	}
	defer func() {
		if err := manager.ReleaseBuilder("callee-001"); err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ callee builder: %v\n", err)
		}
	}()

	fmt.Println("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã")

	// –®–∞–≥ 3: SDP negotiation (offer/answer)
	fmt.Println("\nü§ù SDP —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ...")

	// Caller —Å–æ–∑–¥–∞–µ—Ç offer
	offer, err := callerBuilder.CreateOffer()
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å offer: %w", err)
	}
	fmt.Printf("üì§ Caller —Å–æ–∑–¥–∞–ª SDP offer:\n")
	printSDPInfo(offer)

	// Callee –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç offer
	err = calleeBuilder.ProcessOffer(offer)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å offer: %w", err)
	}

	// Callee —Å–æ–∑–¥–∞–µ—Ç answer
	answer, err := calleeBuilder.CreateAnswer()
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å answer: %w", err)
	}
	fmt.Printf("\nüì§ Callee —Å–æ–∑–¥–∞–ª SDP answer:\n")
	printSDPInfo(answer)

	// Caller –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç answer
	err = callerBuilder.ProcessAnswer(answer)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å answer: %w", err)
	}

	fmt.Println("\n‚úÖ SDP —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

	// –®–∞–≥ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
	fmt.Println("\nüé¨ –ó–∞–ø—É—Å–∫ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π...")

	callerSession := callerBuilder.GetMediaSession()
	if callerSession == nil {
		return fmt.Errorf("–º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è caller –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
	}

	calleeSession := calleeBuilder.GetMediaSession()
	if calleeSession == nil {
		return fmt.Errorf("–º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è callee –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏–∏
	if err := callerSession.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å caller —Å–µ—Å—Å–∏—é: %w", err)
	}

	if err := calleeSession.Start(); err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å callee —Å–µ—Å—Å–∏—é: %w", err)
	}

	fmt.Println("‚úÖ –ú–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏ –∑–∞–ø—É—â–µ–Ω—ã")

	// –®–∞–≥ 5: –û–±–º–µ–Ω –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–º–∏
	fmt.Println("\nüéµ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–º–µ–Ω –∞—É–¥–∏–æ...")

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ (20ms —Ç–∏—à–∏–Ω—ã –¥–ª—è G.711 Œº-law)
	audioData := make([]byte, 160) // 8000 Hz * 0.02s = 160 samples
	for i := range audioData {
		audioData[i] = 0xFF // Œº-law —Ç–∏—à–∏–Ω–∞
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –æ—Ç caller –∫ callee
	go func() {
		for i := 0; i < 5; i++ {
			time.Sleep(20 * time.Millisecond)
			if err := callerSession.SendAudio(audioData); err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –æ—Ç caller: %v\n", err)
				return
			}
			fmt.Printf("üì§ Caller –æ—Ç–ø—Ä–∞–≤–∏–ª –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç %d\n", i+1)
		}
	}()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –æ—Ç callee –∫ caller
	go func() {
		time.Sleep(10 * time.Millisecond) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
		for i := 0; i < 5; i++ {
			time.Sleep(20 * time.Millisecond)
			if err := calleeSession.SendAudio(audioData); err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –æ—Ç callee: %v\n", err)
				return
			}
			fmt.Printf("üì§ Callee –æ—Ç–ø—Ä–∞–≤–∏–ª –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç %d\n", i+1)
		}
	}()

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ
	time.Sleep(200 * time.Millisecond)

	// –®–∞–≥ 6: –û—Ç–ø—Ä–∞–≤–∫–∞ DTMF —Å–∏–≥–Ω–∞–ª–æ–≤
	fmt.Println("\n‚òéÔ∏è  –û—Ç–ø—Ä–∞–≤–∫–∞ DTMF —Å–∏–≥–Ω–∞–ª–æ–≤...")

	// Caller –Ω–∞–±–∏—Ä–∞–µ—Ç –Ω–æ–º–µ—Ä
	dtmfSequence := []media.DTMFDigit{
		media.DTMF1, media.DTMF2, media.DTMF3,
		media.DTMF4, media.DTMF5, media.DTMF6,
	}

	for _, digit := range dtmfSequence {
		if err := callerSession.SendDTMF(digit, 100*time.Millisecond); err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DTMF %v: %v\n", digit, err)
		} else {
			fmt.Printf("üì§ Caller –æ—Ç–ø—Ä–∞–≤–∏–ª DTMF: %v\n", digit)
		}
		time.Sleep(50 * time.Millisecond) // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏
	}

	// Callee –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
	time.Sleep(100 * time.Millisecond)
	if err := calleeSession.SendDTMF(media.DTMFPound, 200*time.Millisecond); err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DTMF #: %v\n", err)
	} else {
		fmt.Printf("üì§ Callee –æ—Ç–ø—Ä–∞–≤–∏–ª DTMF: #\n")
	}

	// –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π
	time.Sleep(500 * time.Millisecond)

	// –®–∞–≥ 7: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	fmt.Println("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–∞:")
	stats.Print()

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
	mgrStats := manager.GetStatistics()
	fmt.Printf("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n")
	fmt.Printf("  –ê–∫—Ç–∏–≤–Ω—ã—Ö builder'–æ–≤: %d\n", mgrStats.ActiveBuilders)
	fmt.Printf("  –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ builder'–æ–≤: %d\n", mgrStats.TotalBuildersCreated)
	fmt.Printf("  –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Ä—Ç–æ–≤: %d\n", mgrStats.PortsInUse)
	fmt.Printf("  –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Ä—Ç–æ–≤: %d\n", mgrStats.AvailablePorts)

	// –®–∞–≥ 8: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
	fmt.Println("\nüì¥ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞...")

	if err := callerSession.Stop(); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ caller —Å–µ—Å—Å–∏–∏: %v\n", err)
	}

	if err := calleeSession.Stop(); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ callee —Å–µ—Å—Å–∏–∏: %v\n", err)
	}

	if err := callerBuilder.Close(); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è caller builder: %v\n", err)
	}

	if err := calleeBuilder.Close(); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è callee builder: %v\n", err)
	}

	fmt.Println("‚úÖ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")

	return nil
}

// CallStatistics –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–≤–æ–Ω–∫–∞
type CallStatistics struct {
	mu           sync.Mutex
	audioPackets map[string]int
	audioBytes   map[string]int
	dtmfReceived map[string][]media.DTMFDigit
}

func (s *CallStatistics) AudioReceived(sessionID string, bytes int) {
	s.mu.Lock()
	defer s.mu.Unlock()

	if s.audioPackets == nil {
		s.audioPackets = make(map[string]int)
		s.audioBytes = make(map[string]int)
	}

	s.audioPackets[sessionID]++
	s.audioBytes[sessionID] += bytes
}

func (s *CallStatistics) DTMFReceived(sessionID string, digit media.DTMFDigit) {
	s.mu.Lock()
	defer s.mu.Unlock()

	if s.dtmfReceived == nil {
		s.dtmfReceived = make(map[string][]media.DTMFDigit)
	}

	s.dtmfReceived[sessionID] = append(s.dtmfReceived[sessionID], digit)
}

func (s *CallStatistics) Print() {
	s.mu.Lock()
	defer s.mu.Unlock()

	for sessionID, packets := range s.audioPackets {
		fmt.Printf("  [%s] –ê—É–¥–∏–æ: %d –ø–∞–∫–µ—Ç–æ–≤, %d –±–∞–π—Ç\n",
			sessionID, packets, s.audioBytes[sessionID])
	}

	for sessionID, digits := range s.dtmfReceived {
		fmt.Printf("  [%s] DTMF: %v\n", sessionID, digits)
	}
}

// getCodecName –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è –∫–æ–¥–µ–∫–∞ –ø–æ payload type
func getCodecName(pt uint8) string {
	switch pt {
	case 0:
		return "PCMU"
	case 8:
		return "PCMA"
	case 9:
		return "G.722"
	case 18:
		return "G.729"
	case 3:
		return "GSM"
	default:
		return fmt.Sprintf("PT%d", pt)
	}
}

// printSDPInfo –≤—ã–≤–æ–¥–∏—Ç –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SDP
func printSDPInfo(sdp interface{}) {
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∑–¥–µ—Å—å –±—ã–ª–æ –±—ã —Ä–∞–∑–±–æ—Ä SDP
	fmt.Printf("  - –ú–µ–¥–∏–∞: audio\n")
	fmt.Printf("  - –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: RTP/AVP\n")
	fmt.Printf("  - –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: sendrecv\n")
}

func main() {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –±–∞–∑–æ–≤–æ–≥–æ –∑–≤–æ–Ω–∫–∞")
	fmt.Println()

	if err := BasicCallExample(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞: %v", err)
	}

	fmt.Println("\n‚ú® –ü—Ä–∏–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
}
