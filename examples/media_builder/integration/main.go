// Package main –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é media_builder —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–æ—Ñ—Ç—Ñ–æ–Ω–∞
package main

import (
	"bytes"
	"encoding/binary"
	"fmt"
	"log"
	"math"
	"sync"
	"time"

	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/media_builder"
	"github.com/pion/sdp/v3"
)

// AudioSource –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ –∞—É–¥–∏–æ (–º–∏–∫—Ä–æ—Ñ–æ–Ω, —Ñ–∞–π–ª –∏ —Ç.–¥.)
type AudioSource interface {
	Read() ([]byte, error)
	Close() error
}

// AudioSink –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–∏–µ–º–Ω–∏–∫ –∞—É–¥–∏–æ (–¥–∏–Ω–∞–º–∏–∫, —Ñ–∞–π–ª –∏ —Ç.–¥.)
type AudioSink interface {
	Write(data []byte) error
	Close() error
}

// CallController —É–ø—Ä–∞–≤–ª—è–µ—Ç –∑–≤–æ–Ω–∫–æ–º –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ
type CallController struct {
	manager      media_builder.BuilderManager
	activeCalls  map[string]*Call
	audioSources map[string]AudioSource
	audioSinks   map[string]AudioSink
	mu           sync.RWMutex
}

// Call –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫
type Call struct {
	ID          string
	LocalID     string
	RemoteID    string
	Builder     media_builder.Builder
	Session     media.Session
	AudioSource AudioSource
	AudioSink   AudioSink
	StartTime   time.Time
	EndTime     time.Time
}

// IntegrationExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–æ—Ñ—Ç—Ñ–æ–Ω–∞
func IntegrationExample() error {
	fmt.Println("üîß –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è media_builder —Å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏ —Å–æ—Ñ—Ç—Ñ–æ–Ω–∞")
	fmt.Println("==================================================")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	config := media_builder.DefaultConfig()
	config.LocalHost = "127.0.0.1"
	config.MinPort = 45000
	config.MaxPort = 46000

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
	manager, err := media_builder.NewBuilderManager(config)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä: %w", err)
	}
	defer manager.Shutdown()

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∑–≤–æ–Ω–∫–æ–≤
	controller := &CallController{
		manager:      manager,
		activeCalls:  make(map[string]*Call),
		audioSources: make(map[string]AudioSource),
		audioSinks:   make(map[string]AudioSink),
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏

	// 1. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
	if err := demoAudioSourceIntegration(controller); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: %v\n", err)
	}

	// 2. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∑–∞–ø–∏—Å—å—é –∑–≤–æ–Ω–∫–æ–≤
	if err := demoCallRecording(controller); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ –∑–∞–ø–∏—Å–∏: %v\n", err)
	}

	// 3. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	if err := demoTranscoding(controller); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %v\n", err)
	}

	// 4. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SIP (–ø—Å–µ–≤–¥–æ-–ø—Ä–∏–º–µ—Ä)
	if err := demoSIPIntegration(controller); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ SIP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: %v\n", err)
	}

	// 5. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
	if err := demoMonitoringIntegration(controller); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –¥–µ–º–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: %v\n", err)
	}

	return nil
}

// demoAudioSourceIntegration –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∞—É–¥–∏–æ
func demoAudioSourceIntegration(controller *CallController) error {
	fmt.Println("\n1Ô∏è‚É£ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏")
	fmt.Println("==================================")

	// –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∞—É–¥–∏–æ

	// 1. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–∏–Ω—É—Å–æ–∏–¥—ã (–∏–º–∏—Ç–∞—Ü–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞)
	sineSource := &SineWaveSource{
		frequency:  440.0, // –ù–æ—Ç–∞ –õ—è
		sampleRate: 8000,
		amplitude:  0.3,
	}
	controller.audioSources["sine"] = sineSource

	// 2. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –±–µ–ª–æ–≥–æ —à—É–º–∞ (–∏–º–∏—Ç–∞—Ü–∏—è –ø–æ–º–µ—Ö)
	noiseSource := &WhiteNoiseSource{
		amplitude: 0.1,
	}
	controller.audioSources["noise"] = noiseSource

	// 3. –§–∞–π–ª–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ (–∏–º–∏—Ç–∞—Ü–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è)
	fileSource := &FileAudioSource{
		samples: generateAnnouncement("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–µ–º–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"),
	}
	controller.audioSources["file"] = fileSource

	// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫
	fmt.Println("\nüìû –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏...")

	call, err := controller.CreateCall("demo-audio-sources", "alice", "bob")
	if err != nil {
		return err
	}
	defer controller.EndCall(call.ID)

	// –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
	sources := []struct {
		name     string
		source   string
		duration time.Duration
	}{
		{"–°–∏–Ω—É—Å–æ–∏–¥–∞ 440Hz", "sine", 2 * time.Second},
		{"–ë–µ–ª—ã–π —à—É–º", "noise", 1 * time.Second},
		{"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "file", 3 * time.Second},
	}

	for _, src := range sources {
		fmt.Printf("\nüéµ –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º: %s\n", src.name)
		if err := controller.PlayAudioSource(call.ID, src.source, src.duration); err != nil {
			fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è %s: %v\n", src.name, err)
		}
	}

	fmt.Println("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

// demoCallRecording –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∑–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–æ–≤
func demoCallRecording(controller *CallController) error {
	fmt.Println("\n2Ô∏è‚É£ –ó–∞–ø–∏—Å—å –∑–≤–æ–Ω–∫–æ–≤")
	fmt.Println("==================")

	// –°–æ–∑–¥–∞–µ–º –∑–≤–æ–Ω–æ–∫ —Å –∑–∞–ø–∏—Å—å—é
	fmt.Println("üìû –°–æ–∑–¥–∞–µ–º –∑–≤–æ–Ω–æ–∫ —Å –≤–∫–ª—é—á–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å—å—é...")

	call, err := controller.CreateCall("demo-recording", "alice", "bob")
	if err != nil {
		return err
	}
	defer controller.EndCall(call.ID)

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—ã–≤–∞—é—â–∏–π sink
	recorder := &AudioRecorder{
		buffers: make([][]byte, 0),
	}
	controller.audioSinks["recorder"] = recorder

	// –í–∫–ª—é—á–∞–µ–º –∑–∞–ø–∏—Å—å
	fmt.Println("‚è∫Ô∏è  –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å...")
	call.AudioSink = recorder

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ
	testDuration := 5 * time.Second
	fmt.Printf("üé§ –ó–∞–ø–∏—Å—ã–≤–∞–µ–º %v –∞—É–¥–∏–æ...\n", testDuration)

	// –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä
	go func() {
		ticker := time.NewTicker(20 * time.Millisecond)
		defer ticker.Stop()

		startTime := time.Now()
		for time.Since(startTime) < testDuration {
			select {
			case <-ticker.C:
				// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Ñ—Ä–µ–π–º
				audioData := generateSpeechLikeAudio(160)
				call.Session.SendAudio(audioData)

				// –ó–∞–ø–∏—Å—ã–≤–∞–µ–º
				recorder.Write(audioData)
			}
		}
	}()

	time.Sleep(testDuration)

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
	fmt.Println("\nüìä –ê–Ω–∞–ª–∏–∑ –∑–∞–ø–∏—Å–∏:")
	fmt.Printf("  –ó–∞–ø–∏—Å–∞–Ω–æ —Ñ—Ä–µ–π–º–æ–≤: %d\n", len(recorder.buffers))
	fmt.Printf("  –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %.1f —Å–µ–∫\n", float64(len(recorder.buffers))*0.02)
	fmt.Printf("  –†–∞–∑–º–µ—Ä –∑–∞–ø–∏—Å–∏: %d –±–∞–π—Ç\n", len(recorder.buffers)*160)

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ WAV (–ø—Å–µ–≤–¥–æ-–∫–æ–¥)
	fmt.Println("\nüíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª:")
	fmt.Println("  –§–æ—Ä–º–∞—Ç: WAV")
	fmt.Println("  –ß–∞—Å—Ç–æ—Ç–∞: 8000 Hz")
	fmt.Println("  –ö–∞–Ω–∞–ª—ã: 1 (–º–æ–Ω–æ)")
	fmt.Println("  –ë–∏—Ç–Ω–æ—Å—Ç—å: 16 –±–∏—Ç")
	fmt.Println("  ‚úÖ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: demo_recording.wav")

	fmt.Println("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

// demoTranscoding –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–¥–µ–∫–∞–º–∏
func demoTranscoding(controller *CallController) error {
	fmt.Println("\n3Ô∏è‚É£ –¢—Ä–∞–Ω—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–¥–µ–∫–æ–≤")
	fmt.Println("============================")

	// –°–æ–∑–¥–∞–µ–º –¥–≤–∞ –∑–≤–æ–Ω–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–µ–∫–∞–º–∏
	fmt.Println("üìû –°–æ–∑–¥–∞–µ–º –º–æ—Å—Ç –º–µ–∂–¥—É –¥–≤—É–º—è –∑–≤–æ–Ω–∫–∞–º–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–µ–∫–∞–º–∏...")

	// –ó–≤–æ–Ω–æ–∫ 1: PCMU
	call1, err := controller.CreateCall("transcoding-1", "alice", "bridge")
	if err != nil {
		return err
	}
	defer controller.EndCall(call1.ID)

	// –ó–≤–æ–Ω–æ–∫ 2: PCMA
	call2, err := controller.CreateCall("transcoding-2", "bridge", "bob")
	if err != nil {
		return err
	}
	defer controller.EndCall(call2.ID)

	// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–∫–æ–¥–µ—Ä
	transcoder := &AudioTranscoder{
		fromCodec: "PCMU",
		toCodec:   "PCMA",
	}

	fmt.Println("\nüîÑ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ:")
	fmt.Printf("  –ó–≤–æ–Ω–æ–∫ 1 (Alice): PCMU (G.711 Œº-law)\n")
	fmt.Printf("  –ó–≤–æ–Ω–æ–∫ 2 (Bob): PCMA (G.711 A-law)\n")
	fmt.Printf("  –ú–æ—Å—Ç: PCMU ‚ÜîÔ∏è PCMA\n")

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –æ–±–º–µ–Ω —Å —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
	fmt.Println("\nüìû –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä —á–µ—Ä–µ–∑ —Ç—Ä–∞–Ω—Å–∫–æ–¥–µ—Ä...")

	// Alice –≥–æ–≤–æ—Ä–∏—Ç (PCMU)
	go func() {
		for i := 0; i < 50; i++ {
			audioData := generatePCMU(160)
			call1.Session.SendAudio(audioData)

			// –¢—Ä–∞–Ω—Å–∫–æ–¥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Bob
			transcodedData := transcoder.TranscodePCMUtoPCMA(audioData)
			call2.Session.SendAudio(transcodedData)

			time.Sleep(20 * time.Millisecond)
		}
	}()

	// Bob –æ—Ç–≤–µ—á–∞–µ—Ç (PCMA)
	go func() {
		time.Sleep(500 * time.Millisecond) // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º

		for i := 0; i < 50; i++ {
			audioData := generatePCMA(160)
			call2.Session.SendAudio(audioData)

			// –¢—Ä–∞–Ω—Å–∫–æ–¥–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º Alice
			transcodedData := transcoder.TranscodePCMAtoPCMU(audioData)
			call1.Session.SendAudio(transcodedData)

			time.Sleep(20 * time.Millisecond)
		}
	}()

	time.Sleep(2 * time.Second)

	fmt.Println("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è:")
	fmt.Println("  –¢—Ä–∞–Ω—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ PCMU‚ÜíPCMA: 50 —Ñ—Ä–µ–π–º–æ–≤")
	fmt.Println("  –¢—Ä–∞–Ω—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ PCMA‚ÜíPCMU: 50 —Ñ—Ä–µ–π–º–æ–≤")
	fmt.Println("  –ó–∞–¥–µ—Ä–∂–∫–∞ —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: < 1ms")
	fmt.Println("  –ü–æ—Ç–µ—Ä–∏ –∫–∞—á–µ—Å—Ç–≤–∞: –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ")

	fmt.Println("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω—Å–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

// demoSIPIntegration –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å SIP
func demoSIPIntegration(controller *CallController) error {
	fmt.Println("\n4Ô∏è‚É£ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SIP —Å–∏–≥–Ω–∞–ª–∏–∑–∞—Ü–∏–µ–π")
	fmt.Println("==================================")

	// –ü—Å–µ–≤–¥–æ-SIP —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	fmt.Println("üìû –°–∏–º—É–ª–∏—Ä—É–µ–º SIP –∑–≤–æ–Ω–æ–∫...")

	// 1. SIP INVITE
	fmt.Println("\n‚û°Ô∏è  SIP INVITE –æ—Ç Alice –∫ Bob:")
	fmt.Println("INVITE sip:bob@example.com SIP/2.0")
	fmt.Println("From: <sip:alice@example.com>")
	fmt.Println("To: <sip:bob@example.com>")
	fmt.Println("Call-ID: demo-sip-call-001")

	// –°–æ–∑–¥–∞–µ–º builder –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ INVITE
	builder, err := controller.manager.CreateBuilder("sip-call-001")
	if err != nil {
		return err
	}
	defer controller.manager.ReleaseBuilder("sip-call-001")

	// –ò–∑–≤–ª–µ–∫–∞–µ–º SDP –∏–∑ INVITE (–ø—Å–µ–≤–¥–æ)
	remoteSDP := &sdp.SessionDescription{
		// –ó–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ SIP INVITE
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º offer
	fmt.Println("\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ SDP offer –∏–∑ INVITE...")
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ: builder.ProcessOffer(remoteSDP)

	// –°–æ–∑–¥–∞–µ–º SDP answer
	answer, err := builder.CreateAnswer()
	if err != nil {
		// –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
	}

	// 2. SIP 200 OK
	fmt.Println("\n‚¨ÖÔ∏è  SIP 200 OK –æ—Ç Bob –∫ Alice:")
	fmt.Println("SIP/2.0 200 OK")
	fmt.Println("From: <sip:alice@example.com>")
	fmt.Println("To: <sip:bob@example.com>")
	fmt.Println("Call-ID: demo-sip-call-001")
	fmt.Println("Content-Type: application/sdp")
	fmt.Println("[SDP Answer –≤–∫–ª—é—á–µ–Ω –≤ —Ç–µ–ª–æ]")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—é
	session := builder.GetMediaSession()
	if session != nil {
		session.Start()
		fmt.Println("\n‚úÖ –ú–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ SIP")
	}

	// 3. –û–±–º–µ–Ω –º–µ–¥–∏–∞
	fmt.Println("\nüéµ RTP/RTCP –æ–±–º–µ–Ω –Ω–∞—á–∞–ª—Å—è...")

	// 4. SIP BYE
	time.Sleep(2 * time.Second)
	fmt.Println("\n‚û°Ô∏è  SIP BYE –æ—Ç Alice:")
	fmt.Println("BYE sip:bob@example.com SIP/2.0")
	fmt.Println("From: <sip:alice@example.com>")
	fmt.Println("To: <sip:bob@example.com>")
	fmt.Println("Call-ID: demo-sip-call-001")

	// –ó–∞–≤–µ—Ä—à–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—é
	if session != nil {
		session.Stop()
	}
	builder.Close()

	fmt.Println("\n‚¨ÖÔ∏è  SIP 200 OK –æ—Ç Bob (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ BYE)")
	fmt.Println("\n‚úÖ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —á–µ—Ä–µ–∑ SIP")

	// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
	fmt.Println("\nüîß –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å SIP:")
	fmt.Println("  1. INVITE ‚Üí ProcessOffer() / CreateOffer()")
	fmt.Println("  2. 200 OK ‚Üí ProcessAnswer() / CreateAnswer()")
	fmt.Println("  3. ACK ‚Üí Start() –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏")
	fmt.Println("  4. re-INVITE ‚Üí –ø–µ—Ä–µ—Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
	fmt.Println("  5. BYE ‚Üí Stop() –∏ Close()")
	fmt.Println("  6. CANCEL ‚Üí –æ—Ç–º–µ–Ω–∞ –¥–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è")

	fmt.Println("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è SIP –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

// demoMonitoringIntegration –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
func demoMonitoringIntegration(controller *CallController) error {
	fmt.Println("\n5Ô∏è‚É£ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º")
	fmt.Println("=============================")

	// –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É –º–µ—Ç—Ä–∏–∫
	metrics := &CallMetrics{
		callsTotal:      0,
		callsActive:     0,
		callsFailed:     0,
		audioPackets:    0,
		dtmfEvents:      0,
		avgCallDuration: 0,
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–≤–æ–Ω–∫–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	fmt.Println("üìû –°–æ–∑–¥–∞–µ–º –∑–≤–æ–Ω–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

	var calls []*Call
	for i := 0; i < 3; i++ {
		call, err := controller.CreateCall(
			fmt.Sprintf("monitor-%d", i),
			fmt.Sprintf("user%d", i),
			fmt.Sprintf("user%d", i+1),
		)
		if err != nil {
			metrics.callsFailed++
			continue
		}
		calls = append(calls, call)
		metrics.callsTotal++
		metrics.callsActive++
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫
	fmt.Println("\nüìä –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä –º–µ—Ç—Ä–∏–∫...")

	stopMetrics := make(chan bool)
	go func() {
		ticker := time.NewTicker(1 * time.Second)
		defer ticker.Stop()

		for {
			select {
			case <-ticker.C:
				// –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
				stats := controller.manager.GetStatistics()

				fmt.Printf("\nüìà –ú–µ—Ç—Ä–∏–∫–∏ [%s]:\n", time.Now().Format("15:04:05"))
				fmt.Printf("  –ó–≤–æ–Ω–∫–æ–≤ –≤—Å–µ–≥–æ: %d\n", metrics.callsTotal)
				fmt.Printf("  –ó–≤–æ–Ω–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ: %d\n", metrics.callsActive)
				fmt.Printf("  Builder'–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ: %d\n", stats.ActiveBuilders)
				fmt.Printf("  –ü–æ—Ä—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: %d\n", stats.PortsInUse)
				fmt.Printf("  –ê—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤: %d\n", metrics.audioPackets)

				// –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
				metrics.audioPackets += int64(len(calls) * 50)

			case <-stopMetrics:
				return
			}
		}
	}()

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–æ–≤
	time.Sleep(5 * time.Second)

	// –ó–∞–≤–µ—Ä—à–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–≤–æ–Ω–∫–∏
	fmt.Println("\nüì¥ –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–∫–∏...")
	for i, call := range calls {
		if i%2 == 0 {
			controller.EndCall(call.ID)
			metrics.callsActive--
		}
	}

	time.Sleep(2 * time.Second)
	close(stopMetrics)

	// –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫
	fmt.Println("\nüì§ –≠–∫—Å–ø–æ—Ä—Ç –º–µ—Ç—Ä–∏–∫ –≤ Prometheus —Ñ–æ—Ä–º–∞—Ç–µ:")
	fmt.Println("# HELP softphone_calls_total Total number of calls")
	fmt.Println("# TYPE softphone_calls_total counter")
	fmt.Printf("softphone_calls_total %d\n", metrics.callsTotal)

	fmt.Println("\n# HELP softphone_calls_active Current active calls")
	fmt.Println("# TYPE softphone_calls_active gauge")
	fmt.Printf("softphone_calls_active %d\n", metrics.callsActive)

	fmt.Println("\n# HELP softphone_audio_packets_total Total audio packets")
	fmt.Println("# TYPE softphone_audio_packets_total counter")
	fmt.Printf("softphone_audio_packets_total %d\n", metrics.audioPackets)

	// –ê–ª–µ—Ä—Ç—ã
	fmt.Println("\nüö® –ü—Ä–∏–º–µ—Ä—ã –∞–ª–µ—Ä—Ç–æ–≤:")
	if metrics.callsActive > 100 {
		fmt.Println("  ‚ö†Ô∏è  WARNING: –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ (>100 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤)")
	}
	if float64(metrics.callsFailed)/float64(metrics.callsTotal) > 0.05 {
		fmt.Println("  ‚ùå CRITICAL: –í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ (>5%)")
	}

	// –î–∞—à–±–æ—Ä–¥
	fmt.Println("\nüìä Grafana Dashboard:")
	fmt.Println("  - –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤")
	fmt.Println("  - –°–∫–æ—Ä–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–æ–≤")
	fmt.Println("  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤")
	fmt.Println("  - –ö–∞—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∏ (jitter, packet loss)")
	fmt.Println("  - –¢–æ–ø –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∑–≤–æ–Ω–∫–æ–≤")

	fmt.Println("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

// === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∏ –º–µ—Ç–æ–¥—ã ===

// CallController –º–µ—Ç–æ–¥—ã
func (c *CallController) CreateCall(id, localID, remoteID string) (*Call, error) {
	c.mu.Lock()
	defer c.mu.Unlock()

	builder, err := c.manager.CreateBuilder(id)
	if err != nil {
		return nil, err
	}

	// –°–æ–∑–¥–∞–µ–º offer
	offer, err := builder.CreateOffer()
	if err != nil {
		c.manager.ReleaseBuilder(id)
		return nil, err
	}

	// –î–ª—è –¥–µ–º–æ —Å–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç–Ω—É—é —Å—Ç–æ—Ä–æ–Ω—É
	remoteBuilder, err := c.manager.CreateBuilder(id + "-remote")
	if err != nil {
		c.manager.ReleaseBuilder(id)
		return nil, err
	}

	// SDP negotiation
	remoteBuilder.ProcessOffer(offer)
	answer, _ := remoteBuilder.CreateAnswer()
	builder.ProcessAnswer(answer)

	// –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é
	session := builder.GetMediaSession()
	if session == nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—é")
	}

	session.Start()
	remoteBuilder.GetMediaSession().Start()

	call := &Call{
		ID:        id,
		LocalID:   localID,
		RemoteID:  remoteID,
		Builder:   builder,
		Session:   session,
		StartTime: time.Now(),
	}

	c.activeCalls[id] = call
	return call, nil
}

func (c *CallController) EndCall(id string) error {
	c.mu.Lock()
	defer c.mu.Unlock()

	call, exists := c.activeCalls[id]
	if !exists {
		return fmt.Errorf("–∑–≤–æ–Ω–æ–∫ %s –Ω–µ –Ω–∞–π–¥–µ–Ω", id)
	}

	call.EndTime = time.Now()
	call.Session.Stop()
	call.Builder.Close()
	c.manager.ReleaseBuilder(id)
	c.manager.ReleaseBuilder(id + "-remote")

	delete(c.activeCalls, id)
	return nil
}

func (c *CallController) PlayAudioSource(callID, sourceID string, duration time.Duration) error {
	call, exists := c.activeCalls[callID]
	if !exists {
		return fmt.Errorf("–∑–≤–æ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	source, exists := c.audioSources[sourceID]
	if !exists {
		return fmt.Errorf("–∏—Å—Ç–æ—á–Ω–∏–∫ –∞—É–¥–∏–æ –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	// –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
	ticker := time.NewTicker(20 * time.Millisecond)
	defer ticker.Stop()

	startTime := time.Now()
	for time.Since(startTime) < duration {
		select {
		case <-ticker.C:
			audioData, err := source.Read()
			if err != nil {
				return err
			}
			call.Session.SendAudio(audioData)
		}
	}

	return nil
}

// –ê—É–¥–∏–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
type SineWaveSource struct {
	frequency  float64
	sampleRate float64
	amplitude  float64
	phase      float64
}

func (s *SineWaveSource) Read() ([]byte, error) {
	samples := 160 // 20ms at 8kHz
	data := make([]byte, samples)

	for i := 0; i < samples; i++ {
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—É—Å–æ–∏–¥—É
		value := s.amplitude * math.Sin(2*math.Pi*s.frequency*s.phase/s.sampleRate)
		s.phase++

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Œº-law
		data[i] = linearToUlaw(int16(value * 32767))
	}

	return data, nil
}

func (s *SineWaveSource) Close() error {
	return nil
}

type WhiteNoiseSource struct {
	amplitude float64
}

func (w *WhiteNoiseSource) Read() ([]byte, error) {
	samples := 160
	data := make([]byte, samples)

	for i := 0; i < samples; i++ {
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —à—É–º
		value := (rand.Float64()*2 - 1) * w.amplitude
		data[i] = linearToUlaw(int16(value * 32767))
	}

	return data, nil
}

func (w *WhiteNoiseSource) Close() error {
	return nil
}

type FileAudioSource struct {
	samples  []byte
	position int
}

func (f *FileAudioSource) Read() ([]byte, error) {
	if f.position >= len(f.samples) {
		f.position = 0 // –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º
	}

	size := 160
	if f.position+size > len(f.samples) {
		size = len(f.samples) - f.position
	}

	data := make([]byte, size)
	copy(data, f.samples[f.position:f.position+size])
	f.position += size

	// –î–æ–ø–æ–ª–Ω—è–µ–º —Ç–∏—à–∏–Ω–æ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	for i := size; i < 160; i++ {
		data = append(data, 0xFF)
	}

	return data, nil
}

func (f *FileAudioSource) Close() error {
	return nil
}

// –ê—É–¥–∏–æ –∑–∞–ø–∏—Å—ã–≤–∞—Ç–µ–ª—å
type AudioRecorder struct {
	buffers [][]byte
	mu      sync.Mutex
}

func (r *AudioRecorder) Write(data []byte) error {
	r.mu.Lock()
	defer r.mu.Unlock()

	buffer := make([]byte, len(data))
	copy(buffer, data)
	r.buffers = append(r.buffers, buffer)

	return nil
}

func (r *AudioRecorder) Close() error {
	return nil
}

// –¢—Ä–∞–Ω—Å–∫–æ–¥–µ—Ä
type AudioTranscoder struct {
	fromCodec string
	toCodec   string
}

func (t *AudioTranscoder) TranscodePCMUtoPCMA(data []byte) []byte {
	result := make([]byte, len(data))
	for i, sample := range data {
		// –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ Œº-law –≤ A-law
		linear := ulawToLinear(sample)
		result[i] = linearToAlaw(linear)
	}
	return result
}

func (t *AudioTranscoder) TranscodePCMAtoPCMU(data []byte) []byte {
	result := make([]byte, len(data))
	for i, sample := range data {
		// –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ A-law –≤ Œº-law
		linear := alawToLinear(sample)
		result[i] = linearToUlaw(linear)
	}
	return result
}

// –ú–µ—Ç—Ä–∏–∫–∏
type CallMetrics struct {
	callsTotal      int64
	callsActive     int64
	callsFailed     int64
	audioPackets    int64
	dtmfEvents      int64
	avgCallDuration float64
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
func generateSpeechLikeAudio(size int) []byte {
	data := make([]byte, size)
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞ —Ä–µ—á—å (—Å–º–µ—Å—å —á–∞—Å—Ç–æ—Ç)
	for i := 0; i < size; i++ {
		value := 0.0
		// –û—Å–Ω–æ–≤–Ω–æ–π —Ç–æ–Ω
		value += 0.3 * math.Sin(2*math.Pi*300*float64(i)/8000)
		// –ì–∞—Ä–º–æ–Ω–∏–∫–∏
		value += 0.2 * math.Sin(2*math.Pi*600*float64(i)/8000)
		value += 0.1 * math.Sin(2*math.Pi*900*float64(i)/8000)
		// –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–º–Ω–æ–≥–æ —à—É–º–∞
		value += 0.05 * (rand.Float64()*2 - 1)

		data[i] = linearToUlaw(int16(value * 32767))
	}
	return data
}

func generatePCMU(size int) []byte {
	data := make([]byte, size)
	for i := range data {
		data[i] = 0xFF // Œº-law silence
	}
	return data
}

func generatePCMA(size int) []byte {
	data := make([]byte, size)
	for i := range data {
		data[i] = 0xD5 // A-law silence
	}
	return data
}

func generateAnnouncement(text string) []byte {
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã TTS
	// –î–ª—è –¥–µ–º–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–ª–∏–Ω—É
	duration := 3 * time.Second
	samples := int(duration.Seconds() * 8000)
	data := make([]byte, samples)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–æ–Ω
	for i := 0; i < samples; i++ {
		// –ú–æ–¥—É–ª–∏—Ä—É–µ–º –∞–º–ø–ª–∏—Ç—É–¥—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ—á–∏
		envelope := 0.5 + 0.5*math.Sin(2*math.Pi*3*float64(i)/8000)
		value := envelope * 0.3 * math.Sin(2*math.Pi*440*float64(i)/8000)
		data[i] = linearToUlaw(int16(value * 32767))
	}

	return data
}

// Œº-law –∏ A-law –∫–æ–Ω–≤–µ—Ä—Å–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è)
func linearToUlaw(sample int16) byte {
	// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ
	if sample < 0 {
		return byte(0x80 | linearToUlaw(-sample))
	}
	if sample < 32 {
		return byte(0x00 | sample)
	}
	return 0x7F
}

func ulawToLinear(ulaw byte) int16 {
	// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ
	return int16((int(ulaw) - 128) * 256)
}

func linearToAlaw(sample int16) byte {
	// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ
	if sample < 0 {
		return byte(0x80 | linearToAlaw(-sample))
	}
	if sample < 64 {
		return byte(0x00 | sample)
	}
	return 0x7F
}

func alawToLinear(alaw byte) int16 {
	// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–º–æ
	return int16((int(alaw) - 128) * 256)
}

// rand helper
var rand = struct {
	Float64 func() float64
	Intn    func(n int) int
}{
	Float64: func() float64 {
		return float64(time.Now().UnixNano()%1000) / 1000
	},
	Intn: func(n int) int {
		return int(time.Now().UnixNano()) % n
	},
}

func main() {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n")

	if err := IntegrationExample(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞: %v", err)
	}

	fmt.Println("\n‚ú® –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!")
}
