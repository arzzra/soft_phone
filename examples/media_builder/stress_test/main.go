// Package main –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ media_builder
package main

import (
	"fmt"
	"log"
	"math/rand"
	"runtime"
	"sync"
	"sync/atomic"
	"time"

	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/media_builder"
)

// StressTestStats —Å–æ–±–∏—Ä–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
type StressTestStats struct {
	buildersCreated    int64
	buildersFailed     int64
	connectionsCreated int64
	connectionsFailed  int64
	audioPacketsSent   int64
	audioPacketsRecv   int64
	dtmfEventsSent     int64
	dtmfEventsRecv     int64
	errors             int64
	startTime          time.Time
	endTime            time.Time
}

// StressTestExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ–¥ –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
func StressTestExample() error {
	fmt.Println("üî• –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ media_builder")
	fmt.Println("=========================================")

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞
	config := media_builder.DefaultConfig()
	config.LocalHost = "127.0.0.1"
	config.MinPort = 35000
	config.MaxPort = 40000 // –ë–æ–ª—å—à–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	config.MaxConcurrentBuilders = 500
	config.PortAllocationStrategy = media_builder.PortAllocationRandom

	// –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –≤—ã—Å–æ–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏
	config.SessionTimeout = 30 * time.Second
	config.CleanupInterval = 5 * time.Second
	config.DefaultTransportBufferSize = 2048

	// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
	config.DefaultMediaConfig.JitterEnabled = false // –û—Ç–∫–ª—é—á–∞–µ–º jitter buffer –¥–ª—è —Ç–µ—Å—Ç–∞

	stats := &StressTestStats{
		startTime: time.Now(),
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callbacks —Å–æ —Å—á–µ—Ç—á–∏–∫–∞–º–∏
	config.DefaultMediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration, sessionID string) {
		atomic.AddInt64(&stats.audioPacketsRecv, 1)
	}

	config.DefaultMediaConfig.OnDTMFReceived = func(event media.DTMFEvent, sessionID string) {
		atomic.AddInt64(&stats.dtmfEventsRecv, 1)
	}

	config.DefaultMediaConfig.OnMediaError = func(err error, sessionID string) {
		atomic.AddInt64(&stats.errors, 1)
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
	manager, err := media_builder.NewBuilderManager(config)
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä: %w", err)
	}
	defer manager.Shutdown()

	fmt.Printf("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω. –î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Ä—Ç–æ–≤: %d\n", manager.GetAvailablePortsCount())
	fmt.Printf("üñ•Ô∏è  CPU: %d —è–¥–µ—Ä\n\n", runtime.NumCPU())

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç—ã

	// 1. –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	if err := stressMassiveConnections(manager, stats); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –º–∞—Å—Å–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %v\n", err)
	}

	// 2. DTMF —à—Ç–æ—Ä–º
	if err := stressDTMFStorm(manager, stats); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ DTMF —à—Ç–æ—Ä–º–µ: %v\n", err)
	}

	// 3. –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ
	if err := stressRapidChurn(manager, stats); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ –±—ã—Å—Ç—Ä—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π: %v\n", err)
	}

	// 4. –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
	if err := stressParallelLoad(manager, stats); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ: %v\n", err)
	}

	// 5. –î–æ–ª–≥–æ–∏–≥—Ä–∞—é—â–∏–π —Ç–µ—Å—Ç
	if err := stressLongRunning(manager, stats); err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –¥–æ–ª–≥–æ–∏–≥—Ä–∞—é—â–µ–º —Ç–µ—Å—Ç–µ: %v\n", err)
	}

	stats.endTime = time.Now()

	// –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	printFinalStats(stats, manager)

	return nil
}

// stressMassiveConnections —Å–æ–∑–¥–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
func stressMassiveConnections(manager media_builder.BuilderManager, stats *StressTestStats) error {
	fmt.Println("1Ô∏è‚É£ –¢–µ—Å—Ç: –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
	fmt.Println("======================================")

	targetConnections := 100
	fmt.Printf("üéØ –¶–µ–ª—å: —Å–æ–∑–¥–∞—Ç—å %d –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π\n", targetConnections)

	var wg sync.WaitGroup
	connChan := make(chan bool, targetConnections)

	startTime := time.Now()

	// –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
	for i := 0; i < targetConnections; i++ {
		wg.Add(1)
		go func(id int) {
			defer wg.Done()

			// –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É builder'–æ–≤
			builder1ID := fmt.Sprintf("massive-a-%d", id)
			builder2ID := fmt.Sprintf("massive-b-%d", id)

			builder1, err := manager.CreateBuilder(builder1ID)
			if err != nil {
				atomic.AddInt64(&stats.buildersFailed, 1)
				connChan <- false
				return
			}
			atomic.AddInt64(&stats.buildersCreated, 1)

			builder2, err := manager.CreateBuilder(builder2ID)
			if err != nil {
				atomic.AddInt64(&stats.buildersFailed, 1)
				manager.ReleaseBuilder(builder1ID)
				connChan <- false
				return
			}
			atomic.AddInt64(&stats.buildersCreated, 1)

			// SDP negotiation
			offer, err := builder1.CreateOffer()
			if err != nil {
				atomic.AddInt64(&stats.connectionsFailed, 1)
				connChan <- false
				return
			}

			err = builder2.ProcessOffer(offer)
			if err != nil {
				atomic.AddInt64(&stats.connectionsFailed, 1)
				connChan <- false
				return
			}

			answer, err := builder2.CreateAnswer()
			if err != nil {
				atomic.AddInt64(&stats.connectionsFailed, 1)
				connChan <- false
				return
			}

			err = builder1.ProcessAnswer(answer)
			if err != nil {
				atomic.AddInt64(&stats.connectionsFailed, 1)
				connChan <- false
				return
			}

			// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏–∏
			session1 := builder1.GetMediaSession()
			session2 := builder2.GetMediaSession()

			if session1 != nil && session2 != nil {
				session1.Start()
				session2.Start()
				atomic.AddInt64(&stats.connectionsCreated, 1)
				connChan <- true
			} else {
				connChan <- false
			}
		}(i)

		// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É
		if i%10 == 0 {
			time.Sleep(10 * time.Millisecond)
		}
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	go func() {
		wg.Wait()
		close(connChan)
	}()

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	successful := 0
	for success := range connChan {
		if success {
			successful++
		}
	}

	elapsed := time.Since(startTime)

	fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n")
	fmt.Printf("  ‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: %d/%d (%.1f%%)\n",
		successful, targetConnections, float64(successful)/float64(targetConnections)*100)
	fmt.Printf("  ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %v\n", elapsed)
	fmt.Printf("  üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: %.1f —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π/—Å–µ–∫\n", float64(successful)/elapsed.Seconds())

	// –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
	fmt.Println("\n‚è≥ –î–µ—Ä–∂–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è 5 —Å–µ–∫—É–Ω–¥...")
	time.Sleep(5 * time.Second)

	// –û—á–∏—â–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	fmt.Println("üßπ –û—á–∏—Å—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
	activeBuilders := manager.GetActiveBuilders()
	for _, id := range activeBuilders {
		if len(id) > 7 && id[:7] == "massive" {
			manager.ReleaseBuilder(id)
		}
	}

	fmt.Println("‚úÖ –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω\n")
	return nil
}

// stressDTMFStorm –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã–π –ø–æ—Ç–æ–∫ DTMF
func stressDTMFStorm(manager media_builder.BuilderManager, stats *StressTestStats) error {
	fmt.Println("2Ô∏è‚É£ –¢–µ—Å—Ç: DTMF —à—Ç–æ—Ä–º")
	fmt.Println("====================")

	// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è DTMF
	numPairs := 10
	pairs := make([][2]media.Session, 0, numPairs)

	fmt.Printf("üéØ –°–æ–∑–¥–∞–µ–º %d –ø–∞—Ä –¥–ª—è DTMF –æ–±–º–µ–Ω–∞\n", numPairs)

	for i := 0; i < numPairs; i++ {
		builder1, err := manager.CreateBuilder(fmt.Sprintf("dtmf-a-%d", i))
		if err != nil {
			continue
		}

		builder2, err := manager.CreateBuilder(fmt.Sprintf("dtmf-b-%d", i))
		if err != nil {
			manager.ReleaseBuilder(fmt.Sprintf("dtmf-a-%d", i))
			continue
		}

		// –ë—ã—Å—Ç—Ä–æ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
		offer, _ := builder1.CreateOffer()
		builder2.ProcessOffer(offer)
		answer, _ := builder2.CreateAnswer()
		builder1.ProcessAnswer(answer)

		session1 := builder1.GetMediaSession()
		session2 := builder2.GetMediaSession()

		if session1 != nil && session2 != nil {
			session1.Start()
			session2.Start()
			pairs = append(pairs, [2]media.Session{session1, session2})
		}
	}

	fmt.Printf("‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–∞—Ä: %d\n", len(pairs))

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º DTMF —à—Ç–æ—Ä–º
	fmt.Println("\n‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º DTMF —à—Ç–æ—Ä–º...")

	dtmfDigits := []media.DTMFDigit{
		media.DTMF0, media.DTMF1, media.DTMF2, media.DTMF3, media.DTMF4,
		media.DTMF5, media.DTMF6, media.DTMF7, media.DTMF8, media.DTMF9,
		media.DTMFStar, media.DTMFPound,
	}

	var wg sync.WaitGroup
	stormDuration := 3 * time.Second
	stopTime := time.Now().Add(stormDuration)

	// –ö–∞–∂–¥–∞—è –ø–∞—Ä–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç DTMF –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
	for idx, pair := range pairs {
		wg.Add(2)

		// –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ A -> B
		go func(session media.Session, pairIdx int) {
			defer wg.Done()

			for time.Now().Before(stopTime) {
				digit := dtmfDigits[rand.Intn(len(dtmfDigits))]
				err := session.SendDTMF(digit, 50*time.Millisecond)
				if err == nil {
					atomic.AddInt64(&stats.dtmfEventsSent, 1)
				}
				time.Sleep(time.Duration(50+rand.Intn(50)) * time.Millisecond)
			}
		}(pair[0], idx)

		// –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ B -> A
		go func(session media.Session, pairIdx int) {
			defer wg.Done()

			for time.Now().Before(stopTime) {
				digit := dtmfDigits[rand.Intn(len(dtmfDigits))]
				err := session.SendDTMF(digit, 50*time.Millisecond)
				if err == nil {
					atomic.AddInt64(&stats.dtmfEventsSent, 1)
				}
				time.Sleep(time.Duration(50+rand.Intn(50)) * time.Millisecond)
			}
		}(pair[1], idx)
	}

	wg.Wait()

	fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã DTMF —à—Ç–æ—Ä–º–∞:\n")
	fmt.Printf("  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ DTMF: %d\n", atomic.LoadInt64(&stats.dtmfEventsSent))
	fmt.Printf("  üì• –ü–æ–ª—É—á–µ–Ω–æ DTMF: %d\n", atomic.LoadInt64(&stats.dtmfEventsRecv))
	fmt.Printf("  ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: %.1f DTMF/—Å–µ–∫\n",
		float64(atomic.LoadInt64(&stats.dtmfEventsSent))/stormDuration.Seconds())

	// –û—á–∏—Å—Ç–∫–∞
	for i := 0; i < numPairs*2; i++ {
		manager.ReleaseBuilder(fmt.Sprintf("dtmf-a-%d", i))
		manager.ReleaseBuilder(fmt.Sprintf("dtmf-b-%d", i))
	}

	fmt.Println("\n‚úÖ DTMF —à—Ç–æ—Ä–º –∑–∞–≤–µ—Ä—à–µ–Ω\n")
	return nil
}

// stressRapidChurn –±—ã—Å—Ç—Ä–æ —Å–æ–∑–¥–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
func stressRapidChurn(manager media_builder.BuilderManager, stats *StressTestStats) error {
	fmt.Println("3Ô∏è‚É£ –¢–µ—Å—Ç: –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ")
	fmt.Println("===================================")

	duration := 5 * time.Second
	fmt.Printf("üéØ –¶–µ–ª—å: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞ %v\n", duration)

	var (
		created int64
		deleted int64
	)

	stopTime := time.Now().Add(duration)
	var wg sync.WaitGroup

	// –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ—Ä–∫–µ—Ä–æ–≤
	numWorkers := runtime.NumCPU()
	fmt.Printf("üîß –ó–∞–ø—É—Å–∫–∞–µ–º %d –≤–æ—Ä–∫–µ—Ä–æ–≤\n", numWorkers)

	for w := 0; w < numWorkers; w++ {
		wg.Add(1)
		go func(workerID int) {
			defer wg.Done()

			counter := 0
			for time.Now().Before(stopTime) {
				builderID := fmt.Sprintf("churn-%d-%d", workerID, counter)
				counter++

				// –°–æ–∑–¥–∞–µ–º
				builder, err := manager.CreateBuilder(builderID)
				if err != nil {
					continue
				}
				atomic.AddInt64(&created, 1)

				// –°–æ–∑–¥–∞–µ–º offer (–º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞)
				builder.CreateOffer()

				// –ù–µ–±–æ–ª—å—à–∞—è —Å–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
				time.Sleep(time.Duration(rand.Intn(10)) * time.Millisecond)

				// –£–¥–∞–ª—è–µ–º
				manager.ReleaseBuilder(builderID)
				atomic.AddInt64(&deleted, 1)
			}
		}(w)
	}

	// –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
	go func() {
		ticker := time.NewTicker(1 * time.Second)
		defer ticker.Stop()

		for {
			select {
			case <-ticker.C:
				if time.Now().After(stopTime) {
					return
				}
				fmt.Printf("  üìä –°–æ–∑–¥–∞–Ω–æ: %d, –£–¥–∞–ª–µ–Ω–æ: %d\n",
					atomic.LoadInt64(&created), atomic.LoadInt64(&deleted))
			}
		}
	}()

	wg.Wait()

	fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n")
	fmt.Printf("  ‚úÖ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: %d\n", created)
	fmt.Printf("  ‚úÖ –í—Å–µ–≥–æ —É–¥–∞–ª–µ–Ω–æ: %d\n", deleted)
	fmt.Printf("  üöÄ –°–∫–æ—Ä–æ—Å—Ç—å: %.1f –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫\n", float64(created+deleted)/duration.Seconds())

	fmt.Println("\n‚úÖ –¢–µ—Å—Ç –±—ã—Å—Ç—Ä—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω\n")
	return nil
}

// stressParallelLoad —Å–æ–∑–¥–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É
func stressParallelLoad(manager media_builder.BuilderManager, stats *StressTestStats) error {
	fmt.Println("4Ô∏è‚É£ –¢–µ—Å—Ç: –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞")
	fmt.Println("================================")

	// –†–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –Ω–∞–≥—Ä—É–∑–∫–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
	fmt.Println("üéØ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–º–µ—à–∞–Ω–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É:")
	fmt.Println("  - –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
	fmt.Println("  - –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ")
	fmt.Println("  - –û—Ç–ø—Ä–∞–≤–∫–∞ DTMF")
	fmt.Println("  - –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")

	duration := 10 * time.Second
	stopTime := time.Now().Add(duration)

	// –ö–∞–Ω–∞–ª –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
	type ActiveSession struct {
		id       string
		session1 media.Session
		session2 media.Session
	}

	activeSessions := make(chan *ActiveSession, 100)
	var wg sync.WaitGroup

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ 1: –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	wg.Add(1)
	go func() {
		defer wg.Done()
		counter := 0

		for time.Now().Before(stopTime) {
			id := fmt.Sprintf("parallel-%d", counter)
			counter++

			builder1, err := manager.CreateBuilder(id + "-a")
			if err != nil {
				time.Sleep(100 * time.Millisecond)
				continue
			}

			builder2, err := manager.CreateBuilder(id + "-b")
			if err != nil {
				manager.ReleaseBuilder(id + "-a")
				time.Sleep(100 * time.Millisecond)
				continue
			}

			// –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
			offer, _ := builder1.CreateOffer()
			builder2.ProcessOffer(offer)
			answer, _ := builder2.CreateAnswer()
			builder1.ProcessAnswer(answer)

			session1 := builder1.GetMediaSession()
			session2 := builder2.GetMediaSession()

			if session1 != nil && session2 != nil {
				session1.Start()
				session2.Start()

				select {
				case activeSessions <- &ActiveSession{id: id, session1: session1, session2: session2}:
					atomic.AddInt64(&stats.connectionsCreated, 1)
				default:
					// –ö–∞–Ω–∞–ª –ø–æ–ª–æ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
				}
			}

			time.Sleep(50 * time.Millisecond)
		}
	}()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ 2: –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ
	wg.Add(1)
	go func() {
		defer wg.Done()
		audioData := make([]byte, 160)
		for i := range audioData {
			audioData[i] = 0xFF
		}

		for time.Now().Before(stopTime) {
			select {
			case session := <-activeSessions:
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ
				go func(s *ActiveSession) {
					for i := 0; i < 10; i++ {
						s.session1.SendAudio(audioData)
						s.session2.SendAudio(audioData)
						atomic.AddInt64(&stats.audioPacketsSent, 2)
						time.Sleep(20 * time.Millisecond)
					}
					// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
					select {
					case activeSessions <- s:
					default:
					}
				}(session)
			default:
				time.Sleep(10 * time.Millisecond)
			}
		}
	}()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ DTMF
	wg.Add(1)
	go func() {
		defer wg.Done()
		digits := []media.DTMFDigit{media.DTMF1, media.DTMF2, media.DTMF3}

		for time.Now().Before(stopTime) {
			select {
			case session := <-activeSessions:
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DTMF
				go func(s *ActiveSession) {
					for _, digit := range digits {
						s.session1.SendDTMF(digit, 100*time.Millisecond)
						atomic.AddInt64(&stats.dtmfEventsSent, 1)
						time.Sleep(150 * time.Millisecond)
					}
					// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
					select {
					case activeSessions <- s:
					default:
					}
				}(session)
			default:
				time.Sleep(50 * time.Millisecond)
			}
		}
	}()

	// –ì–æ—Ä—É—Ç–∏–Ω–∞ 4: –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
	wg.Add(1)
	go func() {
		defer wg.Done()

		for time.Now().Before(stopTime) {
			select {
			case session := <-activeSessions:
				// –£–¥–∞–ª—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
				session.session1.Stop()
				session.session2.Stop()
				manager.ReleaseBuilder(session.id + "-a")
				manager.ReleaseBuilder(session.id + "-b")
			default:
				time.Sleep(100 * time.Millisecond)
			}
		}
	}()

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	wg.Wait()
	close(activeSessions)

	// –û—á–∏—â–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ—Å—Å–∏–∏
	for session := range activeSessions {
		session.session1.Stop()
		session.session2.Stop()
		manager.ReleaseBuilder(session.id + "-a")
		manager.ReleaseBuilder(session.id + "-b")
	}

	fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏:\n")
	fmt.Printf("  üîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω–æ: %d\n", atomic.LoadInt64(&stats.connectionsCreated))
	fmt.Printf("  üéµ –ê—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n", atomic.LoadInt64(&stats.audioPacketsSent))
	fmt.Printf("  ‚òéÔ∏è  DTMF —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n", atomic.LoadInt64(&stats.dtmfEventsSent))

	fmt.Println("\n‚úÖ –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")
	return nil
}

// stressLongRunning —Å–æ–∑–¥–∞–µ—Ç –¥–æ–ª–≥–æ–∏–≥—Ä–∞—é—â—É—é –Ω–∞–≥—Ä—É–∑–∫—É
func stressLongRunning(manager media_builder.BuilderManager, stats *StressTestStats) error {
	fmt.Println("5Ô∏è‚É£ –¢–µ—Å—Ç: –î–æ–ª–≥–æ–∏–≥—Ä–∞—é—â–∞—è —Å–µ—Å—Å–∏—è")
	fmt.Println("===============================")

	fmt.Println("üéØ –°–æ–∑–¥–∞–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—É—é —Å–µ—Å—Å–∏—é –Ω–∞ 15 —Å–µ–∫—É–Ω–¥")

	// –°–æ–∑–¥–∞–µ–º –æ–¥–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	builder1, err := manager.CreateBuilder("long-alice")
	if err != nil {
		return err
	}
	defer manager.ReleaseBuilder("long-alice")

	builder2, err := manager.CreateBuilder("long-bob")
	if err != nil {
		return err
	}
	defer manager.ReleaseBuilder("long-bob")

	// –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	offer, _ := builder1.CreateOffer()
	builder2.ProcessOffer(offer)
	answer, _ := builder2.CreateAnswer()
	builder1.ProcessAnswer(answer)

	session1 := builder1.GetMediaSession()
	session2 := builder2.GetMediaSession()

	session1.Start()
	session2.Start()

	fmt.Println("‚úÖ –°–µ—Å—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö
	stopTime := time.Now().Add(15 * time.Second)
	audioData := make([]byte, 160)
	for i := range audioData {
		audioData[i] = 0xFF
	}

	var (
		audioSent int64
		dtmfSent  int64
	)

	// –ê—É–¥–∏–æ –ø–æ—Ç–æ–∫
	go func() {
		ticker := time.NewTicker(20 * time.Millisecond)
		defer ticker.Stop()

		for {
			select {
			case <-ticker.C:
				if time.Now().After(stopTime) {
					return
				}
				session1.SendAudio(audioData)
				session2.SendAudio(audioData)
				atomic.AddInt64(&audioSent, 2)
			}
		}
	}()

	// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ DTMF
	go func() {
		ticker := time.NewTicker(1 * time.Second)
		defer ticker.Stop()

		digits := []media.DTMFDigit{media.DTMF1, media.DTMF2, media.DTMF3}
		digitIdx := 0

		for {
			select {
			case <-ticker.C:
				if time.Now().After(stopTime) {
					return
				}
				digit := digits[digitIdx%len(digits)]
				session1.SendDTMF(digit, 200*time.Millisecond)
				atomic.AddInt64(&dtmfSent, 1)
				digitIdx++
			}
		}
	}()

	// –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
	monitorTicker := time.NewTicker(3 * time.Second)
	defer monitorTicker.Stop()

	for time.Now().Before(stopTime) {
		select {
		case <-monitorTicker.C:
			fmt.Printf("  üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: –∞—É–¥–∏–æ=%d –ø–∞–∫–µ—Ç–æ–≤, DTMF=%d —Å–æ–±—ã—Ç–∏–π\n",
				atomic.LoadInt64(&audioSent), atomic.LoadInt64(&dtmfSent))
		}
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
	session1.Stop()
	session2.Stop()

	fmt.Printf("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–≥–æ–∏–≥—Ä–∞—é—â–µ–π —Å–µ—Å—Å–∏–∏:\n")
	fmt.Printf("  üéµ –ê—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤: %d\n", audioSent)
	fmt.Printf("  ‚òéÔ∏è  DTMF —Å–æ–±—ã—Ç–∏–π: %d\n", dtmfSent)
	fmt.Printf("  ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 15 —Å–µ–∫—É–Ω–¥\n")
	fmt.Printf("  ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: 100%%\n")

	fmt.Println("\n‚úÖ –î–æ–ª–≥–æ–∏–≥—Ä–∞—é—â–∏–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω\n")
	return nil
}

// printFinalStats –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func printFinalStats(stats *StressTestStats, manager media_builder.BuilderManager) {
	duration := stats.endTime.Sub(stats.startTime)

	fmt.Println("\n" + strings.Repeat("=", 50))
	fmt.Println("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ù–ê–ì–†–£–ó–û–ß–ù–û–ì–û –¢–ï–°–¢–ê")
	fmt.Println(strings.Repeat("=", 50))

	fmt.Printf("\n‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: %v\n", duration)

	fmt.Println("\nüèóÔ∏è  Builder'—ã:")
	fmt.Printf("  –°–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ: %d\n", stats.buildersCreated)
	fmt.Printf("  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å: %d\n", stats.buildersFailed)

	fmt.Println("\nüîó –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è:")
	fmt.Printf("  –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: %d\n", stats.connectionsCreated)
	fmt.Printf("  –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: %d\n", stats.connectionsFailed)

	fmt.Println("\nüì¶ –ú–µ–¥–∏–∞ —Ç—Ä–∞—Ñ–∏–∫:")
	fmt.Printf("  –ê—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n", stats.audioPacketsSent)
	fmt.Printf("  –ê—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: %d\n", stats.audioPacketsRecv)
	fmt.Printf("  DTMF —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n", stats.dtmfEventsSent)
	fmt.Printf("  DTMF —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—É—á–µ–Ω–æ: %d\n", stats.dtmfEventsRecv)

	fmt.Println("\n‚ùå –û—à–∏–±–∫–∏:")
	fmt.Printf("  –ú–µ–¥–∏–∞ –æ—à–∏–±–æ–∫: %d\n", stats.errors)

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
	mgrStats := manager.GetStatistics()
	fmt.Println("\nüìà –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:")
	fmt.Printf("  –ê–∫—Ç–∏–≤–Ω—ã—Ö builder'–æ–≤ —Å–µ–π—á–∞—Å: %d\n", mgrStats.ActiveBuilders)
	fmt.Printf("  –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ builder'–æ–≤: %d\n", mgrStats.TotalBuildersCreated)
	fmt.Printf("  –ü–æ—Ä—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: %d\n", mgrStats.PortsInUse)
	fmt.Printf("  –ü–æ—Ä—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: %d\n", mgrStats.AvailablePorts)
	fmt.Printf("  –°–µ—Å—Å–∏–π –∑–∞–∫—Ä—ã—Ç–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É: %d\n", mgrStats.SessionTimeouts)

	// –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	fmt.Println("\n‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:")
	fmt.Printf("  Builder'–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: %.1f\n", float64(stats.buildersCreated)/duration.Seconds())
	fmt.Printf("  –°–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: %.1f\n", float64(stats.connectionsCreated)/duration.Seconds())
	fmt.Printf("  –ê—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É: %.1f\n", float64(stats.audioPacketsSent)/duration.Seconds())
	fmt.Printf("  DTMF —Å–æ–±—ã—Ç–∏–π –≤ —Å–µ–∫—É–Ω–¥—É: %.1f\n", float64(stats.dtmfEventsSent)/duration.Seconds())

	// –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
	fmt.Println("\nüéØ –û—Ü–µ–Ω–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
	successRate := float64(stats.connectionsCreated) / float64(stats.connectionsCreated+stats.connectionsFailed) * 100
	if successRate > 95 {
		fmt.Printf("  ‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: %.1f%% —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π\n", successRate)
	} else if successRate > 80 {
		fmt.Printf("  ‚ö†Ô∏è  –•–æ—Ä–æ—à–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: %.1f%% —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π\n", successRate)
	} else {
		fmt.Printf("  ‚ùå –ù–∏–∑–∫–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: %.1f%% —É—Å–ø–µ—à–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π\n", successRate)
	}

	if stats.errors == 0 {
		fmt.Println("  ‚úÖ –ù–µ—Ç –º–µ–¥–∏–∞ –æ—à–∏–±–æ–∫")
	} else {
		fmt.Printf("  ‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ %d –º–µ–¥–∏–∞ –æ—à–∏–±–æ–∫\n", stats.errors)
	}

	fmt.Println("\n" + strings.Repeat("=", 50))
}

// strings.Repeat helper
func strings_Repeat(s string, count int) string {
	result := ""
	for i := 0; i < count; i++ {
		result += s
	}
	return result
}

var strings = struct{ Repeat func(string, int) string }{Repeat: strings_Repeat}

func main() {
	fmt.Println("üöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n")

	if err := StressTestExample(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞: %v", err)
	}

	fmt.Println("\n‚ú® –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
}
