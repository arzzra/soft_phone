package main

import (
	"fmt"
	"log"
	"strings"

	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/media_with_sdp"
)

func main() {
	fmt.Println("üß™ –ü—Ä–æ—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç media_with_sdp")
	fmt.Println(strings.Repeat("=", 50))

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
	config := media_with_sdp.DefaultMediaSessionWithSDPManagerConfig()
	config.LocalIP = "127.0.0.1"
	config.PortRange = media_with_sdp.PortRange{Min: 12000, Max: 12100}
	config.MaxSessions = 5

	// –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
	config.BaseMediaSessionConfig = media.DefaultMediaSessionConfig()
	config.BaseMediaSessionConfig.Direction = media.DirectionSendRecv
	config.BaseMediaSessionConfig.PayloadType = media.PayloadTypePCMU

	manager, err := media_with_sdp.NewMediaSessionWithSDPManager(config)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: %v", err)
	}
	defer manager.StopAll()

	fmt.Printf("‚úÖ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ–∑–¥–∞–Ω\n")

	// –°–æ–∑–¥–∞–µ–º caller —Å–µ—Å—Å–∏—é
	callerConfig := media_with_sdp.SessionWithSDPConfig{
		MediaSessionConfig: media.DefaultMediaSessionConfig(),
		LocalIP:            "127.0.0.1",
		SessionName:        "Caller Session",
	}
	callerConfig.MediaSessionConfig.SessionID = "caller-001"

	caller, err := manager.CreateSessionWithConfig("caller-001", callerConfig)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è caller: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º callee —Å–µ—Å—Å–∏—é
	calleeConfig := media_with_sdp.SessionWithSDPConfig{
		MediaSessionConfig: media.DefaultMediaSessionConfig(),
		LocalIP:            "127.0.0.1",
		SessionName:        "Callee Session",
	}
	calleeConfig.MediaSessionConfig.SessionID = "callee-002"

	callee, err := manager.CreateSessionWithConfig("callee-002", calleeConfig)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è callee: %v", err)
	}

	fmt.Printf("‚úÖ –°–æ–∑–¥–∞–Ω—ã —Å–µ—Å—Å–∏–∏: caller-001, callee-002\n")

	// –≠—Ç–∞–ø 1: Caller —Å–æ–∑–¥–∞–µ—Ç offer
	fmt.Println("\nüì§ Caller —Å–æ–∑–¥–∞–µ—Ç SDP offer...")
	offer, err := caller.CreateOffer()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer: %v", err)
	}

	offerBytes, err := offer.Marshal()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ offer: %v", err)
	}

	fmt.Printf("‚úÖ SDP Offer —Å–æ–∑–¥–∞–Ω (%d –±–∞–π—Ç)\n", len(offerBytes))
	fmt.Printf("üìã –ú–µ–¥–∏–∞ –æ–ø–∏—Å–∞–Ω–∏–π: %d\n", len(offer.MediaDescriptions))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± offer
	if len(offer.MediaDescriptions) > 0 {
		media := offer.MediaDescriptions[0]
		fmt.Printf("üìä –ü–µ—Ä–≤–æ–µ –º–µ–¥–∏–∞: %s, –ø–æ—Ä—Ç: %d, —Ñ–æ—Ä–º–∞—Ç—ã: %v\n",
			media.MediaName.Media, media.MediaName.Port.Value, media.MediaName.Formats)
	}

	// –≠—Ç–∞–ø 2: Callee –ø–æ–ª—É—á–∞–µ—Ç offer –∏ —Å–æ–∑–¥–∞–µ—Ç answer
	fmt.Println("\nüì• Callee –ø–æ–ª—É—á–∞–µ—Ç offer –∏ —Å–æ–∑–¥–∞–µ—Ç answer...")

	err = callee.SetRemoteDescription(offer)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ remote offer: %v", err)
	}

	answer, err := callee.CreateAnswer(offer)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è answer: %v", err)
	}

	answerBytes, err := answer.Marshal()
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –º–∞—Ä—à–∞–ª–∏–Ω–≥–∞ answer: %v", err)
	}

	fmt.Printf("‚úÖ SDP Answer —Å–æ–∑–¥–∞–Ω (%d –±–∞–π—Ç)\n", len(answerBytes))

	// –≠—Ç–∞–ø 3: Caller –ø–æ–ª—É—á–∞–µ—Ç answer
	fmt.Println("\nüì• Caller –ø–æ–ª—É—á–∞–µ—Ç answer...")

	err = caller.SetRemoteDescription(answer)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ remote answer: %v", err)
	}

	fmt.Printf("ü§ù SDP –ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
	fmt.Printf("üìä –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤:\n")
	fmt.Printf("   Caller: %s\n", caller.GetNegotiationState())
	fmt.Printf("   Callee: %s\n", callee.GetNegotiationState())

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã
	callerRTP, callerRTCP, _ := caller.GetAllocatedPorts()
	calleeRTP, calleeRTCP, _ := callee.GetAllocatedPorts()

	fmt.Printf("üîå –í—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –ø–æ—Ä—Ç—ã:\n")
	fmt.Printf("   Caller: RTP=%d, RTCP=%d\n", callerRTP, callerRTCP)
	fmt.Printf("   Callee: RTP=%d, RTCP=%d\n", calleeRTP, calleeRTCP)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–Ω–µ–¥–∂–µ—Ä–∞
	stats := manager.GetManagerStatistics()
	fmt.Printf("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n")
	fmt.Printf("   –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: %d\n", stats.TotalSessions)
	fmt.Printf("   –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: %d\n", stats.ActiveSessions)
	fmt.Printf("   –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ—Ä—Ç–æ–≤: %d\n", stats.UsedPorts)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–º–µ–Ω –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–º–∏
	fmt.Println("\nüéµ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–º–µ–Ω –∞—É–¥–∏–æ...")

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏–∏
	err = caller.Start()
	if err != nil {
		fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ caller: %v\n", err)
	} else {
		fmt.Printf("‚úÖ Caller –∑–∞–ø—É—â–µ–Ω\n")
	}

	err = callee.Start()
	if err != nil {
		fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ callee: %v\n", err)
	} else {
		fmt.Printf("‚úÖ Callee –∑–∞–ø—É—â–µ–Ω\n")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
	testAudio := make([]byte, 160) // 20ms –¥–ª—è PCMU 8kHz
	for i := range testAudio {
		testAudio[i] = byte(i % 256)
	}

	err = caller.SendAudioRaw(testAudio)
	if err != nil {
		fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –æ—Ç caller: %v\n", err)
	} else {
		fmt.Printf("üì§ Caller –æ—Ç–ø—Ä–∞–≤–∏–ª %d –±–∞–π—Ç –∞—É–¥–∏–æ\n", len(testAudio))
	}

	err = callee.SendAudioRaw(testAudio)
	if err != nil {
		fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –æ—Ç callee: %v\n", err)
	} else {
		fmt.Printf("üì§ Callee –æ—Ç–ø—Ä–∞–≤–∏–ª %d –±–∞–π—Ç –∞—É–¥–∏–æ\n", len(testAudio))
	}

	fmt.Println("\nüéâ –ü—Ä–æ—Å—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}
