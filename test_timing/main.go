package main

import (
	"fmt"
	"log"
	"time"

	"github.com/arzzra/soft_phone/pkg/media"
)

func main() {
	fmt.Println("üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ RTP Timing")
	fmt.Println("=====================================")

	// –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	config := media.DefaultMediaSessionConfig()
	config.SessionID = "timing-test"
	config.Direction = media.DirectionSendRecv
	config.Ptime = time.Millisecond * 20 // 20ms –ø–∞–∫–µ—Ç—ã

	session, err := media.NewMediaSession(config)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏: %v", err)
	}
	defer session.Stop()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
	if err := session.Start(); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏: %v", err)
	}

	fmt.Printf("‚úÖ –ú–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞\n")
	fmt.Printf("üìä Ptime: %v\n", session.GetPtime())
	fmt.Printf("üéµ Payload Type: %s\n", session.GetPayloadType())

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä–µ
	fmt.Println("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –±—É—Ñ–µ—Ä–µ:")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ—Ä—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö —á–∞—â–µ —á–µ–º ptime
	for i := 0; i < 10; i++ {
		smallData := generateTestAudio(32) // –ú–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ—Ä—Ü–∏–∏ 32 –±–∞–π—Ç–∞

		// –ò—Å–ø–æ–ª—å–∑—É–µ–º SendAudioRaw –¥–ª—è –æ–±—Ö–æ–¥–∞ –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
		err := session.SendAudioWithFormat(smallData, media.PayloadTypePCMU, true)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Ä—Ü–∏–∏ %d: %v\n", i+1, err)
			continue
		}

		bufferSize := session.GetBufferedAudioSize()
		timeSinceLastSend := session.GetTimeSinceLastSend()

		fmt.Printf("üì¶ –ü–æ—Ä—Ü–∏—è %d: +%d –±–∞–π—Ç ‚Üí –±—É—Ñ–µ—Ä %d –±–∞–π—Ç, —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ %v\n",
			i+1, len(smallData), bufferSize, timeSinceLastSend.Truncate(time.Millisecond))

		time.Sleep(time.Millisecond * 5) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 5ms (—á–∞—â–µ —á–µ–º ptime 20ms)
	}

	// –ñ–¥–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	fmt.Println("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
	time.Sleep(time.Millisecond * 50)

	finalBufferSize := session.GetBufferedAudioSize()
	timeSinceLastSend := session.GetTimeSinceLastSend()

	fmt.Printf("üìà –ò—Ç–æ–≥: –±—É—Ñ–µ—Ä %d –±–∞–π—Ç, —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ %v\n",
		finalBufferSize, timeSinceLastSend.Truncate(time.Millisecond))

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	stats := session.GetStatistics()
	fmt.Printf("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
	fmt.Printf("   üì§ –ê—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n", stats.AudioPacketsSent)
	fmt.Printf("   üì¶ –ê—É–¥–∏–æ –±–∞–π—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n", stats.AudioBytesSent)
	fmt.Printf("   üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %v\n", stats.LastActivity.Format("15:04:05.000"))

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –æ—á–∏—Å—Ç–∫—É –±—É—Ñ–µ—Ä–∞
	if finalBufferSize > 0 {
		fmt.Println("\nüîß –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞...")
		err := session.FlushAudioBuffer()
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±—É—Ñ–µ—Ä–∞: %v\n", err)
		} else {
			finalBufferSize = session.GetBufferedAudioSize()
			fmt.Printf("‚úÖ –ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω, –æ—Å—Ç–∞–ª–æ—Å—å: %d –±–∞–π—Ç\n", finalBufferSize)
		}
	}

	fmt.Println("\n‚úÖ –¢–µ—Å—Ç RTP timing –∑–∞–≤–µ—Ä—à–µ–Ω!")
}

// generateTestAudio –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
func generateTestAudio(samples int) []byte {
	data := make([]byte, samples)
	for i := range data {
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–∏–Ω—É—Å–æ–∏–¥—É (G.711 Œº-law —Å–∏–º—É–ª—è—Ü–∏—è)
		data[i] = byte(128 + 64*(i%32)/16)
	}
	return data
}
