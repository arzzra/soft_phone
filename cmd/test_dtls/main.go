package main

import (
	"crypto/rand"
	"crypto/rsa"
	"crypto/tls"
	"crypto/x509"
	"crypto/x509/pkix"
	"encoding/pem"
	"fmt"
	"log"
	"math/big"
	"net"
	"time"

	"github.com/arzzra/soft_phone/pkg/rtp"
	rtplib "github.com/pion/rtp"
)

func main() {
	fmt.Println("=== –¢–µ—Å—Ç DTLS Transport ===")

	// –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ DTLS —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
	if err := testDTLSBasic(); err != nil {
		log.Fatalf("–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è: %v", err)
	}

	fmt.Println("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
}

// generateCertificate –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è DTLS
func generateCertificate() (tls.Certificate, error) {
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
	privKey, err := rsa.GenerateKey(rand.Reader, 2048)
	if err != nil {
		return tls.Certificate{}, fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º —à–∞–±–ª–æ–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
	template := x509.Certificate{
		SerialNumber: big.NewInt(1),
		Subject: pkix.Name{
			Organization:  []string{"Test DTLS"},
			Country:       []string{"RU"},
			Province:      []string{""},
			Locality:      []string{"Moscow"},
			StreetAddress: []string{""},
			PostalCode:    []string{""},
		},
		NotBefore:             time.Now(),
		NotAfter:              time.Now().Add(24 * time.Hour),
		KeyUsage:              x509.KeyUsageKeyEncipherment | x509.KeyUsageDigitalSignature,
		ExtKeyUsage:           []x509.ExtKeyUsage{x509.ExtKeyUsageServerAuth, x509.ExtKeyUsageClientAuth},
		BasicConstraintsValid: true,
		IPAddresses:           []net.IP{net.IPv4(127, 0, 0, 1), net.IPv6loopback},
	}

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
	certDER, err := x509.CreateCertificate(rand.Reader, &template, &template, &privKey.PublicKey, privKey)
	if err != nil {
		return tls.Certificate{}, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: %w", err)
	}

	// –ö–æ–¥–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏ –∫–ª—é—á –≤ PEM
	certPEM := pem.EncodeToMemory(&pem.Block{Type: "CERTIFICATE", Bytes: certDER})
	keyPEM := pem.EncodeToMemory(&pem.Block{Type: "RSA PRIVATE KEY", Bytes: x509.MarshalPKCS1PrivateKey(privKey)})

	// –°–æ–∑–¥–∞–µ–º tls.Certificate
	cert, err := tls.X509KeyPair(certPEM, keyPEM)
	if err != nil {
		return tls.Certificate{}, fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã –∫–ª—é—á–µ–π: %w", err)
	}

	return cert, nil
}

func testDTLSBasic() error {
	fmt.Println("\n--- –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ DTLS ---")

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã –¥–ª—è DTLS
	fmt.Println("üîê –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã...")
	cert, err := generateCertificate()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: %w", err)
	}
	fmt.Println("‚úì –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã")

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ DTLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	serverConfig := rtp.DefaultDTLSTransportConfig()
	serverConfig.LocalAddr = "127.0.0.1:0" // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–µ—Ä–µ–º –ø–æ—Ä—Ç
	serverConfig.Certificates = []tls.Certificate{cert}
	serverConfig.InsecureSkipVerify = true // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!

	// –°–æ–∑–¥–∞–µ–º DTLS —Å–µ—Ä–≤–µ—Ä
	server, err := rtp.NewDTLSTransportServer(serverConfig)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DTLS —Å–µ—Ä–≤–µ—Ä–∞: %w", err)
	}
	defer server.Close()

	fmt.Printf("‚úì DTLS —Å–µ—Ä–≤–µ—Ä —Å–æ–∑–¥–∞–Ω –Ω–∞ –∞–¥—Ä–µ—Å–µ %s\n", server.LocalAddr())

	// –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ TCP —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞ handshake
	fmt.Println("\n--- –¢–µ—Å—Ç DTLS handshake —á–µ—Ä–µ–∑ TCP ---")
	if err := testDTLSHandshakeTCP(cert); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ DTLS handshake: %w", err)
	}

	// –ó–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º UDP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º RTP)
	fmt.Println("\n--- –¢–µ—Å—Ç DTLS —á–µ—Ä–µ–∑ UDP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç ---")

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
	clientConfig := rtp.DefaultDTLSTransportConfig()
	clientConfig.LocalAddr = "127.0.0.1:0"
	clientConfig.RemoteAddr = "127.0.0.1:5555" // –§–∏–∫—Ç–∏–≤–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	clientConfig.Certificates = []tls.Certificate{cert}
	clientConfig.InsecureSkipVerify = true // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!

	// –°–æ–∑–¥–∞–µ–º DTLS —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è)
	dtlsTransport, err := rtp.NewDTLSTransport(clientConfig)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DTLS —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: %w", err)
	}
	defer dtlsTransport.Close()

	fmt.Printf("‚úì DTLS —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ %s\n", dtlsTransport.LocalAddr())
	fmt.Printf("  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: —É–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å %s\n", clientConfig.RemoteAddr)
	fmt.Printf("  Handshake —Ç–∞–π–º–∞—É—Ç: %v\n", clientConfig.HandshakeTimeout)
	fmt.Printf("  MTU: %d –±–∞–π—Ç\n", clientConfig.MTU)
	fmt.Printf("  Replay protection window: %d\n", clientConfig.ReplayProtectionWindow)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	if dtlsTransport.IsActive() {
		fmt.Println("‚úì DTLS —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∞–∫—Ç–∏–≤–µ–Ω")
	} else {
		fmt.Println("‚ö† DTLS —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω (–Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ—Å–æ–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)")
	}

	if dtlsTransport.IsHandshakeComplete() {
		fmt.Println("‚ö† Handshake —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω (–Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ)")
	} else {
		fmt.Println("‚úì Handshake –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω (–æ–∂–∏–¥–∞–µ–º–æ)")
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ RTP –ø–∞–∫–µ—Ç–∞
	testPacket := &rtplib.Packet{
		Header: rtplib.Header{
			Version:        2,
			Padding:        false,
			Extension:      false,
			Marker:         true,
			PayloadType:    8, // PCMA
			SequenceNumber: 12345,
			Timestamp:      567890,
			SSRC:           123456789,
		},
		Payload: []byte("Test DTLS RTP payload"),
	}

	fmt.Printf("\n‚úì –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π RTP –ø–∞–∫–µ—Ç:\n")
	fmt.Printf("  Version: %d\n", testPacket.Version)
	fmt.Printf("  PayloadType: %d (PCMA)\n", testPacket.PayloadType)
	fmt.Printf("  SequenceNumber: %d\n", testPacket.SequenceNumber)
	fmt.Printf("  Timestamp: %d\n", testPacket.Timestamp)
	fmt.Printf("  SSRC: %d\n", testPacket.SSRC)
	fmt.Printf("  Payload: %s\n", string(testPacket.Payload))

	// –í —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∑–¥–µ—Å—å –±—ã –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª handshake –∏ –æ–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏
	fmt.Println("\nüí° –í —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏:")
	fmt.Println("  1. –°–µ—Ä–≤–µ—Ä –∏ –∫–ª–∏–µ–Ω—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç DTLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
	fmt.Println("  2. –ü—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç handshake —Å –æ–±–º–µ–Ω–æ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏")
	fmt.Println("  3. –ü–æ—Å–ª–µ handshake –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∑–∞—â–∏—â–µ–Ω–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ RTP")
	fmt.Println("  4. –í—Å–µ RTP –ø–∞–∫–µ—Ç—ã —à–∏—Ñ—Ä—É—é—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π")
	fmt.Println("  5. –ü–æ–ª—É—á–∞—Ç–µ–ª—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ—Ç –ø–∞–∫–µ—Ç—ã –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è")

	fmt.Println("\n‚úÖ –¢–µ—Å—Ç DTLS —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
	fmt.Printf("   - –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤\n")
	fmt.Printf("   - –°–æ–∑–¥–∞–Ω DTLS —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\n")
	fmt.Printf("   - –ü–æ–∫–∞–∑–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ RTP –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è DTLS\n")

	return nil
}

// testDTLSHandshakeTCP –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π DTLS handshake —á–µ—Ä–µ–∑ TCP
func testDTLSHandshakeTCP(cert tls.Certificate) error {
	// –°–æ–∑–¥–∞–µ–º TCP listener –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
	listener, err := net.Listen("tcp", "127.0.0.1:0")
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è listener: %w", err)
	}
	defer listener.Close()

	serverAddr := listener.Addr().String()
	fmt.Printf("‚úì TCP —Å–µ—Ä–≤–µ—Ä —Å–ª—É—à–∞–µ—Ç –Ω–∞ %s\n", serverAddr)

	// –ö–∞–Ω–∞–ª –¥–ª—è –æ—à–∏–±–æ–∫ —Å–µ—Ä–≤–µ—Ä–∞
	serverErr := make(chan error, 1)

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		conn, err := listener.Accept()
		if err != nil {
			serverErr <- fmt.Errorf("–æ—à–∏–±–∫–∞ accept: %w", err)
			return
		}
		defer conn.Close()

		// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TLS —Å–µ—Ä–≤–µ—Ä–∞
		tlsConfig := &tls.Config{
			Certificates: []tls.Certificate{cert},
		}

		tlsConn := tls.Server(conn, tlsConfig)
		defer tlsConn.Close()

		// –í—ã–ø–æ–ª–Ω—è–µ–º handshake
		if err := tlsConn.Handshake(); err != nil {
			serverErr <- fmt.Errorf("–æ—à–∏–±–∫–∞ handshake —Å–µ—Ä–≤–µ—Ä–∞: %w", err)
			return
		}

		fmt.Println("‚úì –°–µ—Ä–≤–µ—Ä: handshake –∑–∞–≤–µ—Ä—à–µ–Ω")

		// –ß–∏—Ç–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		buf := make([]byte, 1024)
		n, err := tlsConn.Read(buf)
		if err != nil {
			serverErr <- fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: %w", err)
			return
		}

		fmt.Printf("‚Üê –°–µ—Ä–≤–µ—Ä –ø–æ–ª—É—á–∏–ª: %s\n", string(buf[:n]))

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
		_, err = tlsConn.Write([]byte("Hello from server"))
		if err != nil {
			serverErr <- fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: %w", err)
			return
		}

		serverErr <- nil
	}()

	// –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
	time.Sleep(100 * time.Millisecond)

	// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	conn, err := net.Dial("tcp", serverAddr)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞: %w", err)
	}
	defer conn.Close()

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ TLS –∫–ª–∏–µ–Ω—Ç–∞
	tlsConfig := &tls.Config{
		InsecureSkipVerify: true, // –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∞!
	}

	tlsConn := tls.Client(conn, tlsConfig)
	defer tlsConn.Close()

	// –í—ã–ø–æ–ª–Ω—è–µ–º handshake
	if err := tlsConn.Handshake(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ handshake –∫–ª–∏–µ–Ω—Ç–∞: %w", err)
	}

	fmt.Println("‚úì –ö–ª–∏–µ–Ω—Ç: handshake –∑–∞–≤–µ—Ä—à–µ–Ω")

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
	state := tlsConn.ConnectionState()
	fmt.Printf("‚úì TLS Connection State:\n")
	fmt.Printf("  Version: %x\n", state.Version)
	fmt.Printf("  CipherSuite: %x\n", state.CipherSuite)
	fmt.Printf("  HandshakeComplete: %v\n", state.HandshakeComplete)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	_, err = tlsConn.Write([]byte("Hello from client"))
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %w", err)
	}
	fmt.Println("‚Üí –ö–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª: Hello from client")

	// –ß–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç
	buf := make([]byte, 1024)
	n, err := tlsConn.Read(buf)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %w", err)
	}
	fmt.Printf("‚Üê –ö–ª–∏–µ–Ω—Ç –ø–æ–ª—É—á–∏–ª: %s\n", string(buf[:n]))

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞
	if err := <-serverErr; err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %w", err)
	}

	fmt.Println("‚úÖ TLS handshake –∏ –æ–±–º–µ–Ω –¥–∞–Ω–Ω—ã–º–∏ —É—Å–ø–µ—à–Ω—ã")
	return nil
}
