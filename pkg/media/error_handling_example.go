// Package media - –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫
package media

import (
	"fmt"
	"log"
	"time"
)

// ExampleErrorHandling –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
func ExampleErrorHandling() error {
	fmt.Println("\n=== –ü—Ä–∏–º–µ—Ä: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –º–µ–¥–∏–∞ —Å–ª–æ—è ===")

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
	config := DefaultMediaSessionConfig()
	config.SessionID = "" // –ù–∞–º–µ—Ä–µ–Ω–Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –æ—à–∏–±–∫–∏

	session, err := NewSession(config)
	if err != nil {
		// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É –æ—à–∏–±–æ–∫
		if HasErrorCode(err, ErrorCodeSessionInvalidConfig) {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Å—Å–∏–∏: %v\n", err)
			fmt.Printf("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: %s\n", GetErrorSuggestion(err))
		}

		// –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
		config.SessionID = "demo-session"
		session, err = NewSession(config)
		if err != nil {
			return err
		}
		fmt.Printf("‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π\n")
	}
	defer session.Stop()

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
	fmt.Printf("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏:\n")
	audioData := generateTestAudio(StandardPCMSamples20ms)

	err = session.SendAudio(audioData)
	if err != nil {
		var mediaErr *MediaError
		if AsMediaError(err, &mediaErr) {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: %s\n", mediaErr.Error())
			fmt.Printf("üîç –ö–æ–¥ –æ—à–∏–±–∫–∏: %d\n", mediaErr.Code)
			fmt.Printf("üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: %s\n", GetErrorSuggestion(err))

			if HasErrorCode(err, ErrorCodeSessionNotStarted) {
				fmt.Printf("‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é...\n")
				if startErr := session.Start(); startErr != nil {
					return startErr
				}
			}
		}
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–∞–∑–º–µ—Ä–∞ –∞—É–¥–∏–æ
	fmt.Printf("\nüìè –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫ —Ä–∞–∑–º–µ—Ä–∞ –∞—É–¥–∏–æ:\n")
	wrongSizeAudio := make([]byte, 50) // –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä

	err = session.SendAudio(wrongSizeAudio)
	if err != nil {
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–æ–π –∞—É–¥–∏–æ
		if audioErr, ok := err.(*AudioError); ok {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∞—É–¥–∏–æ:\n")
			fmt.Printf("   –û–∂–∏–¥–∞–µ—Ç—Å—è: %d –±–∞–π—Ç\n", audioErr.ExpectedSize)
			fmt.Printf("   –ü–æ–ª—É—á–µ–Ω–æ: %d –±–∞–π—Ç\n", audioErr.ActualSize)
			fmt.Printf("   –ö–æ–¥–µ–∫: %s\n", session.GetPayloadTypeName())
			fmt.Printf("   –ß–∞—Å—Ç–æ—Ç–∞: %d Hz\n", audioErr.SampleRate)
			fmt.Printf("   Ptime: %v\n", audioErr.Ptime)
			fmt.Printf("üí° %s\n", GetErrorSuggestion(err))
		}
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º DTMF –æ—à–∏–±–∫–∏
	fmt.Printf("\nüìû –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DTMF –æ—à–∏–±–æ–∫:\n")

	// –û—Ç–∫–ª—é—á–∏–º DTMF –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	session.dtmfEnabled = false

	err = session.SendDTMF(DTMF1, DefaultDTMFDuration)
	if err != nil {
		if dtmfErr, ok := err.(*DTMFError); ok {
			fmt.Printf("‚ùå DTMF –æ—à–∏–±–∫–∞:\n")
			fmt.Printf("   –¶–∏—Ñ—Ä–∞: %s\n", dtmfErr.Digit.String())
			fmt.Printf("   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v\n", dtmfErr.Duration)
			fmt.Printf("üí° %s\n", GetErrorSuggestion(err))
		}
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏
	fmt.Printf("\nüîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã—Ö –æ—à–∏–±–æ–∫:\n")
	testRecoverableErrors(session)

	return nil
}

// testRecoverableErrors –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏
func testRecoverableErrors(session *MediaSession) {
	// –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
	testErrors := []error{
		NewRTPError(ErrorCodeRTPSendFailed, session.sessionID, "test-rtp", "–≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏", 12345, 100, 8000),
		&MediaError{Code: ErrorCodeJitterBufferFull, Message: "–±—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω", SessionID: session.sessionID},
		&MediaError{Code: ErrorCodeSessionClosed, Message: "—Å–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞", SessionID: session.sessionID},
	}

	for i, err := range testErrors {
		fmt.Printf("–û—à–∏–±–∫–∞ %d: %v\n", i+1, err)

		if IsRecoverableError(err) {
			fmt.Printf("   ‚úÖ –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º–∞—è - –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é\n")
		} else {
			fmt.Printf("   ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è - —Ç—Ä–µ–±—É–µ—Ç –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞\n")
		}

		fmt.Printf("   üí° %s\n", GetErrorSuggestion(err))
	}
}

// ExampleErrorContext –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–æ–∫
func ExampleErrorContext() error {
	fmt.Println("\n=== –ü—Ä–∏–º–µ—Ä: –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–æ–∫ ===")

	// –°–æ–∑–¥–∞–µ–º –æ—à–∏–±–∫—É —Å –±–æ–≥–∞—Ç—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
	audioErr := NewAudioError(
		ErrorCodeAudioSizeInvalid,
		"call-12345",
		"–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞",
		PayloadTypePCMU,
		160, // –æ–∂–∏–¥–∞–µ—Ç—Å—è
		80,  // –ø–æ–ª—É—á–µ–Ω–æ
		8000,
		time.Millisecond*20,
	)

	fmt.Printf("–û—à–∏–±–∫–∞: %v\n", audioErr)
	fmt.Printf("–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n")
	fmt.Printf("  - Payload Type: %v\n", audioErr.GetContext("payload_type"))
	fmt.Printf("  - Expected Size: %v\n", audioErr.GetContext("expected_size"))
	fmt.Printf("  - Actual Size: %v\n", audioErr.GetContext("actual_size"))
	fmt.Printf("  - Sample Rate: %v\n", audioErr.GetContext("sample_rate"))
	fmt.Printf("  - Ptime: %v\n", audioErr.GetContext("ptime"))

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º wrapping –æ—à–∏–±–æ–∫
	fmt.Printf("\nüîó Wrapping –æ—à–∏–±–æ–∫:\n")
	originalErr := fmt.Errorf("—Å–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞")
	wrappedErr := WrapMediaError(ErrorCodeRTPSendFailed, "call-12345", "–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å RTP", originalErr)

	fmt.Printf("–û–±–µ—Ä–Ω—É—Ç–∞—è –æ—à–∏–±–∫–∞: %v\n", wrappedErr)
	fmt.Printf("–ò—Å—Ö–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∞: %v\n", wrappedErr.Unwrap())

	return nil
}

// generateTestAudio —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
func generateTestAudio(size int) []byte {
	data := make([]byte, size)
	for i := range data {
		data[i] = byte(i % 256)
	}
	return data
}

// ExampleAllMediaErrors –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫
func ExampleAllMediaErrors() {
	fmt.Println("\nüéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")

	examples := []struct {
		name string
		fn   func() error
	}{
		{"–û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫", ExampleErrorHandling},
		{"–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–æ–∫", ExampleErrorContext},
	}

	for _, example := range examples {
		fmt.Printf("\nüîπ %s\n", example.name)
		if err := example.fn(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ '%s': %v\n", example.name, err)
		}
	}

	fmt.Println("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
}
