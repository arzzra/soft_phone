package media

import (
	"fmt"
	"log"
	"math"
	"math/rand"
	"net"
	"strings"
	"time"

	rtpPkg "github.com/arzzra/soft_phone/pkg/rtp"
	"github.com/pion/rtp"
)

// ExampleBasicMediaSession –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
func ExampleBasicMediaSession() error {
	fmt.Println("=== –ü—Ä–∏–º–µ—Ä: –ë–∞–∑–æ–≤–∞—è –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è ===")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	config := DefaultMediaSessionConfig()
	config.SessionID = "call-001"
	config.Ptime = time.Millisecond * 20 // 20ms –ø–∞–∫–µ—Ç—ã

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
	config.OnAudioReceived = func(audioData []byte, payloadType PayloadType, ptime time.Duration, rtpSessionID string) {
		fmt.Printf("–ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç: %d –±–∞–π—Ç, —Ç–∏–ø %d, ptime %v, —Å–µ—Å—Å–∏—è %s\n",
			len(audioData), payloadType, ptime, rtpSessionID)
	}

	config.OnDTMFReceived = func(event DTMFEvent, rtpSessionID string) {
		fmt.Printf("üìû DTMF —Å–∏–º–≤–æ–ª –ø–æ–ª—É—á–µ–Ω: '%s' –æ—Ç —Å–µ—Å—Å–∏–∏ %s (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏)\n",
			event.Digit.String(), rtpSessionID)
	}

	config.OnMediaError = func(err error, rtpSessionID string) {
		fmt.Printf("–û—à–∏–±–∫–∞ –º–µ–¥–∏–∞ (—Å–µ—Å—Å–∏—è %s): %v\n", rtpSessionID, err)
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—é
	session, err := NewMediaSession(config)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏: %w", err)
	}
	defer session.Stop()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
	if err := session.Start(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏: %w", err)
	}

	fmt.Printf("–ú–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞. –°–æ—Å—Ç–æ—è–Ω–∏–µ: %s\n", session.GetState())

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
	audioData := generateTestAudioSoftphone(StandardPCMSamples20ms) // 20ms –∞—É–¥–∏–æ –¥–ª—è 8kHz

	for i := 0; i < 5; i++ {
		if err := session.SendAudio(audioData); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: %v\n", err)
		} else {
			fmt.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç #%d\n", i+1)
		}
		time.Sleep(time.Millisecond * 20)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DTMF
	digits := []DTMFDigit{DTMF1, DTMF2, DTMF3, DTMFStar}
	for _, digit := range digits {
		if err := session.SendDTMF(digit, DefaultDTMFDuration); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DTMF %s: %v\n", digit, err)
		} else {
			fmt.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω DTMF: %s\n", digit)
		}
		time.Sleep(time.Millisecond * 200)
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	stats := session.GetStatistics()
	fmt.Printf("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:\n")
	fmt.Printf("  –ê—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n", stats.AudioPacketsSent)
	fmt.Printf("  –ê—É–¥–∏–æ –±–∞–π—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n", stats.AudioBytesSent)
	fmt.Printf("  DTMF —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n", stats.DTMFEventsSent)
	fmt.Printf("  –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %v\n", stats.LastActivity.Format("15:04:05"))

	return nil
}

// ExampleRawAudioSending –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É –∞—É–¥–∏–æ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
func ExampleRawAudioSending() error {
	fmt.Println("\n=== –ü—Ä–∏–º–µ—Ä: –û—Ç–ø—Ä–∞–≤–∫–∞ Raw –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö ===")

	config := DefaultMediaSessionConfig()
	config.SessionID = "call-raw-audio"
	config.PayloadType = PayloadTypePCMU

	session, err := NewMediaSession(config)
	if err != nil {
		return err
	}
	defer session.Stop()

	if err := session.Start(); err != nil {
		return err
	}

	// 1. –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
	fmt.Println("1. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —á–µ—Ä–µ–∑ –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä:")
	rawPCM := generateTestAudioSoftphone(StandardPCMSamples20ms) // 20ms PCM –∞—É–¥–∏–æ
	err = session.SendAudio(rawPCM)
	if err != nil {
		fmt.Printf("   –û—à–∏–±–∫–∞: %v\n", err)
	} else {
		fmt.Printf("   ‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –±–∞–π—Ç PCM –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π\n", len(rawPCM))
	}

	// 2. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	fmt.Println("2. –û—Ç–ø—Ä–∞–≤–∫–∞ —É–∂–µ –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö G.711 Œº-law –¥–∞–Ω–Ω—ã—Ö:")

	// –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
	processor := NewAudioProcessor(AudioProcessorConfig{
		PayloadType: PayloadTypePCMU,
		Ptime:       time.Millisecond * 20,
		SampleRate:  8000,
	})

	encodedData, err := processor.ProcessOutgoing(rawPCM)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: %w", err)
	}

	err = session.SendAudioRaw(encodedData)
	if err != nil {
		fmt.Printf("   –û—à–∏–±–∫–∞: %v\n", err)
	} else {
		fmt.Printf("   ‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –±–∞–π—Ç –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n", len(encodedData))
	}

	// 3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞
	fmt.Println("3. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Ñ–æ—Ä–º–∞—Ç–∞ (A-law):")
	err = session.SendAudioWithFormat(rawPCM, PayloadTypePCMA, false)
	if err != nil {
		fmt.Printf("   –û—à–∏–±–∫–∞: %v\n", err)
	} else {
		fmt.Printf("   ‚úì –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ A-law —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π\n")
	}

	// 4. –ü—Ä—è–º–∞—è –∑–∞–ø–∏—Å—å –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–æ–∫ (–Ω–∞—Ä—É—à–∞–µ—Ç timing!)
	fmt.Println("4. –ü—Ä—è–º–∞—è –∑–∞–ø–∏—Å—å –≥–æ—Ç–æ–≤–æ–≥–æ RTP payload (‚ö†Ô∏è –Ω–∞—Ä—É—à–∞–µ—Ç timing!):")
	err = session.WriteAudioDirect(encodedData)
	if err != nil {
		fmt.Printf("   –û—à–∏–±–∫–∞: %v\n", err)
	} else {
		fmt.Printf("   ‚ö†Ô∏è –ü—Ä—è–º–∞—è –∑–∞–ø–∏—Å—å %d –±–∞–π—Ç (–Ω–∞—Ä—É—à–∞–µ—Ç RTP timing!)\n", len(encodedData))
	}

	// 5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö ptime
	fmt.Println("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö packet time:")
	ptimes := []time.Duration{
		time.Millisecond * 10,
		time.Millisecond * 30,
		time.Millisecond * 40,
	}

	for _, ptime := range ptimes {
		_ = session.SetPtime(ptime)
		expectedSize := session.GetExpectedPayloadSize()
		fmt.Printf("   Ptime %v: –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä payload %d –±–∞–π—Ç –¥–ª—è %s\n",
			ptime, expectedSize, session.GetPayloadTypeName())

		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
		sampleRate := getSampleRateForPayloadType(session.GetPayloadType())
		samplesNeeded := int(float64(sampleRate) * ptime.Seconds())
		testData := generateTestAudioSoftphone(samplesNeeded)

		err = session.SendAudio(testData)
		if err != nil {
			fmt.Printf("   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è ptime %v: %v\n", ptime, err)
		} else {
			fmt.Printf("   ‚úì –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è ptime %v\n", ptime)
		}
	}

	// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ptime –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	_ = session.SetPtime(time.Millisecond * 20)

	// 6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RTP timing
	fmt.Println("6. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ RTP timing:")

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Ñ–µ—Ä–µ
	bufferSize := session.GetBufferedAudioSize()
	timeSinceLastSend := session.GetTimeSinceLastSend()
	fmt.Printf("   –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: %d –±–∞–π—Ç\n", bufferSize)
	fmt.Printf("   –í—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: %v\n", timeSinceLastSend)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏ –º–µ–Ω—å—à–µ ptime (–¥–æ–ª–∂–Ω—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å—Å—è –≤ –±—É—Ñ–µ—Ä–µ)
	fmt.Println("   –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 5ms (–º–µ–Ω—å—à–µ ptime 20ms):")
	for i := 0; i < 5; i++ {
		smallData := generateTestAudioSoftphone(40) // –ú–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ—Ä—Ü–∏–∏
		err = session.SendAudio(smallData)
		if err != nil {
			fmt.Printf("   –û—à–∏–±–∫–∞: %v\n", err)
		}

		bufferSize = session.GetBufferedAudioSize()
		fmt.Printf("   –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –±–∞–π—Ç, –≤ –±—É—Ñ–µ—Ä–µ: %d –±–∞–π—Ç\n", len(smallData), bufferSize)

		time.Sleep(time.Millisecond * 5) // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–Ω—å—à–µ ptime
	}

	// –ñ–¥–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
	fmt.Println("   –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
	time.Sleep(time.Millisecond * 50)

	bufferSize = session.GetBufferedAudioSize()
	fmt.Printf("   –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è: %d –±–∞–π—Ç\n", bufferSize)

	return nil
}

// ExampleRawPacketHandling –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—ã—Ä—ã—Ö RTP –ø–∞–∫–µ—Ç–æ–≤
func ExampleRawPacketHandling() error {
	fmt.Println("\n=== –ü—Ä–∏–º–µ—Ä: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—ã—Ä—ã—Ö RTP –ø–∞–∫–µ—Ç–æ–≤ ===")

	config := DefaultMediaSessionConfig()
	config.SessionID = "call-raw-packets"

	// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	var rawPacketsReceived int
	var decodedPacketsReceived int

	// –û–±—ã—á–Ω—ã–π callback –¥–ª—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
	config.OnAudioReceived = func(audioData []byte, payloadType PayloadType, ptime time.Duration, rtpSessionID string) {
		decodedPacketsReceived++
		fmt.Printf("üì¢ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ: %d –±–∞–π—Ç, payload %d, ptime %v, —Å–µ—Å—Å–∏—è %s\n",
			len(audioData), payloadType, ptime, rtpSessionID)
	}

	session, err := NewMediaSession(config)
	if err != nil {
		return err
	}
	defer session.Stop()

	if err := session.Start(); err != nil {
		return err
	}

	// 1. –†–µ–∂–∏–º —Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
	fmt.Println("1Ô∏è‚É£ –†–µ–∂–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ (—Å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º):")
	fmt.Printf("   Raw packet handler —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %v\n", session.HasRawPacketHandler())

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–∞ (–æ–±—ã—á–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç –æ—Ç RTP —Å–µ—Å—Å–∏–∏)
	mockPacket := createMockRTPPacket(PayloadTypePCMU, generateTestAudioSoftphone(StandardPCMSamples20ms))
	session.processIncomingPacket(mockPacket)

	fmt.Printf("   –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: %d, —Å—ã—Ä—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: %d\n",
		decodedPacketsReceived, rawPacketsReceived)

	// 2. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Ä–µ–∂–∏–º —Å—ã—Ä—ã—Ö –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤
	fmt.Println("\n2Ô∏è‚É£ –†–µ–∂–∏–º —Å—ã—Ä—ã—Ö –∞—É–¥–∏–æ RTP –ø–∞–∫–µ—Ç–æ–≤ (DTMF –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ):")

	session.SetRawPacketHandler(func(packet *rtp.Packet, rtpSessionID string) {
		rawPacketsReceived++
		fmt.Printf("üì¶ –°—ã—Ä–æ–π –∞—É–¥–∏–æ RTP –ø–∞–∫–µ—Ç: seq=%d, ts=%d, payload=%d –±–∞–π—Ç, PT=%d, —Å–µ—Å—Å–∏—è %s\n",
			packet.SequenceNumber, packet.Timestamp, len(packet.Payload), packet.PayloadType, rtpSessionID)

		// –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç
		// –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª, –ø–µ—Ä–µ—Å–ª–∞—Ç—å –∫—É–¥–∞-—Ç–æ –µ—â–µ, etc.
		// DTMF –ø–∞–∫–µ—Ç—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ DTMF callback
	})

	fmt.Printf("   Raw packet handler —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %v\n", session.HasRawPacketHandler())

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤
	fmt.Println("   (–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è 3 –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤)")
	for i := 0; i < 3; i++ {
		rawPacketsReceived++
		fmt.Printf("üì¶ –°—ã—Ä–æ–π –∞—É–¥–∏–æ RTP –ø–∞–∫–µ—Ç: seq=%d, ts=%d, payload=%d –±–∞–π—Ç, PT=%d\n",
			1000+i, 8000*i, 160, PayloadTypePCMU)
	}

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ DTMF –ø–∞–∫–µ—Ç–∞ - –æ–Ω –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
	fmt.Println("   (–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è DTMF –ø–∞–∫–µ—Ç–∞ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)")
	fmt.Printf("üéµ –ü–æ–ª—É—á–µ–Ω DTMF: 1, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å %v\n", DefaultDTMFDuration)

	fmt.Printf("   –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: %d, —Å—ã—Ä—ã—Ö –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤: %d\n",
		decodedPacketsReceived, rawPacketsReceived)

	// 3. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ
	fmt.Println("\n3Ô∏è‚É£ –í–æ–∑–≤—Ä–∞—Ç –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ:")
	session.ClearRawPacketHandler()
	fmt.Printf("   Raw packet handler —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: %v\n", session.HasRawPacketHandler())

	fmt.Println("   (–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞)")
	decodedPacketsReceived++
	fmt.Printf("üì¢ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞—É–¥–∏–æ: 160 –±–∞–π—Ç, payload 0, ptime 20ms\n")

	fmt.Printf("   –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤: %d, —Å—ã—Ä—ã—Ö –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤: %d\n",
		decodedPacketsReceived, rawPacketsReceived)

	// 4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	fmt.Println("\n4Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:")

	rawConfig := DefaultMediaSessionConfig()
	rawConfig.SessionID = "call-raw-config"
	rawConfig.OnRawPacketReceived = func(packet *rtp.Packet, rtpSessionID string) {
		fmt.Printf("üéØ –°—ã—Ä–æ–π –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: seq=%d, size=%d, —Å–µ—Å—Å–∏—è %s\n",
			packet.SequenceNumber, len(packet.Payload), rtpSessionID)
	}

	rawSession, err := NewMediaSession(rawConfig)
	if err != nil {
		return err
	}
	defer func() { _ = rawSession.Stop() }()

	if err := rawSession.Start(); err != nil {
		return err
	}

	fmt.Printf("   Raw handler –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: %v\n", rawSession.HasRawPacketHandler())

	fmt.Println("   (–°–∏–º—É–ª—è—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞)")
	fmt.Printf("üéØ –°—ã—Ä–æ–π –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: seq=%d, size=%d\n", 2000, 160)

	return nil
}

// createMockRTPPacket —Å–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π RTP –ø–∞–∫–µ—Ç
func createMockRTPPacket(payloadType PayloadType, payload []byte) *rtp.Packet {
	return &rtp.Packet{
		Header: rtp.Header{
			Version:        2,
			Padding:        false,
			Extension:      false,
			Marker:         false,
			PayloadType:    uint8(payloadType),
			SequenceNumber: uint16(rand.Intn(65536)),
			Timestamp:      uint32(rand.Intn(1000000)),
			SSRC:           0x12345678,
		},
		Payload: payload,
	}
}

// ExampleJitterBufferControl –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ jitter buffer
func ExampleJitterBufferControl() error {
	fmt.Println("\n=== –ü—Ä–∏–º–µ—Ä: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Jitter Buffer ===")

	config := DefaultMediaSessionConfig()
	config.SessionID = "call-jitter-test"
	config.JitterEnabled = true
	config.JitterBufferSize = 15               // –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä
	config.JitterDelay = time.Millisecond * 80 // –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

	session, err := NewMediaSession(config)
	if err != nil {
		return err
	}
	defer session.Stop()

	fmt.Printf("Jitter buffer –≤–∫–ª—é—á–µ–Ω: —Ä–∞–∑–º–µ—Ä %d –ø–∞–∫–µ—Ç–æ–≤, –∑–∞–¥–µ—Ä–∂–∫–∞ %v\n",
		config.JitterBufferSize, config.JitterDelay)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ jitter buffer
	if err := session.EnableJitterBuffer(false); err != nil {
		return err
	}
	fmt.Println("Jitter buffer –æ—Ç–∫–ª—é—á–µ–Ω")

	// –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
	if err := session.EnableJitterBuffer(true); err != nil {
		return err
	}
	fmt.Println("Jitter buffer –≤–∫–ª—é—á–µ–Ω –æ–±—Ä–∞—Ç–Ω–æ")

	return nil
}

// ExampleMediaDirections –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å RTP —Å–µ—Å—Å–∏—è–º–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
func ExampleMediaDirections() error {
	fmt.Println("\nüé≠ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –º–µ–¥–∏–∞ üé≠")
	
	directionTests := []struct {
		name       string
		canSend    bool
		canReceive bool
	}{
		{"sendrecv", true, true},
		{"sendonly", true, false},
		{"recvonly", false, true},
		{"inactive", false, false},
	}
	
	for _, test := range directionTests {
		fmt.Printf("\nüìå –¢–µ—Å—Ç–∏—Ä—É–µ–º %s —Ä–µ–∂–∏–º\n", test.name)
		
		config := DefaultMediaSessionConfig()
		config.SessionID = fmt.Sprintf("example-direction-%s", test.name)
		
		session, err := NewMediaSession(config)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: %w", err)
		}
		defer session.Stop()
		
		// –î–æ–±–∞–≤–ª—è–µ–º mock RTP —Å–µ—Å—Å–∏—é —Å –Ω—É–∂–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
		mockRTP := &MockRTPSession{
			id:         "example",
			codec:      "PCMU",
			canSend:    test.canSend,
			canReceive: test.canReceive,
		}
		session.AddRTPSession("example", mockRTP)
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
		if test.canSend {
			audioData := generateTestAudioSoftphone(160)
			err := session.SendAudio(audioData)
			if err == nil {
				fmt.Println("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞")
			}
		} else {
			audioData := generateTestAudioSoftphone(160)
			err := session.SendAudio(audioData)
			if err != nil {
				fmt.Println("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –∑–∞–ø—Ä–µ—â–µ–Ω–∞")
			}
		}
		
		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–µ–º–∞
		if test.canReceive {
			fmt.Println("‚úÖ –ü—Ä–∏–µ–º –∞—É–¥–∏–æ —Ä–∞–∑—Ä–µ—à–µ–Ω")
		} else {
			fmt.Println("‚ùå –ü—Ä–∏–µ–º –∞—É–¥–∏–æ –∑–∞–ø—Ä–µ—â–µ–Ω")
		}
	}
	
	return nil
}

// ExamplePtimeConfiguration –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É packet time
func ExamplePtimeConfiguration() error {
	fmt.Println("\n=== –ü—Ä–∏–º–µ—Ä: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Packet Time ===")

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
	fmt.Printf("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Ä–∞–∑–º–µ—Ä–æ–≤ PCM –ø–∞–∫–µ—Ç–æ–≤:\n")
	fmt.Printf("  10ms: %d samples\n", StandardPCMSamples10ms)
	fmt.Printf("  20ms: %d samples\n", StandardPCMSamples20ms)
	fmt.Printf("  30ms: %d samples\n", StandardPCMSamples30ms)
	fmt.Printf("  40ms: %d samples\n", StandardPCMSamples40ms)
	fmt.Printf("üìû DTMF –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã:\n")
	fmt.Printf("  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: %v\n", DefaultDTMFDuration)
	fmt.Printf("  RFC 4733 payload type: %d\n", DTMFPayloadTypeRFC)

	config := DefaultMediaSessionConfig()
	config.SessionID = "call-ptime-test"

	session, err := NewMediaSession(config)
	if err != nil {
		return err
	}
	defer session.Stop()

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è ptime
	ptimes := []time.Duration{
		time.Millisecond * 10, // 10ms
		time.Millisecond * 20, // 20ms (—Å—Ç–∞–Ω–¥–∞—Ä—Ç)
		time.Millisecond * 30, // 30ms
		time.Millisecond * 40, // 40ms
	}

	for _, ptime := range ptimes {
		if err := session.SetPtime(ptime); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ptime %v: %v\n", ptime, err)
			continue
		}

		currentPtime := session.GetPtime()
		fmt.Printf("–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω ptime: %v (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: %v)\n", ptime, currentPtime)

		// –í—ã—á–∏—Å–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–∞
		sampleRate := uint32(8000) // –î–ª—è PCMU
		samplesPerPacket := int(float64(sampleRate) * ptime.Seconds())
		bytesPerPacket := samplesPerPacket // 1 –±–∞–π—Ç –Ω–∞ sample –¥–ª—è PCMU

		fmt.Printf("  –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: %d –±–∞–π—Ç (%d samples)\n",
			bytesPerPacket, samplesPerPacket)
	}

	return nil
}

// ExampleDTMFHandling –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å DTMF
func ExampleDTMFHandling() error {
	fmt.Println("\n=== –ü—Ä–∏–º–µ—Ä: –û–±—Ä–∞–±–æ—Ç–∫–∞ DTMF ===")

	config := DefaultMediaSessionConfig()
	config.SessionID = "call-dtmf-test"
	config.DTMFEnabled = true

	// –°—á–µ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö DTMF
	dtmfReceived := 0
	config.OnDTMFReceived = func(event DTMFEvent, rtpSessionID string) {
		dtmfReceived++
		fmt.Printf("üìû DTMF —Å–∏–º–≤–æ–ª #%d –ø–æ–ª—É—á–µ–Ω: '%s' –æ—Ç —Å–µ—Å—Å–∏–∏ %s (–Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏)\n",
			dtmfReceived, event.Digit.String(), rtpSessionID)
	}

	session, err := NewMediaSession(config)
	if err != nil {
		return err
	}
	defer session.Stop()

	if err := session.Start(); err != nil {
		return err
	}

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ DTMF —Å—Ç—Ä–æ–∫–∏
	dtmfString := "123*456#ABC"
	digits, err := ParseDTMFString(dtmfString)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ DTMF —Å—Ç—Ä–æ–∫–∏: %w", err)
	}

	fmt.Printf("–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç—Ä–æ–∫–∏ '%s' –≤ DTMF —Ü–∏—Ñ—Ä—ã:\n", dtmfString)
	for i, digit := range digits {
		fmt.Printf("  [%d] %s\n", i, digit)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —Ü–∏—Ñ—Ä—ã
	fmt.Println("\n–û—Ç–ø—Ä–∞–≤–∫–∞ DTMF —Ü–∏—Ñ—Ä:")
	for _, digit := range digits {
		duration := DefaultDTMFDuration + time.Millisecond*time.Duration(rand.Intn(100)) // 100-200ms

		if err := session.SendDTMF(digit, duration); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DTMF %s: %v\n", digit, err)
		} else {
			fmt.Printf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω DTMF: %s (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v)\n", digit, duration)
		}

		time.Sleep(time.Millisecond * 150) // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ü–∏—Ñ—Ä–∞–º–∏
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	stats := session.GetStatistics()
	fmt.Printf("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ DTMF:\n")
	fmt.Printf("  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d —Å–æ–±—ã—Ç–∏–π\n", stats.DTMFEventsSent)
	fmt.Printf("  –ü–æ–ª—É—á–µ–Ω–æ: %d —Å–æ–±—ã—Ç–∏–π\n", stats.DTMFEventsReceived)

	return nil
}

// ExampleCodecSupport –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–¥–µ–∫–æ–≤
func ExampleCodecSupport() error {
	fmt.Println("\n=== –ü—Ä–∏–º–µ—Ä: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–¥–µ–∫–æ–≤ ===")

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–æ–¥–µ–∫–∏
	codecs := []struct {
		name        string
		payloadType PayloadType
		sampleRate  uint32
	}{
		{"G.711 Œº-law (PCMU)", PayloadTypePCMU, 8000},
		{"G.711 A-law (PCMA)", PayloadTypePCMA, 8000},
		{"G.722", PayloadTypeG722, 16000},
		{"GSM 06.10", PayloadTypeGSM, 8000},
		{"G.728", PayloadTypeG728, 8000},
		{"G.729", PayloadTypeG729, 8000},
	}

	for _, codec := range codecs {
		fmt.Printf("\n–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–¥–µ–∫: %s\n", codec.name)

		config := DefaultMediaSessionConfig()
		config.SessionID = fmt.Sprintf("call-%s", codec.name)
		config.PayloadType = codec.payloadType

		session, err := NewMediaSession(config)
		if err != nil {
			fmt.Printf("  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v\n", err)
			continue
		}

		fmt.Printf("  ‚úì –ú–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞\n")
		fmt.Printf("  –ß–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏: %d Hz\n",
			getSampleRateForPayloadType(codec.payloadType))
		fmt.Printf("  –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–¥–µ–∫–∞: %s\n", session.GetPayloadTypeName())
		fmt.Printf("  –û–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä payload: %d –±–∞–π—Ç\n", session.GetExpectedPayloadSize())

		// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
		audioConfig := DefaultAudioProcessorConfig()
		audioConfig.PayloadType = codec.payloadType
		audioConfig.SampleRate = codec.sampleRate

		processor := NewAudioProcessor(audioConfig)
		if processor != nil {
			fmt.Printf("  ‚úì –ê—É–¥–∏–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å–æ–∑–¥–∞–Ω\n")

			// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
			stats := processor.GetStatistics()
			fmt.Printf("  Payload Type: %d, Sample Rate: %d Hz, Ptime: %v\n",
				stats.PayloadType, stats.SampleRate, stats.Ptime)
		}

		session.Stop()
	}

	return nil
}

// ExampleMultipleRTPSessions –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ RTP —Å–µ—Å—Å–∏—è–º–∏
func ExampleMultipleRTPSessions() error {
	fmt.Println("\n=== –ü—Ä–∏–º–µ—Ä: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ RTP —Å–µ—Å—Å–∏–∏ ===")

	config := DefaultMediaSessionConfig()
	config.SessionID = "call-multi-rtp"

	session, err := NewMediaSession(config)
	if err != nil {
		return err
	}
	defer session.Stop()

	// –°–æ–∑–¥–∞–µ–º mock RTP —Å–µ—Å—Å–∏–∏
	mockSessions := []*MockRTPSession{
		{id: "primary-audio", codec: "PCMU"},
		{id: "backup-audio", codec: "PCMA"},
		{id: "comfort-noise", codec: "CN"},
	}

	// –î–æ–±–∞–≤–ª—è–µ–º RTP —Å–µ—Å—Å–∏–∏
	for _, mockSession := range mockSessions {
		if err := session.AddRTPSession(mockSession.id, mockSession); err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è RTP —Å–µ—Å—Å–∏–∏ %s: %v\n", mockSession.id, err)
		} else {
			fmt.Printf("‚úì –î–æ–±–∞–≤–ª–µ–Ω–∞ RTP —Å–µ—Å—Å–∏—è: %s (%s)\n", mockSession.id, mockSession.codec)
		}
	}

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ RTP —Å–µ—Å—Å–∏–∏
	fmt.Printf("\n–í—Å–µ–≥–æ RTP —Å–µ—Å—Å–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ: %d\n", len(mockSessions))

	// –£–¥–∞–ª—è–µ–º –æ–¥–Ω—É —Å–µ—Å—Å–∏—é
	if err := session.RemoveRTPSession("backup-audio"); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è RTP —Å–µ—Å—Å–∏–∏: %v\n", err)
	} else {
		fmt.Printf("‚úì –£–¥–∞–ª–µ–Ω–∞ RTP —Å–µ—Å—Å–∏—è: backup-audio\n")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ—Å—Å–∏–∏
	fmt.Printf("–°–µ—Å—Å–∏—è backup-audio —É–¥–∞–ª–µ–Ω–∞\n")

	return nil
}

// MockRTPSession –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
type MockRTPSession struct {
	id         string
	codec      string
	active     bool
	canSend    bool
	canReceive bool
}

func (m *MockRTPSession) Start() error {
	m.active = true
	return nil
}

func (m *MockRTPSession) Stop() error {
	m.active = false
	return nil
}

func (m *MockRTPSession) SendAudio(data []byte, ptime time.Duration) error {
	if !m.active {
		return fmt.Errorf("RTP —Å–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
	}
	// –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏
	return nil
}

func (m *MockRTPSession) SendPacket(packet *rtp.Packet) error {
	if !m.active {
		return fmt.Errorf("RTP —Å–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
	}
	// –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∞–∫–µ—Ç–∞
	return nil
}

func (m *MockRTPSession) GetState() int {
	if m.active {
		return 1 // –ê–∫—Ç–∏–≤–Ω–∞
	}
	return 0 // –ù–µ–∞–∫—Ç–∏–≤–Ω–∞
}

func (m *MockRTPSession) GetSSRC() uint32 {
	return 0x12345678
}

func (m *MockRTPSession) GetStatistics() interface{} {
	return map[string]interface{}{
		"packets_sent": 100,
		"bytes_sent":   8000,
	}
}

// RTCP –º–µ—Ç–æ–¥—ã –¥–ª—è MockRTPSession
func (m *MockRTPSession) EnableRTCP(enabled bool) error {
	// –°–∏–º—É–ª—è—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è RTCP
	return nil
}

func (m *MockRTPSession) IsRTCPEnabled() bool {
	// –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é RTCP –æ—Ç–∫–ª—é—á–µ–Ω –≤ mock —Å–µ—Å—Å–∏–∏
	return false
}

func (m *MockRTPSession) GetRTCPStatistics() interface{} {
	return map[string]interface{}{
		"packets_sent":     50,
		"packets_received": 45,
		"octets_sent":      2000,
		"octets_received":  1800,
		"packets_lost":     2,
		"fraction_lost":    4,
		"jitter":           10,
	}
}

func (m *MockRTPSession) SendRTCPReport() error {
	if !m.active {
		return fmt.Errorf("RTP —Å–µ—Å—Å–∏—è –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞")
	}
	// –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ RTCP –æ—Ç—á–µ—Ç–∞
	return nil
}

// RegisterIncomingHandler —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö RTP –ø–∞–∫–µ—Ç–æ–≤
func (m *MockRTPSession) RegisterIncomingHandler(handler func(*rtp.Packet, net.Addr)) {
	// Mock —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è - –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
}

// SetDirection —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞
func (m *MockRTPSession) SetDirection(direction rtpPkg.Direction) error {
	m.canSend = direction == rtpPkg.DirectionSendRecv || direction == rtpPkg.DirectionSendOnly
	m.canReceive = direction == rtpPkg.DirectionSendRecv || direction == rtpPkg.DirectionRecvOnly
	return nil
}

// GetDirection –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞
func (m *MockRTPSession) GetDirection() rtpPkg.Direction {
	if m.canSend && m.canReceive {
		return rtpPkg.DirectionSendRecv
	} else if m.canSend {
		return rtpPkg.DirectionSendOnly
	} else if m.canReceive {
		return rtpPkg.DirectionRecvOnly
	}
	return rtpPkg.DirectionInactive
}

// CanSend –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —Å–µ—Å—Å–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ
func (m *MockRTPSession) CanSend() bool {
	return m.canSend
}

// CanReceive –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —Å–µ—Å—Å–∏—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
func (m *MockRTPSession) CanReceive() bool {
	return m.canReceive
}

// generateTestAudioSoftphone –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
func generateTestAudioSoftphone(samples int) []byte {
	data := make([]byte, samples)
	for i := range data {
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–∏–Ω—É—Å–æ–∏–¥—É
		data[i] = byte(128 + 64*math.Sin(float64(i)*0.1))
	}
	return data
}

// RunAllExamples –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã
func RunAllExamples() {
	fmt.Println("üéµ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–µ–¥–∏–∞ —Å–ª–æ—è –¥–ª—è —Å–æ—Ñ—Ç—Ñ–æ–Ω–∞ üéµ")
	fmt.Println(strings.Repeat("=", 50))

	examples := []struct {
		name string
		fn   func() error
	}{
		{"–ë–∞–∑–æ–≤–∞—è –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è", ExampleBasicMediaSession},
		{"–û—Ç–ø—Ä–∞–≤–∫–∞ Raw –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö", ExampleRawAudioSending},
		{"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—ã—Ä—ã—Ö RTP –ø–∞–∫–µ—Ç–æ–≤", ExampleRawPacketHandling},
		{"–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Jitter Buffer", ExampleJitterBufferControl},
		{"–†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã –º–µ–¥–∏–∞", ExampleMediaDirections},
		{"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Packet Time", ExamplePtimeConfiguration},
		{"–û–±—Ä–∞–±–æ—Ç–∫–∞ DTMF", ExampleDTMFHandling},
		{"–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–æ–¥–µ–∫–æ–≤", ExampleCodecSupport},
		{"–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ RTP —Å–µ—Å—Å–∏–∏", ExampleMultipleRTPSessions},
		{"RTCP –ø–æ–¥–¥–µ—Ä–∂–∫–∞", ExampleRTCPUsage},
	}

	for _, example := range examples {
		fmt.Printf("\nüîπ %s\n", example.name)
		if err := example.fn(); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ '%s': %v\n", example.name, err)
		}
		time.Sleep(time.Millisecond * 500) // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–∏–º–µ—Ä–∞–º–∏
	}

	fmt.Println("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
}
