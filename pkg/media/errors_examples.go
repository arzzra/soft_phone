// Package media - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫ –º–µ–¥–∏–∞ —Å–ª–æ—è
package media

import (
	"errors"
	"fmt"
	"time"
)

// ExampleErrorHandling –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫
func ExampleErrorHandling() {
	fmt.Println("=== –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫ –º–µ–¥–∏–∞ —Å–ª–æ—è ===")

	// 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π –æ—à–∏–±–∫–∏ –º–µ–¥–∏–∞
	sessionID := "call-session-123"
	err1 := &MediaError{
		Code:      ErrorCodeSessionNotStarted,
		Message:   "—Å–µ—Å—Å–∏—è –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º",
		SessionID: sessionID,
	}
	fmt.Printf("1. –ü—Ä–æ—Å—Ç–∞—è –æ—à–∏–±–∫–∞: %v\n", err1)

	// 2. –°–æ–∑–¥–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ –∞—É–¥–∏–æ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
	err2 := NewAudioError(
		ErrorCodeAudioSizeInvalid,
		sessionID,
		"—Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É –¥–ª—è G.711 Œº-law",
		PayloadTypePCMU,     // –æ–∂–∏–¥–∞–µ–º—ã–π —Ç–∏–ø
		160,                 // –æ–∂–∏–¥–∞–µ–º—ã–π —Ä–∞–∑–º–µ—Ä
		120,                 // —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–∞–∑–º–µ—Ä
		8000,                // —á–∞—Å—Ç–æ—Ç–∞ –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
		time.Millisecond*20, // packet time
	)
	fmt.Printf("2. –û—à–∏–±–∫–∞ –∞—É–¥–∏–æ: %v\n", err2)
	fmt.Printf("   Payload type: %d, –û–∂–∏–¥–∞–ª–æ—Å—å: %d –±–∞–π—Ç, –ü–æ–ª—É—á–µ–Ω–æ: %d –±–∞–π—Ç\n",
		err2.PayloadType, err2.ExpectedSize, err2.ActualSize)

	// 3. –°–æ–∑–¥–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ DTMF
	err3 := NewDTMFError(
		ErrorCodeDTMFInvalidDigit,
		sessionID,
		"–ø–æ–ª—É—á–µ–Ω DTMF –ø–∞–∫–µ—Ç —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Å–∏–º–≤–æ–ª–æ–º",
		DTMFDigit('X'),       // –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Å–∏–º–≤–æ–ª
		time.Millisecond*100, // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
	)
	fmt.Printf("3. –û—à–∏–±–∫–∞ DTMF: %v\n", err3)
	fmt.Printf("   –°–∏–º–≤–æ–ª: %s, –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v\n",
		err3.Digit, err3.Duration)

	// 4. –°–æ–∑–¥–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ RTP
	err4 := NewRTPError(
		ErrorCodeRTPSendFailed,
		sessionID,
		"–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å RTP –ø–∞–∫–µ—Ç - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ",
		"primary-audio", // RTP session ID
		0x12345678,      // SSRC
		1500,            // sequence number
		160000,          // RTP timestamp
	)
	fmt.Printf("4. –û—à–∏–±–∫–∞ RTP: %v\n", err4)
	fmt.Printf("   RTP —Å–µ—Å—Å–∏—è: %s, SSRC: 0x%08X, Seq: %d\n",
		err4.RTPSessionID, err4.SSRC, err4.SequenceNum)

	// 5. –°–æ–∑–¥–∞–Ω–∏–µ –æ—à–∏–±–∫–∏ Jitter Buffer
	err5 := NewJitterBufferError(
		ErrorCodeJitterBufferFull,
		sessionID,
		"jitter buffer –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω, –ø–∞–∫–µ—Ç—ã –±—É–¥—É—Ç –æ—Ç–±—Ä–æ—à–µ–Ω—ã",
		10,                  // —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä
		10,                  // –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
		time.Millisecond*80, // —Ç–µ–∫—É—â–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
		5,                   // –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã
	)
	fmt.Printf("5. –û—à–∏–±–∫–∞ Jitter Buffer: %v\n", err5)
	fmt.Printf("   –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞: %d/%d, –ó–∞–¥–µ—Ä–∂–∫–∞: %v, –ü–æ—Ç–µ—Ä–∏: %d\n",
		err5.BufferSize, err5.MaxBufferSize, err5.CurrentDelay, err5.PacketsLost)

	fmt.Println("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ ===")

	// 6. –û–±–æ—Ä–∞—á–∏–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –æ—à–∏–±–∫–∏
	originalErr := errors.New("network connection timeout")
	wrappedErr := WrapMediaError(
		ErrorCodeRTPSendFailed,
		sessionID,
		"–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç —á–µ—Ä–µ–∑ RTP",
		originalErr,
	)
	fmt.Printf("6. –û–±–µ—Ä–Ω—É—Ç–∞—è –æ—à–∏–±–∫–∞: %v\n", wrappedErr)
	fmt.Printf("   –ò—Å—Ö–æ–¥–Ω–∞—è –æ—à–∏–±–∫–∞: %v\n", errors.Unwrap(wrappedErr))

	fmt.Println("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—à–∏–±–æ–∫ ===")

	// 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
	testErrors := []error{err1, err2, err3, err4, err5, wrappedErr}

	for i, err := range testErrors {
		fmt.Printf("\n–û—à–∏–±–∫–∞ #%d:\n", i+1)

		var mediaErr *MediaError
		if AsMediaError(err, &mediaErr) {
			fmt.Printf("  –ö–æ–¥ –æ—à–∏–±–∫–∏: %d\n", mediaErr.Code)
			fmt.Printf("  Session ID: %s\n", mediaErr.SessionID)
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã
		if _, ok := err.(*AudioError); ok {
			fmt.Printf("  –¢–∏–ø: AudioError\n")
		} else if _, ok := err.(*DTMFError); ok {
			fmt.Printf("  –¢–∏–ø: DTMFError\n")
		} else if _, ok := err.(*RTPError); ok {
			fmt.Printf("  –¢–∏–ø: RTPError\n")
		} else if _, ok := err.(*JitterBufferError); ok {
			fmt.Printf("  –¢–∏–ø: JitterBufferError\n")
		} else {
			fmt.Printf("  –¢–∏–ø: MediaError\n")
		}
	}

	fmt.Println("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è errors.Is ===")

	// 8. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ errors.Is –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–¥–æ–≤ –æ—à–∏–±–æ–∫
	if HasErrorCode(err2, ErrorCodeAudioSizeInvalid) {
		fmt.Println("‚úì –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∞—É–¥–∏–æ")
	}

	if HasErrorCode(wrappedErr, ErrorCodeRTPSendFailed) {
		fmt.Println("‚úì –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ RTP")
	} else {
		fmt.Println("‚úó –≠—Ç–æ –Ω–µ –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ RTP")
	}

	fmt.Println("\n=== –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ ===")

	// 9. –†–∞–±–æ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –æ—à–∏–±–∫–∏
	err2.Context["codec_name"] = "G.711 Œº-law"
	err2.Context["bandwidth"] = "64 kbps"
	err2.Context["call_direction"] = "outbound"

	fmt.Printf("9. –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏ –∞—É–¥–∏–æ:\n")
	if codec := err2.GetContext("codec_name"); codec != nil {
		fmt.Printf("   –ö–æ–¥–µ–∫: %v\n", codec)
	}
	if bandwidth := err2.GetContext("bandwidth"); bandwidth != nil {
		fmt.Printf("   –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å: %v\n", bandwidth)
	}
	if direction := err2.GetContext("call_direction"); direction != nil {
		fmt.Printf("   –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—ã–∑–æ–≤–∞: %v\n", direction)
	}
}

// ExampleErrorsInMediaSession –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –æ—à–∏–±–æ–∫ –≤ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—é
func ExampleErrorsInMediaSession() error {
	fmt.Println("\n=== –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –≤ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—é ===")

	// –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—à–∏–±–æ—á–Ω—ã–µ —Å–∏—Ç—É–∞—Ü–∏–∏
	sessionID := "demo-session-456"

	// 1. –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	fmt.Println("1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
	if err := validateMediaConfig(sessionID, time.Millisecond*5); err != nil {
		fmt.Printf("   ‚ùå %v\n", err)
		if HasErrorCode(err, ErrorCodeAudioTimingInvalid) {
			fmt.Printf("   üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ptime –æ—Ç 10 –¥–æ 40 –º—Å\n")
		}
	}

	// 2. –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
	fmt.Println("2. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è:")
	if err := simulateAudioSendWhenInactive(sessionID); err != nil {
		fmt.Printf("   ‚ùå %v\n", err)
		if HasErrorCode(err, ErrorCodeSessionNotStarted) {
			fmt.Printf("   üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Å—Å–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∞—É–¥–∏–æ\n")
		}
	}

	// 3. –û—à–∏–±–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∞—É–¥–∏–æ
	fmt.Println("3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –∞—É–¥–∏–æ:")
	if err := simulateInvalidAudioSize(sessionID); err != nil {
		fmt.Printf("   ‚ùå %v\n", err)
		if audioErr, ok := err.(*AudioError); ok {
			fmt.Printf("   üí° –¢—Ä–µ–±—É–µ—Ç—Å—è %d –±–∞–π—Ç –¥–ª—è %v ms –ø—Ä–∏ %d Hz\n",
				audioErr.ExpectedSize, audioErr.Ptime.Milliseconds(), audioErr.SampleRate)
		}
	}

	// 4. –û—à–∏–±–∫–∞ DTMF
	fmt.Println("4. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ DTMF:")
	if err := simulateDTMFError(sessionID); err != nil {
		fmt.Printf("   ‚ùå %v\n", err)
		if dtmfErr, ok := err.(*DTMFError); ok {
			fmt.Printf("   üí° –°–∏–º–≤–æ–ª '%s' –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ 0-9, *, #, A-D\n",
				dtmfErr.Digit.String())
		}
	}

	// 5. –û—à–∏–±–∫–∞ RTP
	fmt.Println("5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ RTP:")
	if err := simulateRTPError(sessionID); err != nil {
		fmt.Printf("   ‚ùå %v\n", err)
		if rtpErr, ok := err.(*RTPError); ok {
			fmt.Printf("   üí° –ü—Ä–æ–±–ª–µ–º—ã —Å RTP —Å–µ—Å—Å–∏–µ–π '%s', SSRC: 0x%08X\n",
				rtpErr.RTPSessionID, rtpErr.SSRC)
		}
	}

	// 6. –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
	fmt.Println("6. –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫:")
	errors := []error{
		validateMediaConfig(sessionID, time.Millisecond*5),
		simulateAudioSendWhenInactive(sessionID),
		simulateInvalidAudioSize(sessionID),
		simulateDTMFError(sessionID),
		simulateRTPError(sessionID),
	}

	errorStats := make(map[MediaErrorCode]int)
	for _, err := range errors {
		if err != nil {
			if mediaErr, ok := err.(*MediaError); ok {
				errorStats[mediaErr.Code]++
			}
		}
	}

	fmt.Printf("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫:\n")
	for code, count := range errorStats {
		fmt.Printf("   - %s: %d —Ä–∞–∑(–∞)\n", code.String(), count)
	}

	return nil
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏

func validateMediaConfig(sessionID string, ptime time.Duration) error {
	if ptime < time.Millisecond*10 || ptime > time.Millisecond*40 {
		return &MediaError{
			Code:      ErrorCodeAudioTimingInvalid,
			Message:   fmt.Sprintf("ptime %v –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 10-40ms", ptime),
			SessionID: sessionID,
			Context: map[string]interface{}{
				"min_ptime":      time.Millisecond * 10,
				"max_ptime":      time.Millisecond * 40,
				"provided_ptime": ptime,
			},
		}
	}
	return nil
}

func simulateAudioSendWhenInactive(sessionID string) error {
	return &MediaError{
		Code:      ErrorCodeSessionNotStarted,
		Message:   "–ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏",
		SessionID: sessionID,
		Context: map[string]interface{}{
			"session_state": "stopped",
			"operation":     "send_audio",
		},
	}
}

func simulateInvalidAudioSize(sessionID string) error {
	return NewAudioError(
		ErrorCodeAudioSizeInvalid,
		sessionID,
		"—Ä–∞–∑–º–µ—Ä –∞—É–¥–∏–æ –±—É—Ñ–µ—Ä–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –∫–æ–¥–µ–∫–∞",
		PayloadTypePCMU,     // G.711 Œº-law
		160,                 // –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–ª—è 20ms @ 8kHz
		200,                 // –ø–æ–ª—É—á–µ–Ω–æ
		8000,                // sample rate
		time.Millisecond*20, // ptime
	)
}

func simulateDTMFError(sessionID string) error {
	return NewDTMFError(
		ErrorCodeDTMFInvalidDigit,
		sessionID,
		"–ø–æ–ª—É—á–µ–Ω –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π DTMF —Å–∏–º–≤–æ–ª",
		DTMFDigit('X'), // –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
		time.Millisecond*150,
	)
}

func simulateRTPError(sessionID string) error {
	networkErr := errors.New("connection timeout after 5 seconds")
	return WrapMediaError(
		ErrorCodeRTPSendFailed,
		sessionID,
		"–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å RTP –ø–∞–∫–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω—É—é –∞—É–¥–∏–æ —Å–µ—Å—Å–∏—é",
		networkErr,
	)
}

// ExampleErrorRecovery –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫
func ExampleErrorRecovery() {
	fmt.Println("\n=== –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫ ===")

	sessionID := "recovery-demo-789"

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
	testErrors := []error{
		&MediaError{Code: ErrorCodeSessionNotStarted, SessionID: sessionID, Message: "—Å–µ—Å—Å–∏—è –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"},
		NewAudioError(ErrorCodeAudioSizeInvalid, sessionID, "–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä",
			PayloadTypePCMU, 160, 120, 8000, time.Millisecond*20),
		NewDTMFError(ErrorCodeDTMFNotEnabled, sessionID, "DTMF –æ—Ç–∫–ª—é—á–µ–Ω",
			DTMF1, time.Millisecond*100),
		NewRTPError(ErrorCodeRTPSessionNotFound, sessionID, "RTP —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
			"backup-audio", 0x87654321, 2000, 320000),
		NewJitterBufferError(ErrorCodeJitterBufferFull, sessionID, "–±—É—Ñ–µ—Ä –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω",
			15, 15, time.Millisecond*100, 3),
	}

	for i, err := range testErrors {
		fmt.Printf("\n--- –û—à–∏–±–∫–∞ #%d ---\n", i+1)
		fmt.Printf("–ü—Ä–æ–±–ª–µ–º–∞: %v\n", err)

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
		var mediaErr *MediaError
		if AsMediaError(err, &mediaErr) {
			fmt.Printf("üîß –ö–æ–¥ –æ—à–∏–±–∫–∏: %d\n", mediaErr.Code)
			fmt.Printf("üìù Session ID: %s\n", mediaErr.SessionID)
			fmt.Printf("üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: %s\n", mediaErr.Message)
		}
	}
}

// RunErrorExamples –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫
func RunErrorExamples() {
	fmt.Println("üî• –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫ –º–µ–¥–∏–∞ —Å–ª–æ—è üî•")
	fmt.Println("=" + fmt.Sprintf("%50s", "") + "=")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã
	ExampleErrorHandling()

	if err := ExampleErrorsInMediaSession(); err != nil {
		fmt.Printf("–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–º–µ—Ä–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: %v\n", err)
	}

	ExampleErrorRecovery()

	fmt.Println("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –æ—à–∏–±–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!")
	fmt.Println("\nüìö –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –æ—à–∏–±–æ–∫:")
	fmt.Println("  ‚úì –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–¥—ã –æ—à–∏–±–æ–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏")
	fmt.Println("  ‚úì –ë–æ–≥–∞—Ç—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (session ID, codec, —Ä–∞–∑–º–µ—Ä—ã, timestamps)")
	fmt.Println("  ‚úì –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ü–µ–ø–æ—á–∫–∏ –æ—à–∏–±–æ–∫ (errors.Is/As)")
	fmt.Println("  ‚úì –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ—à–∏–±–æ–∫")
	fmt.Println("  ‚úì –£–¥–æ–±–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–æ–≤")
	fmt.Println("  ‚úì –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ")
	fmt.Println("  ‚úì –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏/VoIP –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
}
