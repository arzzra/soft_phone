package main

import (
	"context"
	"fmt"
	"log"
	"os"
	"os/signal"
	"syscall"
	"time"

	"github.com/arzzra/soft_phone/pkg/dialog"
	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/rtp"
	"github.com/arzzra/soft_phone/pkg/ua_media"
	"github.com/emiago/sipgo/sip"
)

func main() {
	fmt.Println("üéØ UA Media Package - Simple Call Example")
	fmt.Println("========================================")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –æ—Ç–º–µ–Ω–æ–π
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// –°–æ–∑–¥–∞–µ–º SIP —Å—Ç–µ–∫
	stackConfig := &dialog.StackConfig{
		Transport: &dialog.TransportConfig{
			Protocol: "udp",
			Address:  "0.0.0.0",
			Port:     5060,
		},
		UserAgent:  "UA-Media-Example/1.0",
		MaxDialogs: 100,
	}

	stack, err := dialog.NewStack(stackConfig)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SIP —Å—Ç–µ–∫–∞: %v", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–µ–∫
	go func() {
		if err := stack.Start(ctx); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å—Ç–µ–∫–∞: %v", err)
		}
	}()

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
	time.Sleep(100 * time.Millisecond)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è UA Media
	uaConfig := ua_media.DefaultConfig()
	uaConfig.Stack = stack
	uaConfig.SessionName = "Simple Call Example"
	uaConfig.UserAgent = "UA-Media-Example/1.0"

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–µ–¥–∏–∞
	uaConfig.MediaConfig.PayloadType = media.PayloadTypePCMU
	uaConfig.MediaConfig.Direction = media.DirectionSendRecv
	uaConfig.MediaConfig.DTMFEnabled = true

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–ª–±—ç–∫–∏
	uaConfig.Callbacks = ua_media.SessionCallbacks{
		OnStateChanged: func(oldState, newState dialog.DialogState) {
			fmt.Printf("üìû –°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: %s ‚Üí %s\n", oldState, newState)
		},

		OnMediaStarted: func() {
			fmt.Println("üéµ –ú–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞")
		},

		OnMediaStopped: func() {
			fmt.Println("üõë –ú–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
		},

		OnAudioReceived: func(data []byte, pt media.PayloadType, ptime time.Duration) {
			fmt.Printf("üîä –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ: %d –±–∞–π—Ç, codec %d, ptime %v\n", len(data), pt, ptime)
		},

		OnDTMFReceived: func(event media.DTMFEvent) {
			fmt.Printf("‚òéÔ∏è  DTMF: %s (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v)\n", event.Digit, event.Duration)
		},

		OnError: func(err error) {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞: %v\n", err)
		},
	}

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤
	stack.OnIncomingDialog(func(incomingDialog dialog.IDialog) {
		fmt.Println("\nüìû –í—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤!")

		// –°–æ–∑–¥–∞–µ–º UA Media —Å–µ—Å—Å–∏—é –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
		session, err := ua_media.NewIncomingCall(ctx, incomingDialog, uaConfig)
		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ö–æ–¥—è—â–µ–π —Å–µ—Å—Å–∏–∏: %v", err)
			return
		}

		// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
		go func() {
			time.Sleep(2 * time.Second)
			fmt.Println("‚úÖ –ü—Ä–∏–Ω–∏–º–∞–µ–º –≤—ã–∑–æ–≤...")

			if err := session.Accept(ctx); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –≤—ã–∑–æ–≤–∞: %v", err)
				return
			}

			// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ DTMF
			go func() {
				time.Sleep(5 * time.Second)
				fmt.Println("üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DTMF –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 1234")

				digits := []rtp.DTMFDigit{
					rtp.DTMFDigit1, rtp.DTMFDigit2,
					rtp.DTMFDigit3, rtp.DTMFDigit4,
				}

				for _, digit := range digits {
					if err := session.SendDTMF(digit, 160*time.Millisecond); err != nil {
						log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DTMF: %v", err)
					}
					time.Sleep(500 * time.Millisecond)
				}
			}()
		}()
	})

	// –ü—Ä–∏–º–µ—Ä –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≤—ã–∑–æ–≤–∞
	if len(os.Args) > 1 {
		targetURI := os.Args[1]
		fmt.Printf("\nüìû –ò—Å—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤ –Ω–∞: %s\n", targetURI)

		// –ü–∞—Ä—Å–∏–º SIP URI
		sipURI, err := ua_media.ParseSIPURI(targetURI)
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URI: %v", err)
		}

		// –°–æ–∑–¥–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–π –≤—ã–∑–æ–≤
		session, err := ua_media.NewOutgoingCall(ctx, sipURI, uaConfig)
		if err != nil {
			log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≤—ã–∑–æ–≤–∞: %v", err)
		}

		// –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
		fmt.Println("‚è≥ –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç...")
		if err := session.WaitAnswer(ctx); err != nil {
			log.Printf("–í—ã–∑–æ–≤ –æ—Ç–∫–ª–æ–Ω–µ–Ω: %v", err)
			session.Close()
			return
		}

		fmt.Println("‚úÖ –í—ã–∑–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

		// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ
		go func() {
			ticker := time.NewTicker(20 * time.Millisecond)
			defer ticker.Stop()

			// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–∏—à–∏–Ω—É (160 –±–∞–π—Ç –¥–ª—è 20–º—Å PCMU)
			silenceData := make([]byte, 160)

			for {
				select {
				case <-ticker.C:
					if session.State() == dialog.DialogStateEstablished {
						if err := session.SendAudio(silenceData); err != nil {
							log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: %v", err)
							return
						}
					}
				case <-ctx.Done():
					return
				}
			}
		}()

		// –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
		go func() {
			time.Sleep(30 * time.Second)
			if session.State() == dialog.DialogStateEstablished {
				fmt.Println("‚è∞ –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–∑–æ–≤ –ø–æ —Ç–∞–π–º–µ—Ä—É...")
				if err := session.Bye(ctx); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–∑–æ–≤–∞: %v", err)
				}
			}
		}()
	} else {
		fmt.Println("\nüí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
		fmt.Println("   - –î–ª—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –≤—ã–∑–æ–≤–∞: go run main.go sip:user@host:port")
		fmt.Println("   - –î–ª—è –ø—Ä–∏–µ–º–∞ –≤—Ö–æ–¥—è—â–∏—Ö: go run main.go")
		fmt.Println("\n‚è≥ –û–∂–∏–¥–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –≤—ã–∑–æ–≤—ã –Ω–∞ –ø–æ—Ä—Ç—É 5060...")
	}

	// –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	<-sigChan
	fmt.Println("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")

	// Graceful shutdown
	shutdownCtx, shutdownCancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer shutdownCancel()

	if err := stack.Shutdown(shutdownCtx); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç–µ–∫–∞: %v", err)
	}

	fmt.Println("üëã –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω")
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

// exampleWithCallbacks –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–±—ç–∫–æ–≤
func exampleWithCallbacks() {
	config := ua_media.DefaultConfig()

	config.Callbacks = ua_media.SessionCallbacks{
		OnEvent: func(event ua_media.SessionEvent) {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π –≤ –æ–¥–Ω–æ–º –º–µ—Å—Ç–µ
			switch event.Type {
			case ua_media.EventStateChanged:
				state := event.Data.(dialog.DialogState)
				fmt.Printf("–°–æ–±—ã—Ç–∏–µ: —Å–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ %s\n", state)

			case ua_media.EventSDPReceived:
				sdp := event.Data.(*sdp.SessionDescription)
				fmt.Printf("–°–æ–±—ã—Ç–∏–µ: –ø–æ–ª—É—á–µ–Ω SDP —Å %d –º–µ–¥–∏–∞\n", len(sdp.MediaDescriptions))

			case ua_media.EventError:
				fmt.Printf("–°–æ–±—ã—Ç–∏–µ: –æ—à–∏–±–∫–∞ %v\n", event.Error)
			}
		},

		OnRawPacketReceived: func(packet *rtp.Packet) {
			// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—ã—Ä—ã—Ö RTP –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∏–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
			fmt.Printf("RTP –ø–∞–∫–µ—Ç: seq=%d, timestamp=%d, payload=%d –±–∞–π—Ç\n",
				packet.SequenceNumber, packet.Timestamp, len(packet.Payload))
		},
	}
}

// exampleWithExtendedConfig –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func exampleWithExtendedConfig() {
	config := ua_media.DefaultExtendedConfig()

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è
	config.QoS.DSCP = 46 // EF –¥–ª—è VoIP
	config.QoS.JitterBufferSize = 100 * time.Millisecond
	config.QoS.PacketLossConcealment = true

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	config.Security.SRTP = true
	config.Security.SRTPProfile = "AES_CM_128_HMAC_SHA1_80"

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–∏—Å–∏
	config.RecordingEnabled = true
	config.RecordingPath = "./recordings"

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–¥–∏–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
	config.MediaPreferences.PreferredCodec = rtp.PayloadTypeG722
	config.MediaPreferences.EchoCancellation = true
	config.MediaPreferences.NoiseSuppression = true
}
