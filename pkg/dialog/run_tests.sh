#!/bin/bash

# –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç-—Ä–∞–Ω–Ω–µ—Ä –¥–ª—è dialog –ø–∞–∫–µ—Ç–∞
# –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å—é

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PKG_PATH="./pkg/dialog/"
TIMEOUT_SHORT="30s"
TIMEOUT_MEDIUM="2m"
TIMEOUT_LONG="5m"
LOG_DIR="test_logs"

# –§—É–Ω–∫—Ü–∏–∏
print_header() {
    echo -e "\n${BLUE}================================================${NC}"
    echo -e "${BLUE} $1${NC}"
    echo -e "${BLUE}================================================${NC}\n"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

run_test_category() {
    local category="$1"
    local test_pattern="$2"
    local timeout="$3"
    local extra_flags="$4"
    local log_file="${LOG_DIR}/${category}.log"
    
    echo -e "\n${YELLOW}–ó–∞–ø—É—Å–∫ $category —Ç–µ—Å—Ç–æ–≤...${NC}"
    
    mkdir -p "$LOG_DIR"
    
    if go test -v -timeout="$timeout" $extra_flags -run="$test_pattern" "$PKG_PATH" 2>&1 | tee "$log_file"; then
        print_success "$category —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã"
        return 0
    else
        print_error "$category —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–µ–Ω—ã"
        return 1
    fi
}

run_benchmark() {
    local bench_pattern="$1"
    local timeout="$2"
    local log_file="${LOG_DIR}/benchmark_${bench_pattern}.log"
    
    echo -e "\n${YELLOW}–ó–∞–ø—É—Å–∫ –±–µ–Ω—á–º–∞—Ä–∫–∞ $bench_pattern...${NC}"
    
    mkdir -p "$LOG_DIR"
    
    if go test -bench="$bench_pattern" -benchmem -timeout="$timeout" "$PKG_PATH" 2>&1 | tee "$log_file"; then
        print_success "–ë–µ–Ω—á–º–∞—Ä–∫ $bench_pattern –∑–∞–≤–µ—Ä—à–µ–Ω"
        return 0
    else
        print_warning "–ë–µ–Ω—á–º–∞—Ä–∫ $bench_pattern –∑–∞–≤–µ—Ä—à–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"
        return 1
    fi
}

check_race_conditions() {
    echo -e "\n${YELLOW}–ü—Ä–æ–≤–µ—Ä–∫–∞ race conditions...${NC}"
    local log_file="${LOG_DIR}/race_detection.log"
    
    mkdir -p "$LOG_DIR"
    
    if go test -race -timeout="$TIMEOUT_MEDIUM" -run="TestRaceConditions" "$PKG_PATH" 2>&1 | tee "$log_file"; then
        print_success "Race conditions –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã"
        return 0
    else
        print_error "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã race conditions!"
        return 1
    fi
}

generate_report() {
    echo -e "\n${BLUE}–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...${NC}"
    local report_file="${LOG_DIR}/test_report.md"
    
    cat > "$report_file" << EOF
# –û—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Dialog –ø–∞–∫–µ—Ç–∞

–î–∞—Ç–∞: $(date)
Go –≤–µ—Ä—Å–∏—è: $(go version)

## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

### 1. Thread Safety —Ç–µ—Å—Ç—ã
$(if [ -f "${LOG_DIR}/thread_safety.log" ]; then echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω—ã"; else echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã"; fi)

### 2. Sharded Map —Ç–µ—Å—Ç—ã  
$(if [ -f "${LOG_DIR}/sharded_map.log" ]; then echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω—ã"; else echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã"; fi)

### 3. ID Generator —Ç–µ—Å—Ç—ã
$(if [ -f "${LOG_DIR}/id_generator.log" ]; then echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω—ã"; else echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã"; fi)

### 4. Concurrent Load —Ç–µ—Å—Ç—ã
$(if [ -f "${LOG_DIR}/concurrent_load.log" ]; then echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω—ã"; else echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã"; fi)

### 5. Race Detection
$(if [ -f "${LOG_DIR}/race_detection.log" ]; then echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω—ã"; else echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã"; fi)

### 6. Production —Ç–µ—Å—Ç—ã
$(if [ -f "${LOG_DIR}/production.log" ]; then echo "‚úÖ –ü—Ä–æ–π–¥–µ–Ω—ã"; else echo "‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω—ã"; fi)

## –§–∞–π–ª—ã –ª–æ–≥–æ–≤
EOF

    for log in "${LOG_DIR}"/*.log; do
        if [ -f "$log" ]; then
            echo "- $(basename "$log")" >> "$report_file"
        fi
    done
    
    echo -e "\n${GREEN}–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $report_file${NC}"
}

main() {
    print_header "–ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DIALOG –ü–ê–ö–ï–¢–ê"
    
    local start_time=$(date +%s)
    local failed_tests=0
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
    rm -rf "$LOG_DIR"
    
    echo "–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–∞: $PKG_PATH"
    echo "–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤: $LOG_DIR/"
    
    # 1. Thread Safety —Ç–µ—Å—Ç—ã
    print_header "1. THREAD SAFETY –¢–ï–°–¢–´"
    if ! run_test_category "thread_safety" "TestThreadSafe" "$TIMEOUT_SHORT" "-race"; then
        ((failed_tests++))
    fi
    
    # 2. Sharded Map —Ç–µ—Å—Ç—ã
    print_header "2. SHARDED MAP –¢–ï–°–¢–´"
    if ! run_test_category "sharded_map" "TestShardedMap" "$TIMEOUT_SHORT" "-race"; then
        ((failed_tests++))
    fi
    
    # 3. ID Generator —Ç–µ—Å—Ç—ã
    print_header "3. ID GENERATOR –¢–ï–°–¢–´"
    if ! run_test_category "id_generator" "TestIDGenerator" "$TIMEOUT_SHORT" "-race"; then
        ((failed_tests++))
    fi
    
    # 4. Concurrent Load —Ç–µ—Å—Ç—ã
    print_header "4. CONCURRENT LOAD –¢–ï–°–¢–´"
    if ! run_test_category "concurrent_load" "TestHighLoad|TestConcurrent" "$TIMEOUT_LONG" "-race"; then
        ((failed_tests++))
    fi
    
    # 5. Race Condition Detection
    print_header "5. RACE CONDITION DETECTION"
    if ! check_race_conditions; then
        ((failed_tests++))
    fi
    
    # 6. Production —Ç–µ—Å—Ç—ã (–µ—Å–ª–∏ –Ω–µ short mode)
    if [[ "$1" != "--short" ]]; then
        print_header "6. PRODUCTION SIMULATION –¢–ï–°–¢–´"
        if ! run_test_category "production" "TestProduction|TestStress|TestLongRunning" "$TIMEOUT_LONG" ""; then
            ((failed_tests++))
        fi
    else
        print_warning "Production —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã (--short mode)"
    fi
    
    # 7. –ë–µ–Ω—á–º–∞—Ä–∫–∏
    print_header "7. PERFORMANCE BENCHMARKS"
    run_benchmark "BenchmarkShardedMap" "$TIMEOUT_MEDIUM" || true
    run_benchmark "BenchmarkIDGenerator" "$TIMEOUT_MEDIUM" || true
    run_benchmark "BenchmarkConcurrent" "$TIMEOUT_MEDIUM" || true
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    generate_report
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    print_header "–ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´"
    echo "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${duration}s"
    echo "–ü—Ä–æ–≤–∞–ª–µ–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–µ—Å—Ç–æ–≤: $failed_tests"
    
    if [ $failed_tests -eq 0 ]; then
        print_success "–í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!"
        echo -e "\n${GREEN}üéâ Dialog –ø–∞–∫–µ—Ç –≥–æ—Ç–æ–≤ –∫ production –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!${NC}"
        exit 0
    else
        print_error "–û–ë–ù–ê–†–£–ñ–ï–ù–´ –ü–†–û–ë–õ–ï–ú–´ –í $failed_tests –ö–ê–¢–ï–ì–û–†–ò–Ø–•"
        echo -e "\n${RED}üö® –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –ø–µ—Ä–µ–¥ production!${NC}"
        echo "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥–∞—Ö: $LOG_DIR/"
        exit 1
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [--short] [--help]"
    echo ""
    echo "–û–ø—Ü–∏–∏:"
    echo "  --short    –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –¥–æ–ª–≥–∏–µ production —Ç–µ—Å—Ç—ã"
    echo "  --help     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"
    echo "  $0 --short        # –ë—ã—Å—Ç—Ä–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è CI/CD"
    exit 0
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ä–µ–¥—ã
if ! command -v go &> /dev/null; then
    print_error "Go –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ PATH"
    exit 1
fi

if [ ! -d "$PKG_PATH" ]; then
    print_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $PKG_PATH –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    exit 1
fi

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"