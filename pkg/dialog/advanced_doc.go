// Copyright (c) 2024 Soft Phone contributors
// Use of this source code is governed by a MIT-style license

/*
Расширенная документация по пакету dialog.

# Архитектура пакета

Пакет dialog построен на основе следующих принципов:

1. Разделение ответственности между компонентами
2. Использование интерфейсов для абстракции
3. Потокобезопасность всех публичных API
4. Явная обработка ошибок
5. Контекстное управление операциями

# Компоненты и их взаимодействие

## UACUAS (User Agent Client/Server)

Центральный компонент, управляющий всеми диалогами:
  - Создает и управляет транспортами (UDP, TCP, WS)
  - Маршрутизирует входящие SIP сообщения к диалогам
  - Предоставляет фабричные методы для создания диалогов
  - Управляет глобальными настройками и профилями

## Dialog

Представляет отдельный SIP диалог:
  - Управляет состоянием через конечный автомат (FSM)
  - Отслеживает параметры диалога (Call-ID, теги, CSeq)
  - Обрабатывает входящие и исходящие транзакции
  - Хранит историю переходов состояний
  - Управляет SDP и другими телами сообщений

## TX (Transaction)

Обертка над SIP транзакцией:
  - Предоставляет унифицированный API для клиентских и серверных транзакций
  - Управляет потоком ответов через каналы
  - Обрабатывает тела сообщений
  - Поддерживает отмену и таймауты

# Управление памятью и ресурсами

## Жизненный цикл объектов

1. UACUAS создается один раз на приложение
2. Dialog создается для каждого вызова
3. TX создается для каждой транзакции в диалоге
4. Все ресурсы освобождаются при вызове Stop() или Close()

## Управление горутинами

Пакет создает горутины для:
  - Обработки транспортов (по одной на транспорт)
  - Обработки ответов в клиентских транзакциях
  - Обработки событий конечного автомата

Все горутины корректно завершаются при остановке компонентов.

# Обработка SIP сообщений

## Входящие сообщения

Поток обработки:
1. Транспорт получает SIP сообщение
2. UACUAS определяет тип сообщения и находит диалог
3. Создается транзакция TX
4. Вызывается соответствующий обработчик
5. Приложение получает уведомление через callback

## Исходящие сообщения

Поток отправки:
1. Приложение вызывает метод диалога
2. Dialog создает SIP запрос с правильными заголовками
3. Запрос передается в UACUAS для отправки
4. Создается транзакция для отслеживания ответов
5. Ответы доставляются через канал в TX

# Расширенные возможности

## Работа с маршрутизацией

Dialog поддерживает полную маршрутизацию SIP:
  - Record-Route для прохождения через прокси
  - Route set для последующих запросов
  - Loose routing согласно RFC 3261

## Поддержка NAT

Пакет учитывает NAT traversal:
  - Использование received и rport параметров
  - Поддержка STUN/TURN (через внешние библиотеки)
  - Keep-alive для TCP соединений

## Безопасность

Рекомендации по безопасности:
  - Используйте TLS/WSS транспорты для шифрования
  - Валидируйте все входящие SIP URI
  - Ограничивайте размер SDP и других тел
  - Используйте таймауты для всех операций

# Интеграция с медиа компонентами

## Типичный поток установки медиа

1. Dialog получает SDP offer в INVITE
2. OnBody callback передает SDP в media_sdp
3. media_sdp парсит SDP и извлекает параметры
4. Создается RTP сессия через pkg/rtp
5. Создается медиа сессия через pkg/media
6. Генерируется SDP answer
7. Answer отправляется через Dialog

## Обработка re-INVITE для медиа

Re-INVITE может использоваться для:
  - Изменения кодеков
  - Добавления/удаления медиа потоков
  - Изменения направления медиа (sendonly/recvonly/sendrecv)
  - Обновления ключей шифрования

# Оптимизация производительности

## Рекомендации

1. Переиспользуйте UACUAS для всех диалогов
2. Используйте контексты с таймаутами
3. Обрабатывайте события асинхронно
4. Минимизируйте блокирующие операции в callbacks
5. Используйте буферизованные каналы где возможно

## Метрики и мониторинг

Рекомендуется отслеживать:
  - Количество активных диалогов
  - Время установления вызова
  - Процент успешных/неуспешных вызовов
  - Использование памяти и горутин
  - Задержки в обработке сообщений

# Обработка ошибок

## Типы ошибок

1. Транспортные ошибки - проблемы с сетью
2. Протокольные ошибки - нарушение SIP RFC
3. Ошибки состояния - недопустимые операции
4. Таймауты - превышение времени ожидания
5. Ошибки ресурсов - нехватка памяти/портов

## Стратегии восстановления

- Автоматический переход на другой транспорт
- Повторная отправка с экспоненциальной задержкой
- Graceful degradation при недоступности функций
- Логирование для последующего анализа

# Тестирование

## Модульное тестирование

Пакет включает mock транспорт для тестирования:
  - mockTransport позволяет имитировать сеть
  - Можно внедрять ошибки и задержки
  - Полный контроль над SIP сообщениями

## Интеграционное тестирование

Рекомендуется тестировать:
  - Полные сценарии вызовов
  - Обработку ошибок и таймаутов  
  - Параллельные вызовы
  - Нагрузочное тестирование

# Совместимость

Пакет совместим с:
  - RFC 3261 (SIP)
  - RFC 3262 (PRACK)
  - RFC 3311 (UPDATE)
  - RFC 3515 (REFER)
  - RFC 3891 (Replaces)
  - RFC 4028 (Session Timers)

# Известные ограничения

1. TLS и WSS транспорты требуют дополнительной настройки
2. Не все SIP методы полностью реализованы
3. Требуется внешняя библиотека для STUN/TURN
4. Ограниченная поддержка IPv6

# Дорожная карта

Планируемые улучшения:
  - Полная поддержка TLS/WSS
  - Улучшенная обработка NAT
  - Поддержка SIP присутствия и подписок
  - Интеграция с большим количеством кодеков
  - Улучшенные метрики и трассировка
*/
package dialog