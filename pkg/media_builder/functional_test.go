package media_builder_test

import (
	"fmt"
	"math"
	"sync"
	"testing"
	"time"

	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/media_builder"
	"github.com/arzzra/soft_phone/pkg/rtp"
	"github.com/pion/sdp/v3"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// TestResults —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
type TestResults struct {
	mu                  sync.Mutex
	callerAudioReceived int
	calleeAudioReceived int
	receivedDTMFDigits  []media.DTMFDigit
	testStartTime       time.Time
}

// incrementCallerAudio —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —É caller
func (tr *TestResults) incrementCallerAudio(data []byte) {
	tr.mu.Lock()
	defer tr.mu.Unlock()
	tr.callerAudioReceived++
}

// incrementCalleeAudio —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —É callee
func (tr *TestResults) incrementCalleeAudio(data []byte) {
	tr.mu.Lock()
	defer tr.mu.Unlock()
	tr.calleeAudioReceived++
}

// getStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (tr *TestResults) getStats() (int, int, int, int, []media.DTMFDigit) {
	tr.mu.Lock()
	defer tr.mu.Unlock()
	// –î–ª—è DTMF –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö
	totalDTMF := len(tr.receivedDTMFDigits)
	return tr.callerAudioReceived, tr.calleeAudioReceived, totalDTMF / 2, totalDTMF - totalDTMF/2, tr.receivedDTMFDigits
}

// TestFullMediaBuilderIntegration –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç media_builder –ø–∞–∫–µ—Ç–∞
func TestFullMediaBuilderIntegration(t *testing.T) {
	t.Log("üèóÔ∏è –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ media_builder üèóÔ∏è")

	results := &TestResults{
		testStartTime: time.Now(),
	}

	// –°–æ–∑–¥–∞–µ–º BuilderManager
	config := media_builder.DefaultConfig()
	config.LocalHost = "127.0.0.1"
	config.MinPort = 6000
	config.MaxPort = 6100
	config.MaxConcurrentBuilders = 50
	config.DefaultPayloadTypes = []uint8{0, 8} // PCMU, PCMA

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback'–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–µ–¥–∏–∞ —Å–æ–±—ã—Ç–∏–π
	config.DefaultMediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration, sessionID string) {
		t.Logf("üéµ [%s] –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ: %d –±–∞–π—Ç, payload type %d, ptime %v", sessionID, len(data), pt, ptime)
		// sessionID –∑–¥–µ—Å—å - —ç—Ç–æ RTP session ID, –Ω–∞–ø—Ä–∏–º–µ—Ä "caller_audio_0"
		if sessionID == "caller_audio_0" {
			results.incrementCallerAudio(data)
		} else if sessionID == "callee_audio_0" {
			results.incrementCalleeAudio(data)
		}
	}

	config.DefaultMediaConfig.OnDTMFReceived = func(event media.DTMFEvent, sessionID string) {
		t.Logf("[%s] –ü–æ–ª—É—á–µ–Ω DTMF: %s, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v", sessionID, event.Digit, event.Duration)
		// sessionID –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –¥–ª—è DTMF —Å–æ–±—ã—Ç–∏–π
		// DTMF –æ—Ç caller –ø–æ–ª—É—á–∞–µ—Ç callee
		results.mu.Lock()
		results.receivedDTMFDigits = append(results.receivedDTMFDigits, event.Digit)
		results.mu.Unlock()
	}

	config.DefaultMediaConfig.OnMediaError = func(err error, sessionID string) {
		t.Logf("[%s] –û—à–∏–±–∫–∞ –º–µ–¥–∏–∞: %v", sessionID, err)
	}

	// –í–ê–ñ–ù–û: –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OnRawPacketReceived, —á—Ç–æ–±—ã –ø–∞–∫–µ—Ç—ã –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —á–µ—Ä–µ–∑ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
	// –∏ –≤—ã–∑—ã–≤–∞–ª–∏—Å—å OnAudioReceived callbacks

	manager, err := media_builder.NewBuilderManager(config)
	require.NoError(t, err, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å BuilderManager")
	defer func() {
		err := manager.Shutdown()
		assert.NoError(t, err)
	}()

	// –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ Builder (Caller)
	t.Log("–≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ Caller Builder...")
	callerBuilder, offer, err := createCallerBuilder(t, manager, results)
	require.NoError(t, err, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Caller Builder")
	require.NotNil(t, callerBuilder)
	require.NotNil(t, offer)

	t.Logf("‚úÖ Caller —Å–æ–∑–¥–∞–Ω, SDP offer —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
	t.Logf("Offer —Å–æ–¥–µ—Ä–∂–∏—Ç %d –º–µ–¥–∏–∞ –æ–ø–∏—Å–∞–Ω–∏–π", len(offer.MediaDescriptions))

	// –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ Builder (Callee) –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ offer
	t.Log("–≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ Callee Builder –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ offer...")
	calleeBuilder, answer, err := createCalleeBuilder(t, manager, results, offer)
	require.NoError(t, err, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Callee Builder")
	require.NotNil(t, calleeBuilder)
	require.NotNil(t, answer)

	t.Logf("‚úÖ Callee —Å–æ–∑–¥–∞–Ω, SDP answer —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
	t.Logf("Answer —Å–æ–¥–µ—Ä–∂–∏—Ç %d –º–µ–¥–∏–∞ –æ–ø–∏—Å–∞–Ω–∏–π", len(answer.MediaDescriptions))

	// –≠—Ç–∞–ø 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ SDP answer –≤ caller
	t.Log("–≠—Ç–∞–ø 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ SDP answer –≤ caller...")
	err = callerBuilder.ProcessAnswer(answer)
	require.NoError(t, err, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å SDP answer –≤ caller")

	t.Log("‚úÖ SDP answer –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ caller")

	// –≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
	t.Log("–≠—Ç–∞–ø 4: –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤...")
	err = setupTransports(t, callerBuilder, calleeBuilder, results)
	require.NoError(t, err, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã")

	t.Log("‚úÖ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã —Å–æ–∑–¥–∞–Ω—ã –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")

	// –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
	debugTransportAddresses(t, callerBuilder, calleeBuilder)

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
	time.Sleep(500 * time.Millisecond)

	// –≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
	t.Log("–≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π...")
	checkMediaSessions(t, callerBuilder, calleeBuilder)

	// –≠—Ç–∞–ø 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —Ç—Ä–∞—Ñ–∏–∫–∞
	t.Log("–≠—Ç–∞–ø 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —Ç—Ä–∞—Ñ–∏–∫–∞...")
	err = testAudioExchange(t, callerBuilder, calleeBuilder, results)
	if err != nil {
		t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ: %v", err)
	}

	// –≠—Ç–∞–ø 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DTMF
	t.Log("–≠—Ç–∞–ø 7: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DTMF...")
	err = testDTMFExchange(t, callerBuilder, calleeBuilder, results)
	if err != nil {
		t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ DTMF: %v", err)
	}

	// –≠—Ç–∞–ø 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	t.Log("–≠—Ç–∞–ø 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
	verifyStatistics(t, manager, callerBuilder, calleeBuilder, results)

	// –≠—Ç–∞–ø 9: –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
	t.Log("–≠—Ç–∞–ø 9: –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
	err = cleanupResources(t, manager)
	require.NoError(t, err, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ä–µ—Å—É—Ä—Å–æ–≤")

	t.Log("üéâ –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}

// createCallerBuilder —Å–æ–∑–¥–∞–µ—Ç Builder –¥–ª—è caller –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SDP offer
func createCallerBuilder(t *testing.T, manager media_builder.BuilderManager, results *TestResults) (media_builder.Builder, *sdp.SessionDescription, error) {
	// –°–æ–∑–¥–∞–µ–º builder
	callerBuilder, err := manager.CreateBuilder("caller")
	if err != nil {
		return nil, nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å builder: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º SDP offer
	offer, err := callerBuilder.CreateOffer()
	if err != nil {
		return nil, nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SDP offer: %w", err)
	}

	return callerBuilder, offer, nil
}

// createCalleeBuilder —Å–æ–∑–¥–∞–µ—Ç Builder –¥–ª—è callee –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç offer
func createCalleeBuilder(t *testing.T, manager media_builder.BuilderManager, results *TestResults, offer *sdp.SessionDescription) (media_builder.Builder, *sdp.SessionDescription, error) {
	// –°–æ–∑–¥–∞–µ–º builder
	calleeBuilder, err := manager.CreateBuilder("callee")
	if err != nil {
		return nil, nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å builder: %w", err)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º offer
	err = calleeBuilder.ProcessOffer(offer)
	if err != nil {
		return nil, nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å SDP offer: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º answer
	answer, err := calleeBuilder.CreateAnswer()
	if err != nil {
		return nil, nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SDP answer: %w", err)
	}

	return calleeBuilder, answer, nil
}

// setupTransports —Å–æ–∑–¥–∞–µ—Ç –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –¥–ª—è –æ–±–æ–∏—Ö builder'–æ–≤
func setupTransports(t *testing.T, callerBuilder, calleeBuilder media_builder.Builder, results *TestResults) error {
	// –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	callerMedia := callerBuilder.GetMediaSession()
	calleeMedia := calleeBuilder.GetMediaSession()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
	if callerMedia != nil {
		state := callerMedia.GetState()
		t.Logf("Caller media session state: %v", state)
		// –ú–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã –≤ createAllMediaResources
		if state == media.MediaStateActive {
			t.Log("‚úÖ Caller media session —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞")
		} else if state == media.MediaStateIdle {
			t.Log("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Caller media session –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ idle")
		}
	}

	if calleeMedia != nil {
		state := calleeMedia.GetState()
		t.Logf("Callee media session state: %v", state)
		// –ú–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–∂–µ –∑–∞–ø—É—â–µ–Ω—ã –≤ createAllMediaResources
		if state == media.MediaStateActive {
			t.Log("‚úÖ Callee media session —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞")
		} else if state == media.MediaStateIdle {
			t.Log("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Callee media session –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ idle")
		}
	}

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞—Ö –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RTP —Å–µ—Å—Å–∏–π
	callerStreams := callerBuilder.GetMediaStreams()
	calleeStreams := calleeBuilder.GetMediaStreams()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ RTP —Å–µ—Å—Å–∏–π –¥–ª—è caller
	for _, stream := range callerStreams {
		if stream.RTPSession != nil {
			if session, ok := stream.RTPSession.(*rtp.Session); ok {
				state := session.GetState()
				t.Logf("Caller RTP session %s state: %v, SSRC: %d", 
					stream.StreamID, state, session.GetSSRC())
				
				// RTP —Å–µ—Å—Å–∏–∏ —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω—ã –≤ createAllMediaResources
				if state != rtp.SessionStateActive {
					t.Logf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Caller RTP —Å–µ—Å—Å–∏—è %s –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", stream.StreamID)
				}
			}
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ RTP —Å–µ—Å—Å–∏–π –¥–ª—è callee
	for _, stream := range calleeStreams {
		if stream.RTPSession != nil {
			if session, ok := stream.RTPSession.(*rtp.Session); ok {
				state := session.GetState()
				t.Logf("Callee RTP session %s state: %v, SSRC: %d", 
					stream.StreamID, state, session.GetSSRC())
				
				// RTP —Å–µ—Å—Å–∏–∏ —É–∂–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω—ã –≤ createAllMediaResources
				if state != rtp.SessionStateActive {
					t.Logf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: Callee RTP —Å–µ—Å—Å–∏—è %s –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", stream.StreamID)
				}
			}
		}
	}

	return nil
}

// checkMediaSessions –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
func checkMediaSessions(t *testing.T, callerBuilder, calleeBuilder media_builder.Builder) {
	callerMedia := callerBuilder.GetMediaSession()
	calleeMedia := calleeBuilder.GetMediaSession()

	require.NotNil(t, callerMedia, "Caller media session –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
	require.NotNil(t, calleeMedia, "Callee media session –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	callerStats := callerMedia.GetStatistics()
	calleeStats := calleeMedia.GetStatistics()

	t.Logf("Caller media session stats: %+v", callerStats)
	t.Logf("Callee media session stats: %+v", calleeStats)
	
	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è RTP —Å–µ—Å—Å–∏–π
	callerStreams := callerBuilder.GetMediaStreams()
	calleeStreams := calleeBuilder.GetMediaStreams()
	
	t.Logf("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–æ–≤ - Caller: %d, Callee: %d", 
		len(callerStreams), len(calleeStreams))
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º RTP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
	for i, stream := range callerStreams {
		if stream.RTPSession != nil {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º type assertion –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
			if session, ok := stream.RTPSession.(*rtp.Session); ok {
				rtpStats := session.GetStatistics()
				t.Logf("Caller stream %d (%s) RTP stats: %+v", i, stream.StreamID, rtpStats)
			}
		}
	}
	
	for i, stream := range calleeStreams {
		if stream.RTPSession != nil {
			// –ò—Å–ø–æ–ª—å–∑—É–µ–º type assertion –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
			if session, ok := stream.RTPSession.(*rtp.Session); ok {
				rtpStats := session.GetStatistics()
				t.Logf("Callee stream %d (%s) RTP stats: %+v", i, stream.StreamID, rtpStats)
			}
		}
	}
}

// testAudioExchange —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–º–µ–Ω –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–º–∏
func testAudioExchange(t *testing.T, callerBuilder, calleeBuilder media_builder.Builder, results *TestResults) error {
	t.Log("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –æ–±–º–µ–Ω–∞...")

	// –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	callerMedia := callerBuilder.GetMediaSession()
	calleeMedia := calleeBuilder.GetMediaSession()

	if callerMedia == nil || calleeMedia == nil {
		return fmt.Errorf("–º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
	testAudio1 := generateTestAudio(160, 440.0) // 20ms, 440Hz
	testAudio2 := generateTestAudio(160, 880.0) // 20ms, 880Hz
	testAudio3 := generateTestAudio(160, 220.0) // 20ms, 220Hz

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –æ—Ç caller –∫ callee
	t.Log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –æ—Ç caller –∫ callee...")
	for i := 0; i < 3; i++ {
		var audioData []byte
		switch i {
		case 0:
			audioData = testAudio1
		case 1:
			audioData = testAudio2
		case 2:
			audioData = testAudio3
		}

		err := callerMedia.SendAudio(audioData)
		if err != nil {
			t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –æ—Ç caller #%d: %v", i+1, err)
		} else {
			t.Logf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç caller->callee #%d (%d –±–∞–π—Ç)", i+1, len(audioData))
		}
		time.Sleep(25 * time.Millisecond)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
	time.Sleep(200 * time.Millisecond)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –æ—Ç callee –∫ caller
	t.Log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –æ—Ç callee –∫ caller...")
	for i := 0; i < 2; i++ {
		var audioData []byte
		if i == 0 {
			audioData = testAudio2
		} else {
			audioData = testAudio1
		}

		err := calleeMedia.SendAudio(audioData)
		if err != nil {
			t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –æ—Ç callee #%d: %v", i+1, err)
		} else {
			t.Logf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç callee->caller #%d (%d –±–∞–π—Ç)", i+1, len(audioData))
		}
		time.Sleep(25 * time.Millisecond)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
	time.Sleep(200 * time.Millisecond)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	callerAudio, calleeAudio, _, _, _ := results.getStats()

	t.Logf("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏–æ –æ–±–º–µ–Ω–∞: caller –ø–æ–ª—É—á–∏–ª %d –ø–∞–∫–µ—Ç–æ–≤, callee –ø–æ–ª—É—á–∏–ª %d –ø–∞–∫–µ—Ç–æ–≤",
		callerAudio, calleeAudio)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	if calleeAudio > 0 {
		t.Logf("‚úÖ Callee –ø–æ–ª—É—á–∏–ª %d –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç Caller", calleeAudio)
	} else {
		t.Log("‚ö†Ô∏è Callee –Ω–µ –ø–æ–ª—É—á–∏–ª –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç—ã –æ—Ç Caller")
	}
	
	if callerAudio > 0 {
		t.Logf("‚úÖ Caller –ø–æ–ª—É—á–∏–ª %d –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç Callee", callerAudio)
	} else {
		t.Log("‚ö†Ô∏è Caller –Ω–µ –ø–æ–ª—É—á–∏–ª –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç—ã –æ—Ç Callee")
	}

	return nil
}

// testDTMFExchange —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–º–µ–Ω DTMF —Å–∏–≥–Ω–∞–ª–∞–º–∏
func testDTMFExchange(t *testing.T, callerBuilder, calleeBuilder media_builder.Builder, results *TestResults) error {
	t.Log("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DTMF –æ–±–º–µ–Ω–∞...")

	// –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	callerMedia := callerBuilder.GetMediaSession()
	calleeMedia := calleeBuilder.GetMediaSession()

	if callerMedia == nil || calleeMedia == nil {
		return fmt.Errorf("–º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DTMF –æ—Ç caller –∫ callee
	t.Log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º DTMF –æ—Ç caller –∫ callee...")
	dtmfSequence1 := []media.DTMFDigit{media.DTMF1, media.DTMF2, media.DTMF3}

	for i, digit := range dtmfSequence1 {
		err := callerMedia.SendDTMF(digit, 150*time.Millisecond)
		if err != nil {
			t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å DTMF –æ—Ç caller %s: %v", digit, err)
		} else {
			t.Logf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω DTMF caller->callee #%d: %s", i+1, digit)
		}
		time.Sleep(200 * time.Millisecond)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
	time.Sleep(200 * time.Millisecond)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DTMF –æ—Ç callee –∫ caller
	t.Log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º DTMF –æ—Ç callee –∫ caller...")
	dtmfSequence2 := []media.DTMFDigit{media.DTMF4, media.DTMF5}

	for i, digit := range dtmfSequence2 {
		err := calleeMedia.SendDTMF(digit, 150*time.Millisecond)
		if err != nil {
			t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å DTMF –æ—Ç callee %s: %v", digit, err)
		} else {
			t.Logf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω DTMF callee->caller #%d: %s", i+1, digit)
		}
		time.Sleep(200 * time.Millisecond)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
	time.Sleep(200 * time.Millisecond)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	_, _, callerDTMF, calleeDTMF, receivedDigits := results.getStats()

	t.Logf("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã DTMF –æ–±–º–µ–Ω–∞: caller –ø–æ–ª—É—á–∏–ª %d DTMF, callee –ø–æ–ª—É—á–∏–ª %d DTMF",
		callerDTMF, calleeDTMF)
	t.Logf("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ DTMF —Ü–∏—Ñ—Ä—ã: %v", receivedDigits)

	if len(receivedDigits) > 0 {
		t.Logf("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ %d DTMF —Å–∏–≥–Ω–∞–ª–æ–≤: %v", len(receivedDigits), receivedDigits)
	} else {
		t.Log("‚ö†Ô∏è DTMF —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã")
	}

	return nil
}

// verifyStatistics –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏
func verifyStatistics(t *testing.T, manager media_builder.BuilderManager, callerBuilder, calleeBuilder media_builder.Builder, results *TestResults) {
	t.Log("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–π...")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ builder'—ã
	activeBuilders := manager.GetActiveBuilders()
	assert.Len(t, activeBuilders, 2, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 2 –∞–∫—Ç–∏–≤–Ω—ã—Ö builder'–∞")
	assert.Contains(t, activeBuilders, "caller")
	assert.Contains(t, activeBuilders, "callee")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ—Ä—Ç—ã
	availablePorts := manager.GetAvailablePortsCount()
	t.Logf("–î–æ—Å—Ç—É–ø–Ω–æ –ø–æ—Ä—Ç–æ–≤: %d", availablePorts)
	assert.True(t, availablePorts < 101, "–î–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–Ω—è—Ç—ã –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 –ø–æ—Ä—Ç–∞")

	// –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	callerMedia := callerBuilder.GetMediaSession()
	calleeMedia := calleeBuilder.GetMediaSession()

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
	if callerMedia != nil {
		callerStats := callerMedia.GetStatistics()
		t.Logf("Caller Media Stats: –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d, –ø–æ–ª—É—á–µ–Ω–æ: %d, DTMF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d, –ø–æ–ª—É—á–µ–Ω–æ: %d",
			callerStats.AudioPacketsSent, callerStats.AudioPacketsReceived,
			callerStats.DTMFEventsSent, callerStats.DTMFEventsReceived)
	}

	if calleeMedia != nil {
		calleeStats := calleeMedia.GetStatistics()
		t.Logf("Callee Media Stats: –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d, –ø–æ–ª—É—á–µ–Ω–æ: %d, DTMF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d, –ø–æ–ª—É—á–µ–Ω–æ: %d",
			calleeStats.AudioPacketsSent, calleeStats.AudioPacketsReceived,
			calleeStats.DTMFEventsSent, calleeStats.DTMFEventsReceived)
	}

	// –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞
	callerAudio, calleeAudio, callerDTMF, calleeDTMF, _ := results.getStats()
	totalTestTime := time.Since(results.testStartTime)

	t.Logf("=== –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ê ===")
	t.Logf("–û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: %v", totalTestTime)
	t.Logf("Caller: –ø–æ–ª—É—á–µ–Ω–æ %d –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤, %d DTMF —Å–æ–±—ã—Ç–∏–π", callerAudio, callerDTMF)
	t.Logf("Callee: –ø–æ–ª—É—á–µ–Ω–æ %d –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤, %d DTMF —Å–æ–±—ã—Ç–∏–π", calleeAudio, calleeDTMF)
	t.Logf("–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤, %d DTMF —Å–æ–±—ã—Ç–∏–π",
		callerAudio+calleeAudio, callerDTMF+calleeDTMF)

	t.Log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
}

// cleanupResources –æ—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã builder'–æ–≤
func cleanupResources(t *testing.T, manager media_builder.BuilderManager) error {
	// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º caller
	err := manager.ReleaseBuilder("caller")
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å caller: %w", err)
	}
	t.Log("‚úÖ Caller builder –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")

	// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º callee
	err = manager.ReleaseBuilder("callee")
	if err != nil {
		return fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Å–≤–æ–±–æ–¥–∏—Ç—å callee: %w", err)
	}
	t.Log("‚úÖ Callee builder –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ builder'—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã
	activeBuilders := manager.GetActiveBuilders()
	assert.Len(t, activeBuilders, 0, "–í—Å–µ builder'—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ—Ä—Ç—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã
	availablePorts := manager.GetAvailablePortsCount()
	assert.Equal(t, 51, availablePorts, "–í—Å–µ –ø–æ—Ä—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã")

	return nil
}

// generateTestAudio –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ (—Å–∏–Ω—É—Å–æ–∏–¥–∞)
func generateTestAudio(samples int, frequency float64) []byte {
	data := make([]byte, samples)
	sampleRate := 8000.0 // G.711 sample rate

	for i := range data {
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—É—Å–æ–∏–¥—É
		t := float64(i) / sampleRate
		amplitude := 0.3 // –£–º–µ—Ä–µ–Ω–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
		sample := amplitude * math.Sin(2*math.Pi*frequency*t)

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Œº-law (—É–ø—Ä–æ—â–µ–Ω–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
		data[i] = byte(128 + sample*127)
	}

	return data
}

// TestPortAllocation –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –º–µ—Ö–∞–Ω–∏–∑–º –≤—ã–¥–µ–ª–µ–Ω–∏—è –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ä—Ç–æ–≤
func TestPortAllocation(t *testing.T) {
	config := media_builder.DefaultConfig()
	config.MinPort = 7000
	config.MaxPort = 7010
	config.MaxConcurrentBuilders = 5

	manager, err := media_builder.NewBuilderManager(config)
	require.NoError(t, err)
	defer func() {
		err := manager.Shutdown()
		assert.NoError(t, err)
	}()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	assert.Equal(t, 6, manager.GetAvailablePortsCount())

	// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ builder'–æ–≤
	for i := 0; i < 5; i++ {
		_, err := manager.CreateBuilder(fmt.Sprintf("test-%d", i))
		require.NoError(t, err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Ä—Ç—ã –≤—ã–¥–µ–ª–µ–Ω—ã
	assert.Equal(t, 1, manager.GetAvailablePortsCount())
	assert.Len(t, manager.GetActiveBuilders(), 5)

	// –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω builder (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞)
	_, err = manager.CreateBuilder("test-overflow")
	assert.Error(t, err)
	assert.Contains(t, err.Error(), "–º–∞–∫—Å–∏–º—É–º concurrent builders")

	// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –æ–¥–∏–Ω builder
	err = manager.ReleaseBuilder("test-2")
	require.NoError(t, err)
	assert.Equal(t, 2, manager.GetAvailablePortsCount())

	// –¢–µ–ø–µ—Ä—å –º–æ–∂–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π builder
	_, err = manager.CreateBuilder("test-new")
	require.NoError(t, err)
	assert.Equal(t, 1, manager.GetAvailablePortsCount())

	// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ builder'—ã
	for i := 0; i < 5; i++ {
		if i != 2 { // test-2 —É–∂–µ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω
			err = manager.ReleaseBuilder(fmt.Sprintf("test-%d", i))
			if err != nil {
				t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ test-%d: %v", i, err)
			}
		}
	}
	err = manager.ReleaseBuilder("test-new")
	require.NoError(t, err)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ—Ä—Ç—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã
	assert.Equal(t, 6, manager.GetAvailablePortsCount())
	assert.Len(t, manager.GetActiveBuilders(), 0)
}

// debugTransportAddresses –æ—Ç–ª–∞–¥–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
func debugTransportAddresses(t *testing.T, callerBuilder, calleeBuilder media_builder.Builder) {
	t.Log("=== DEBUG TRANSPORT ADDRESSES ===")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
	callerMedia := callerBuilder.GetMediaSession()
	calleeMedia := calleeBuilder.GetMediaSession()

	if callerMedia != nil {
		t.Log("Caller media session exists")
		state := callerMedia.GetState()
		t.Logf("Caller media state: %v", state)
	} else {
		t.Log("Caller media session is nil!")
	}

	if calleeMedia != nil {
		t.Log("Callee media session exists")
		state := calleeMedia.GetState()
		t.Logf("Callee media state: %v", state)
	} else {
		t.Log("Callee media session is nil!")
	}
}

// TestConcurrentBuilders –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ builder'–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
func TestConcurrentBuilders(t *testing.T) {
	config := media_builder.DefaultConfig()
	config.MinPort = 8000
	config.MaxPort = 8050
	config.MaxConcurrentBuilders = 20
	config.PortAllocationStrategy = media_builder.PortAllocationRandom

	manager, err := media_builder.NewBuilderManager(config)
	require.NoError(t, err)
	defer func() {
		err := manager.Shutdown()
		assert.NoError(t, err)
	}()

	// –°–æ–∑–¥–∞–µ–º builder'—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
	var wg sync.WaitGroup
	errors := make(chan error, 20)
	builders := make(chan string, 20)

	for i := 0; i < 20; i++ {
		wg.Add(1)
		go func(id int) {
			defer wg.Done()
			sessionID := fmt.Sprintf("concurrent-%d", id)
			builder, err := manager.CreateBuilder(sessionID)
			if err != nil {
				errors <- err
				return
			}

			// –°–æ–∑–¥–∞–µ–º offer
			offer, err := builder.CreateOffer()
			if err != nil {
				errors <- err
				return
			}

			if offer == nil {
				errors <- fmt.Errorf("offer is nil for session %s", sessionID)
				return
			}

			builders <- sessionID
		}(i)
	}

	wg.Wait()
	close(errors)
	close(builders)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏
	for err := range errors {
		t.Errorf("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ builder: %v", err)
	}

	// –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ builder'—ã
	successCount := 0
	builderIDs := make([]string, 0)
	for id := range builders {
		successCount++
		builderIDs = append(builderIDs, id)
	}

	assert.Equal(t, 20, successCount, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ 20 builder'–æ–≤")
	assert.Len(t, manager.GetActiveBuilders(), 20)

	// –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ builder'—ã
	for _, id := range builderIDs {
		err := manager.ReleaseBuilder(id)
		assert.NoError(t, err)
	}

	assert.Len(t, manager.GetActiveBuilders(), 0)
}

// TestSessionTimeout –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—á–∏—Å—Ç–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
func TestSessionTimeout(t *testing.T) {
	t.Skip("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Ç–∞–π–º–∞—É—Ç–∞ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è CI")

	config := media_builder.DefaultConfig()
	config.SessionTimeout = 2 * time.Second // –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç–µ—Å—Ç–∞

	manager, err := media_builder.NewBuilderManager(config)
	require.NoError(t, err)
	defer func() {
		err := manager.Shutdown()
		assert.NoError(t, err)
	}()

	// –°–æ–∑–¥–∞–µ–º builder
	builder, err := manager.CreateBuilder("timeout-test")
	require.NoError(t, err)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ builder –∞–∫—Ç–∏–≤–µ–Ω
	assert.Len(t, manager.GetActiveBuilders(), 1)

	// –ò—Å–ø–æ–ª—å–∑—É–µ–º builder, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
	_, err = builder.CreateOffer()
	require.NoError(t, err)

	// –ñ–¥–µ–º –ø–æ–ª–æ–≤–∏–Ω—É —Ç–∞–π–º–∞—É—Ç–∞
	time.Sleep(1 * time.Second)

	// Builder –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—Å–µ –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω
	assert.Len(t, manager.GetActiveBuilders(), 1)

	// –ñ–¥–µ–º –ø–æ–ª–Ω—ã–π —Ç–∞–π–º–∞—É—Ç + –≤—Ä–µ–º—è –Ω–∞ –æ—á–∏—Å—Ç–∫—É
	time.Sleep(3 * time.Second)

	// Builder –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—á–∏—â–µ–Ω
	assert.Len(t, manager.GetActiveBuilders(), 0)
}
