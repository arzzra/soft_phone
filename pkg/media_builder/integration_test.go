package media_builder

import (
	"fmt"
	"math"
	"sync"
	"testing"
	"time"

	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/media_sdp"
	"github.com/arzzra/soft_phone/pkg/rtp"
	"github.com/pion/sdp/v3"
)

// TestResults —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
type TestResults struct {
	mu                   sync.Mutex
	callerAudioReceived  int
	calleeAudioReceived  int
	callerDTMFReceived   int
	calleeDTMFReceived   int
	receivedDTMFDigits   []media.DTMFDigit
	audioDataReceived    [][]byte
	testStartTime        time.Time
	lastAudioReceiveTime time.Time
	lastDTMFReceiveTime  time.Time
}

// incrementCallerAudio —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —É caller
func (tr *TestResults) incrementCallerAudio(data []byte) {
	tr.mu.Lock()
	defer tr.mu.Unlock()
	tr.callerAudioReceived++
	tr.audioDataReceived = append(tr.audioDataReceived, data)
	tr.lastAudioReceiveTime = time.Now()
}

// incrementCalleeAudio —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ —É callee
func (tr *TestResults) incrementCalleeAudio(data []byte) {
	tr.mu.Lock()
	defer tr.mu.Unlock()
	tr.calleeAudioReceived++
	tr.audioDataReceived = append(tr.audioDataReceived, data)
	tr.lastAudioReceiveTime = time.Now()
}

// incrementCallerDTMF —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ DTMF —É caller
func (tr *TestResults) incrementCallerDTMF(digit media.DTMFDigit) {
	tr.mu.Lock()
	defer tr.mu.Unlock()
	tr.callerDTMFReceived++
	tr.receivedDTMFDigits = append(tr.receivedDTMFDigits, digit)
	tr.lastDTMFReceiveTime = time.Now()
}

// incrementCalleeDTMF —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ DTMF —É callee
func (tr *TestResults) incrementCalleeDTMF(digit media.DTMFDigit) {
	tr.mu.Lock()
	defer tr.mu.Unlock()
	tr.calleeDTMFReceived++
	tr.receivedDTMFDigits = append(tr.receivedDTMFDigits, digit)
	tr.lastDTMFReceiveTime = time.Now()
}

// getStats –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func (tr *TestResults) getStats() (int, int, int, int, []media.DTMFDigit) {
	tr.mu.Lock()
	defer tr.mu.Unlock()
	return tr.callerAudioReceived, tr.calleeAudioReceived, tr.callerDTMFReceived, tr.calleeDTMFReceived, tr.receivedDTMFDigits
}

// TestFullSDPIntegration –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç SDP –ø–∞–∫–µ—Ç–∞
func TestFullSDPIntegration(t *testing.T) {
	t.Log("üéµ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ media_sdp üéµ")

	results := &TestResults{
		testStartTime: time.Now(),
	}

	// –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏ (Caller)
	t.Log("–≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ Caller —Å–µ—Å—Å–∏–∏...")
	caller, offer, err := createCallerSession(t, results)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Caller —Å–µ—Å—Å–∏—é: %v", err)
	}
	defer func() { _ = caller.Stop() }()

	t.Logf("‚úÖ Caller —Å–æ–∑–¥–∞–Ω, SDP offer —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
	t.Logf("Offer —Å–æ–¥–µ—Ä–∂–∏—Ç %d –º–µ–¥–∏–∞ –æ–ø–∏—Å–∞–Ω–∏–π", len(offer.MediaDescriptions))

	// –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —Å–µ—Å—Å–∏–∏ (Callee) –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ offer
	t.Log("–≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ Callee —Å–µ—Å—Å–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ offer...")
	callee, answer, err := createCalleeSession(t, results, offer)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Callee —Å–µ—Å—Å–∏—é: %v", err)
	}
	defer func() { _ = callee.Stop() }()

	t.Logf("‚úÖ Callee —Å–æ–∑–¥–∞–Ω, SDP answer —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
	t.Logf("Answer —Å–æ–¥–µ—Ä–∂–∏—Ç %d –º–µ–¥–∏–∞ –æ–ø–∏—Å–∞–Ω–∏–π", len(answer.MediaDescriptions))

	// –≠—Ç–∞–ø 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ SDP answer –≤ caller
	t.Log("–≠—Ç–∞–ø 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ SDP answer –≤ caller...")
	err = caller.ProcessAnswer(answer)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å SDP answer –≤ caller: %v", err)
	}

	t.Log("‚úÖ SDP answer –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ caller")

	// –û—Ç–ª–∞–¥–∫–∞: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
	debugTransportAddresses(t, caller, callee)

	// –≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–π
	t.Log("–≠—Ç–∞–ø 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–π...")
	checkSessionStates(t, caller, callee)

	t.Log("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ")

	// –î–∞–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
	time.Sleep(500 * time.Millisecond)

	// –≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —Ç—Ä–∞—Ñ–∏–∫–∞
	t.Log("–≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ —Ç—Ä–∞—Ñ–∏–∫–∞...")
	err = testAudioExchange(t, caller, callee, results)
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É–¥–∏–æ: %v", err)
	}

	// –≠—Ç–∞–ø 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DTMF
	t.Log("–≠—Ç–∞–ø 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DTMF...")
	err = testDTMFExchange(t, caller, callee, results)
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ DTMF: %v", err)
	}

	// –≠—Ç–∞–ø 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	t.Log("–≠—Ç–∞–ø 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
	err = verifyStatistics(t, caller, callee, results)
	if err != nil {
		t.Fatalf("–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: %v", err)
	}

	t.Log("üéâ –ü–æ–ª–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}

// createCallerSession —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é caller –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SDP offer
func createCallerSession(t *testing.T, results *TestResults) (media_sdp.SDPMediaBuilder, *sdp.SessionDescription, error) {
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è caller
	builderConfig := media_sdp.DefaultBuilderConfig()
	builderConfig.SessionID = "integration-test-caller"
	builderConfig.SessionName = "Integration Test Caller"
	builderConfig.PayloadType = rtp.PayloadTypePCMU
	builderConfig.ClockRate = 8000
	builderConfig.Transport.LocalAddr = "127.0.0.1:0" // –ò—Å–ø–æ–ª—å–∑—É–µ–º IPv4
	builderConfig.Transport.RTCPEnabled = true
	builderConfig.DTMFEnabled = true

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback'–∏ –¥–ª—è caller
	builderConfig.MediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration, sessionID string) {
		t.Logf("üéµ [CALLER %s] –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ: %d –±–∞–π—Ç, payload type %d, ptime %v", sessionID, len(data), pt, ptime)
		results.incrementCallerAudio(data)
	}

	builderConfig.MediaConfig.OnDTMFReceived = func(event media.DTMFEvent, sessionID string) {
		t.Logf("[CALLER %s] –ü–æ–ª—É—á–µ–Ω DTMF: %s, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v", sessionID, event.Digit, event.Duration)
		results.incrementCallerDTMF(event.Digit)
	}

	builderConfig.MediaConfig.OnMediaError = func(err error, sessionID string) {
		t.Logf("[CALLER %s] –û—à–∏–±–∫–∞ –º–µ–¥–∏–∞: %v", sessionID, err)
	}

	// –°–æ–∑–¥–∞–µ–º builder
	caller, err := media_sdp.NewSDPMediaBuilder(builderConfig)
	if err != nil {
		return nil, nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SDPMediaBuilder: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º SDP offer
	offer, err := caller.CreateOffer()
	if err != nil {
		_ = caller.Stop()
		return nil, nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SDP offer: %w", err)
	}

	return caller, offer, nil
}

// createCalleeSession —Å–æ–∑–¥–∞–µ—Ç —Å–µ—Å—Å–∏—é callee –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç offer
func createCalleeSession(t *testing.T, results *TestResults, offer *sdp.SessionDescription) (media_sdp.SDPMediaHandler, *sdp.SessionDescription, error) {
	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è callee
	handlerConfig := media_sdp.DefaultHandlerConfig()
	handlerConfig.SessionID = "integration-test-callee"
	handlerConfig.SessionName = "Integration Test Callee"
	handlerConfig.Transport.LocalAddr = "127.0.0.1:0" // –ò—Å–ø–æ–ª—å–∑—É–µ–º IPv4
	handlerConfig.Transport.RTCPEnabled = true
	handlerConfig.DTMFEnabled = true

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callback'–∏ –¥–ª—è callee
	handlerConfig.MediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration, sessionID string) {
		t.Logf("üéµ [CALLEE %s] –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ: %d –±–∞–π—Ç, payload type %d, ptime %v", sessionID, len(data), pt, ptime)
		results.incrementCalleeAudio(data)
	}

	handlerConfig.MediaConfig.OnDTMFReceived = func(event media.DTMFEvent, sessionID string) {
		t.Logf("[CALLEE %s] –ü–æ–ª—É—á–µ–Ω DTMF: %s, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v", sessionID, event.Digit, event.Duration)
		results.incrementCalleeDTMF(event.Digit)
	}

	handlerConfig.MediaConfig.OnMediaError = func(err error, sessionID string) {
		t.Logf("[CALLEE %s] –û—à–∏–±–∫–∞ –º–µ–¥–∏–∞: %v", sessionID, err)
	}

	// –°–æ–∑–¥–∞–µ–º handler
	callee, err := media_sdp.NewSDPMediaHandler(handlerConfig)
	if err != nil {
		return nil, nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SDPMediaHandler: %w", err)
	}

	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º offer
	err = callee.ProcessOffer(offer)
	if err != nil {
		_ = callee.Stop()
		return nil, nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å SDP offer: %w", err)
	}

	// –°–æ–∑–¥–∞–µ–º answer
	answer, err := callee.CreateAnswer()
	if err != nil {
		_ = callee.Stop()
		return nil, nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SDP answer: %w", err)
	}

	return callee, answer, nil
}

// checkSessionStates –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–π –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏—Ö –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
func checkSessionStates(t *testing.T, caller media_sdp.SDPMediaBuilder, callee media_sdp.SDPMediaHandler) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ RTP —Å–µ—Å—Å–∏–π
	callerRTP := caller.GetRTPSession()
	calleeRTP := callee.GetRTPSession()

	if callerSession, ok := callerRTP.(*rtp.Session); ok {
		t.Logf("Caller RTP session state: %v", callerSession.GetState())
		t.Logf("Caller SSRC: %d", callerSession.GetSSRC())
	}

	if calleeSession, ok := calleeRTP.(*rtp.Session); ok {
		t.Logf("Callee RTP session state: %v", calleeSession.GetState())
		t.Logf("Callee SSRC: %d", calleeSession.GetSSRC())
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
	callerMedia := caller.GetMediaSession()
	calleeMedia := callee.GetMediaSession()

	if callerMedia != nil {
		callerStats := callerMedia.GetStatistics()
		t.Logf("Caller media session stats: %+v", callerStats)
	}

	if calleeMedia != nil {
		calleeStats := calleeMedia.GetStatistics()
		t.Logf("Callee media session stats: %+v", calleeStats)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ builder/handler —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏—Å—å –∏ RTP —Å–µ—Å—Å–∏–∏
	err := caller.Start()
	if err != nil {
		t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å caller: %v", err)
	} else {
		t.Log("Caller –∑–∞–ø—É—â–µ–Ω (RTP + Media)")
	}

	err = callee.Start()
	if err != nil {
		t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å callee: %v", err)
	} else {
		t.Log("Callee –∑–∞–ø—É—â–µ–Ω (RTP + Media)")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ RTP —Å–µ—Å—Å–∏–π —Å–Ω–æ–≤–∞
	if callerSession, ok := callerRTP.(*rtp.Session); ok {
		t.Logf("Caller RTP session state –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: %v", callerSession.GetState())
	}

	if calleeSession, ok := calleeRTP.(*rtp.Session); ok {
		t.Logf("Callee RTP session state –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞: %v", calleeSession.GetState())
	}
}

// testAudioExchange —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–º–µ–Ω –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–º–∏
func testAudioExchange(t *testing.T, caller media_sdp.SDPMediaBuilder, callee media_sdp.SDPMediaHandler, results *TestResults) error {
	t.Log("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –æ–±–º–µ–Ω–∞...")

	// –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	callerMedia := caller.GetMediaSession()
	calleeMedia := callee.GetMediaSession()

	if callerMedia == nil || calleeMedia == nil {
		return fmt.Errorf("–º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
	callerStatsBefore := callerMedia.GetStatistics()
	calleeStatsBefore := calleeMedia.GetStatistics()
	t.Logf("Caller stats –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: %+v", callerStatsBefore)
	t.Logf("Callee stats –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π: %+v", calleeStatsBefore)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
	testAudio1 := generateTestAudio(160, 440.0) // 20ms, 440Hz
	testAudio2 := generateTestAudio(160, 880.0) // 20ms, 880Hz
	testAudio3 := generateTestAudio(160, 220.0) // 20ms, 220Hz

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –æ—Ç caller –∫ callee
	t.Log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –æ—Ç caller –∫ callee...")
	for i := 0; i < 3; i++ {
		var audioData []byte
		switch i {
		case 0:
			audioData = testAudio1
		case 1:
			audioData = testAudio2
		case 2:
			audioData = testAudio3
		}

		err := callerMedia.SendAudio(audioData)
		if err != nil {
			t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –æ—Ç caller #%d: %v", i+1, err)
		} else {
			t.Logf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç caller->callee #%d (%d –±–∞–π—Ç)", i+1, len(audioData))
			// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏
			time.Sleep(50 * time.Millisecond)
		}
		time.Sleep(25 * time.Millisecond) // –ù–µ–º–Ω–æ–≥–æ –±–æ–ª—å—à–µ —á–µ–º ptime
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
	time.Sleep(500 * time.Millisecond)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –æ—Ç callee –∫ caller
	t.Log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –æ—Ç callee –∫ caller...")
	for i := 0; i < 2; i++ {
		var audioData []byte
		if i == 0 {
			audioData = testAudio2
		} else {
			audioData = testAudio1
		}

		err := calleeMedia.SendAudio(audioData)
		if err != nil {
			t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ –æ—Ç callee #%d: %v", i+1, err)
		} else {
			t.Logf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç callee->caller #%d (%d –±–∞–π—Ç)", i+1, len(audioData))
		}
		time.Sleep(25 * time.Millisecond)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
	time.Sleep(1000 * time.Millisecond)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	callerAudio, calleeAudio, _, _, _ := results.getStats()

	t.Logf("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—É–¥–∏–æ –æ–±–º–µ–Ω–∞: caller –ø–æ–ª—É—á–∏–ª %d –ø–∞–∫–µ—Ç–æ–≤, callee –ø–æ–ª—É—á–∏–ª %d –ø–∞–∫–µ—Ç–æ–≤",
		callerAudio, calleeAudio)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–∞–∫–µ—Ç—ã –¥–æ—à–ª–∏
	if callerAudio == 0 && calleeAudio == 0 {
		return fmt.Errorf("–Ω–∏ –æ–¥–∏–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω")
	}

	t.Log("‚úÖ –ê—É–¥–∏–æ –æ–±–º–µ–Ω –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
	return nil
}

// testDTMFExchange —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–±–º–µ–Ω DTMF —Å–∏–≥–Ω–∞–ª–∞–º–∏
func testDTMFExchange(t *testing.T, caller media_sdp.SDPMediaBuilder, callee media_sdp.SDPMediaHandler, results *TestResults) error {
	t.Log("–ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DTMF –æ–±–º–µ–Ω–∞...")

	// –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	callerMedia := caller.GetMediaSession()
	calleeMedia := callee.GetMediaSession()

	if callerMedia == nil || calleeMedia == nil {
		return fmt.Errorf("–º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DTMF –æ—Ç caller –∫ callee
	t.Log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º DTMF –æ—Ç caller –∫ callee...")
	dtmfSequence1 := []media.DTMFDigit{media.DTMF1, media.DTMF2, media.DTMF3}

	for i, digit := range dtmfSequence1 {
		err := callerMedia.SendDTMF(digit, 150*time.Millisecond)
		if err != nil {
			t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å DTMF –æ—Ç caller %s: %v", digit, err)
		} else {
			t.Logf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω DTMF caller->callee #%d: %s", i+1, digit)
		}
		time.Sleep(200 * time.Millisecond) // –ü–∞—É–∑–∞ –º–µ–∂–¥—É DTMF
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
	time.Sleep(300 * time.Millisecond)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DTMF –æ—Ç callee –∫ caller
	t.Log("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º DTMF –æ—Ç callee –∫ caller...")
	dtmfSequence2 := []media.DTMFDigit{media.DTMF4, media.DTMF5}

	for i, digit := range dtmfSequence2 {
		err := calleeMedia.SendDTMF(digit, 150*time.Millisecond)
		if err != nil {
			t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å DTMF –æ—Ç callee %s: %v", digit, err)
		} else {
			t.Logf("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω DTMF callee->caller #%d: %s", i+1, digit)
		}
		time.Sleep(200 * time.Millisecond)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É
	time.Sleep(400 * time.Millisecond)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	_, _, callerDTMF, calleeDTMF, receivedDigits := results.getStats()

	t.Logf("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã DTMF –æ–±–º–µ–Ω–∞: caller –ø–æ–ª—É—á–∏–ª %d DTMF, callee –ø–æ–ª—É—á–∏–ª %d DTMF",
		callerDTMF, calleeDTMF)
	t.Logf("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ DTMF —Ü–∏—Ñ—Ä—ã: %v", receivedDigits)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ DTMF –¥–æ—à–ª–∏
	if callerDTMF == 0 && calleeDTMF == 0 {
		t.Log("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–∏ –æ–¥–∏–Ω DTMF —Å–∏–≥–Ω–∞–ª –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω")
		// –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π, —Ç–∞–∫ –∫–∞–∫ DTMF –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω
	} else {
		t.Log("‚úÖ DTMF –æ–±–º–µ–Ω –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ")
	}

	return nil
}

// verifyStatistics –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É RTP/RTCP
func verifyStatistics(t *testing.T, caller media_sdp.SDPMediaBuilder, callee media_sdp.SDPMediaHandler, results *TestResults) error {
	t.Log("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–π...")

	// –ü–æ–ª—É—á–∞–µ–º RTP —Å–µ—Å—Å–∏–∏
	callerRTP := caller.GetRTPSession()
	calleeRTP := callee.GetRTPSession()

	if callerRTP == nil || calleeRTP == nil {
		return fmt.Errorf("RTP —Å–µ—Å—Å–∏–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã")
	}

	// –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	callerMedia := caller.GetMediaSession()
	calleeMedia := callee.GetMediaSession()

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º SSRC
	callerSSRC := callerRTP.GetSSRC()
	calleeSSRC := calleeRTP.GetSSRC()

	t.Logf("Caller SSRC: %d, Callee SSRC: %d", callerSSRC, calleeSSRC)

	if callerSSRC == 0 || calleeSSRC == 0 {
		return fmt.Errorf("–Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ SSRC –∑–Ω–∞—á–µ–Ω–∏—è")
	}

	if callerSSRC == calleeSSRC {
		return fmt.Errorf("SSRC –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏")
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
	if callerMedia != nil {
		callerStats := callerMedia.GetStatistics()
		t.Logf("Caller Media Stats: –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d, –ø–æ–ª—É—á–µ–Ω–æ: %d, DTMF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d, –ø–æ–ª—É—á–µ–Ω–æ: %d",
			callerStats.AudioPacketsSent, callerStats.AudioPacketsReceived,
			callerStats.DTMFEventsSent, callerStats.DTMFEventsReceived)
	}

	if calleeMedia != nil {
		calleeStats := calleeMedia.GetStatistics()
		t.Logf("Callee Media Stats: –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d, –ø–æ–ª—É—á–µ–Ω–æ: %d, DTMF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d, –ø–æ–ª—É—á–µ–Ω–æ: %d",
			calleeStats.AudioPacketsSent, calleeStats.AudioPacketsReceived,
			calleeStats.DTMFEventsSent, calleeStats.DTMFEventsReceived)
	}

	// –ü–æ–ª—É—á–∞–µ–º RTP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É (—Å type assertion –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ SessionRTP)
	if callerSession, ok := callerRTP.(*rtp.Session); ok {
		callerRTPStats := callerSession.GetStatistics()
		t.Logf("Caller RTP Stats: %+v", callerRTPStats)
	}

	if calleeSession, ok := calleeRTP.(*rtp.Session); ok {
		calleeRTPStats := calleeSession.GetStatistics()
		t.Logf("Callee RTP Stats: %+v", calleeRTPStats)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º RTCP –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
	if callerRTP.IsRTCPEnabled() {
		rtcpStats := callerRTP.GetRTCPStatistics()
		t.Logf("Caller RTCP Stats: %+v", rtcpStats)
	}

	if calleeRTP.IsRTCPEnabled() {
		rtcpStats := calleeRTP.GetRTCPStatistics()
		t.Logf("Callee RTCP Stats: %+v", rtcpStats)
	}

	// –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–µ—Å—Ç–∞
	callerAudio, calleeAudio, callerDTMF, calleeDTMF, _ := results.getStats()
	totalTestTime := time.Since(results.testStartTime)

	t.Logf("=== –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –¢–ï–°–¢–ê ===")
	t.Logf("–û–±—â–µ–µ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: %v", totalTestTime)
	t.Logf("Caller: –ø–æ–ª—É—á–µ–Ω–æ %d –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤, %d DTMF —Å–æ–±—ã—Ç–∏–π", callerAudio, callerDTMF)
	t.Logf("Callee: –ø–æ–ª—É—á–µ–Ω–æ %d –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤, %d DTMF —Å–æ–±—ã—Ç–∏–π", calleeAudio, calleeDTMF)
	t.Logf("–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ %d –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤, %d DTMF —Å–æ–±—ã—Ç–∏–π",
		callerAudio+calleeAudio, callerDTMF+calleeDTMF)

	t.Log("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}

// generateTestAudio –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ (—Å–∏–Ω—É—Å–æ–∏–¥–∞)
func generateTestAudio(samples int, frequency float64) []byte {
	data := make([]byte, samples)
	sampleRate := 8000.0 // G.711 sample rate

	for i := range data {
		// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–∏–Ω—É—Å–æ–∏–¥—É
		t := float64(i) / sampleRate
		amplitude := 0.3 // –£–º–µ—Ä–µ–Ω–Ω–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
		sample := amplitude * math.Sin(2*math.Pi*frequency*t)

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ Œº-law (—É–ø—Ä–æ—â–µ–Ω–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
		data[i] = byte(128 + sample*127)
	}

	return data
}

// debugTransportAddresses –æ—Ç–ª–∞–¥–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
func debugTransportAddresses(t *testing.T, caller media_sdp.SDPMediaBuilder, callee media_sdp.SDPMediaHandler) {
	t.Log("=== DEBUG TRANSPORT ADDRESSES ===")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –∞–¥—Ä–µ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É—é—Ç —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ SDP
	callerOffer, err := caller.CreateOffer()
	if err == nil && len(callerOffer.MediaDescriptions) > 0 {
		media := callerOffer.MediaDescriptions[0]
		if media.ConnectionInformation != nil {
			t.Logf("Caller SDP connection: %s:%d",
				media.ConnectionInformation.Address.Address,
				media.MediaName.Port.Value)
		} else if callerOffer.ConnectionInformation != nil {
			t.Logf("Caller SDP session connection: %s",
				callerOffer.ConnectionInformation.Address.Address)
		}
	}

	calleeAnswer, err := callee.CreateAnswer()
	if err == nil && len(calleeAnswer.MediaDescriptions) > 0 {
		media := calleeAnswer.MediaDescriptions[0]
		if media.ConnectionInformation != nil {
			t.Logf("Callee SDP connection: %s:%d",
				media.ConnectionInformation.Address.Address,
				media.MediaName.Port.Value)
		} else if calleeAnswer.ConnectionInformation != nil {
			t.Logf("Callee SDP session connection: %s",
				calleeAnswer.ConnectionInformation.Address.Address)
		}
	}
}
