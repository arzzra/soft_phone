package media_builder_test

import (
	"sync"
	"testing"
	"time"

	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/media_builder"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// LocalhostTestResults —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ localhost
type LocalhostTestResults struct {
	mu                  sync.Mutex
	callerAudioReceived int
	calleeAudioReceived int
	callerDTMFReceived  []media.DTMFDigit
	calleeDTMFReceived  []media.DTMFDigit
}

// TestFullMediaBuilderOnLocalhost –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ—Å—Ç –æ–±–º–µ–Ω–∞ –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ localhost
func TestFullMediaBuilderOnLocalhost(t *testing.T) {
	t.Log("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –æ–±–º–µ–Ω–∞ –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ localhost")

	results := &LocalhostTestResults{}

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ localhost
	config := media_builder.DefaultConfig()
	config.LocalHost = "127.0.0.1"
	config.MinPort = 10000
	config.MaxPort = 10100
	config.MaxConcurrentBuilders = 10
	config.DefaultPayloadTypes = []uint8{0} // –¢–æ–ª—å–∫–æ PCMU –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–µ–¥–∏–∞ —Å–æ–±—ã—Ç–∏–π
	config.DefaultMediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration, sessionID string) {
		results.mu.Lock()
		defer results.mu.Unlock()
		
		if sessionID == "caller" {
			results.callerAudioReceived++
			t.Logf("üéµ [Caller] –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç #%d: %d –±–∞–π—Ç", results.callerAudioReceived, len(data))
		} else if sessionID == "callee" {
			results.calleeAudioReceived++
			t.Logf("üéµ [Callee] –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç #%d: %d –±–∞–π—Ç", results.calleeAudioReceived, len(data))
		}
	}

	config.DefaultMediaConfig.OnDTMFReceived = func(event media.DTMFEvent, sessionID string) {
		results.mu.Lock()
		defer results.mu.Unlock()
		
		if sessionID == "caller" {
			results.callerDTMFReceived = append(results.callerDTMFReceived, event.Digit)
			t.Logf("üìû [Caller] –ü–æ–ª—É—á–µ–Ω DTMF: %s", event.Digit)
		} else if sessionID == "callee" {
			results.calleeDTMFReceived = append(results.calleeDTMFReceived, event.Digit)
			t.Logf("üìû [Callee] –ü–æ–ª—É—á–µ–Ω DTMF: %s", event.Digit)
		}
	}

	config.DefaultMediaConfig.OnMediaError = func(err error, sessionID string) {
		t.Logf("‚ùå [%s] –û—à–∏–±–∫–∞ –º–µ–¥–∏–∞: %v", sessionID, err)
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
	manager, err := media_builder.NewBuilderManager(config)
	require.NoError(t, err, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å BuilderManager")
	defer func() {
		err := manager.Shutdown()
		assert.NoError(t, err)
	}()

	// –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–µ–º Caller
	t.Log("üìû –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ Caller...")
	callerBuilder, err := manager.CreateBuilder("caller")
	require.NoError(t, err)
	
	// –°–æ–∑–¥–∞–µ–º SDP offer –æ—Ç caller
	offer, err := callerBuilder.CreateOffer()
	require.NoError(t, err)
	require.NotNil(t, offer)
	
	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SDP offer
	if len(offer.MediaDescriptions) > 0 {
		media := offer.MediaDescriptions[0]
		t.Logf("Caller SDP Offer - –ø–æ—Ä—Ç: %d, –∫–æ–¥–µ–∫–∏: %v", media.MediaName.Port.Value, media.MediaName.Formats)
		
		// –í—ã–≤–æ–¥–∏–º connection info
		if offer.ConnectionInformation != nil {
			t.Logf("Caller Connection: %s %s", offer.ConnectionInformation.NetworkType, offer.ConnectionInformation.Address.Address)
		}
	}

	// –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–µ–º Callee –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º offer
	t.Log("üìû –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ Callee...")
	calleeBuilder, err := manager.CreateBuilder("callee")
	require.NoError(t, err)
	
	// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º offer –≤ callee
	err = calleeBuilder.ProcessOffer(offer)
	require.NoError(t, err)
	
	// –°–æ–∑–¥–∞–µ–º answer
	answer, err := calleeBuilder.CreateAnswer()
	require.NoError(t, err)
	require.NotNil(t, answer)
	
	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ SDP answer
	if len(answer.MediaDescriptions) > 0 {
		media := answer.MediaDescriptions[0]
		t.Logf("Callee SDP Answer - –ø–æ—Ä—Ç: %d, –∫–æ–¥–µ–∫–∏: %v", media.MediaName.Port.Value, media.MediaName.Formats)
		
		// –í—ã–≤–æ–¥–∏–º connection info
		if answer.ConnectionInformation != nil {
			t.Logf("Callee Connection: %s %s", answer.ConnectionInformation.NetworkType, answer.ConnectionInformation.Address.Address)
		}
	}

	// –≠—Ç–∞–ø 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º answer –≤ caller
	t.Log("üìû –≠—Ç–∞–ø 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ answer –≤ Caller...")
	err = callerBuilder.ProcessAnswer(answer)
	require.NoError(t, err)

	// –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	callerMedia := callerBuilder.GetMediaSession()
	calleeMedia := calleeBuilder.GetMediaSession()
	
	require.NotNil(t, callerMedia, "Caller media session –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
	require.NotNil(t, calleeMedia, "Callee media session –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
	t.Logf("–°–æ—Å—Ç–æ—è–Ω–∏–µ Caller media: %v", callerMedia.GetState())
	t.Logf("–°–æ—Å—Ç–æ—è–Ω–∏–µ Callee media: %v", calleeMedia.GetState())

	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞—Ö
	callerStreams := callerBuilder.GetMediaStreams()
	calleeStreams := calleeBuilder.GetMediaStreams()
	
	t.Log("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞—Ö:")
	for _, stream := range callerStreams {
		t.Logf("Caller stream: %s, local=%d, remote=%s, payload=%d", 
			stream.StreamID, stream.LocalPort, stream.RemoteAddr, stream.PayloadType)
	}
	
	for _, stream := range calleeStreams {
		t.Logf("Callee stream: %s, local=%d, remote=%s, payload=%d", 
			stream.StreamID, stream.LocalPort, stream.RemoteAddr, stream.PayloadType)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤
	time.Sleep(100 * time.Millisecond)

	// –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–º–µ–Ω –∞—É–¥–∏–æ
	t.Log("üéµ –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–º–µ–Ω–∞ –∞—É–¥–∏–æ...")
	
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ (160 –±–∞–π—Ç = 20–º—Å –¥–ª—è PCMU 8kHz)
	testAudioData := make([]byte, 160)
	for i := range testAudioData {
		testAudioData[i] = byte(i % 256)
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç caller –∫ callee
	t.Log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –æ—Ç Caller –∫ Callee...")
	for i := 0; i < 5; i++ {
		err := callerMedia.SendAudio(testAudioData)
		if err != nil {
			t.Logf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –æ—Ç caller: %v", err)
		} else {
			t.Logf("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç #%d –æ—Ç Caller", i+1)
		}
		time.Sleep(20 * time.Millisecond) // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
	time.Sleep(100 * time.Millisecond)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –æ—Ç callee –∫ caller
	t.Log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ –æ—Ç Callee –∫ Caller...")
	for i := 0; i < 5; i++ {
		err := calleeMedia.SendAudio(testAudioData)
		if err != nil {
			t.Logf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –æ—Ç callee: %v", err)
		} else {
			t.Logf("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç #%d –æ—Ç Callee", i+1)
		}
		time.Sleep(20 * time.Millisecond)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
	time.Sleep(100 * time.Millisecond)

	// –≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º DTMF
	t.Log("üìû –≠—Ç–∞–ø 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DTMF...")
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DTMF –æ—Ç caller
	dtmfDigits := []media.DTMFDigit{media.DTMF1, media.DTMF2, media.DTMF3}
	for _, digit := range dtmfDigits {
		err := callerMedia.SendDTMF(digit, 100*time.Millisecond)
		if err != nil {
			t.Logf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DTMF –æ—Ç caller: %v", err)
		} else {
			t.Logf("‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω DTMF %s –æ—Ç Caller", digit)
		}
		time.Sleep(150 * time.Millisecond)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
	time.Sleep(200 * time.Millisecond)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	results.mu.Lock()
	t.Log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:")
	t.Logf("Caller –ø–æ–ª—É—á–∏–ª –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤: %d", results.callerAudioReceived)
	t.Logf("Callee –ø–æ–ª—É—á–∏–ª –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤: %d", results.calleeAudioReceived)
	t.Logf("Caller –ø–æ–ª—É—á–∏–ª DTMF: %v", results.callerDTMFReceived)
	t.Logf("Callee –ø–æ–ª—É—á–∏–ª DTMF: %v", results.calleeDTMFReceived)
	results.mu.Unlock()

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
	callerStats := callerMedia.GetStatistics()
	calleeStats := calleeMedia.GetStatistics()
	
	t.Log("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π:")
	t.Logf("Caller - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—É–¥–∏–æ: %d, –ø–æ–ª—É—á–µ–Ω–æ: %d, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ DTMF: %d, –ø–æ–ª—É—á–µ–Ω–æ: %d",
		callerStats.AudioPacketsSent, callerStats.AudioPacketsReceived,
		callerStats.DTMFEventsSent, callerStats.DTMFEventsReceived)
	t.Logf("Callee - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—É–¥–∏–æ: %d, –ø–æ–ª—É—á–µ–Ω–æ: %d, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ DTMF: %d, –ø–æ–ª—É—á–µ–Ω–æ: %d",
		calleeStats.AudioPacketsSent, calleeStats.AudioPacketsReceived,
		calleeStats.DTMFEventsSent, calleeStats.DTMFEventsReceived)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ö–æ—Ç—è –±—ã –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
	if results.callerAudioReceived > 0 || results.calleeAudioReceived > 0 {
		t.Log("‚úÖ –ê—É–¥–∏–æ –æ–±–º–µ–Ω —É—Å–ø–µ—à–µ–Ω!")
	} else {
		t.Log("‚ö†Ô∏è –ê—É–¥–∏–æ –ø–∞–∫–µ—Ç—ã –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å UDP –Ω–∞ localhost)")
	}

	if len(results.calleeDTMFReceived) > 0 {
		t.Log("‚úÖ DTMF –æ–±–º–µ–Ω —É—Å–ø–µ—à–µ–Ω!")
	} else {
		t.Log("‚ö†Ô∏è DTMF —Å–æ–±—ã—Ç–∏—è –Ω–µ –±—ã–ª–∏ –ø–æ–ª—É—á–µ–Ω—ã")
	}

	// –≠—Ç–∞–ø 6: –û—á–∏—Å—Ç–∫–∞
	t.Log("üßπ –≠—Ç–∞–ø 6: –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
	err = manager.ReleaseBuilder("caller")
	assert.NoError(t, err)
	
	err = manager.ReleaseBuilder("callee")
	assert.NoError(t, err)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã
	assert.Len(t, manager.GetActiveBuilders(), 0)
	assert.Equal(t, 51, manager.GetAvailablePortsCount())

	t.Log("üéâ –¢–µ—Å—Ç –Ω–∞ localhost –∑–∞–≤–µ—Ä—à–µ–Ω!")
}

// TestSimpleLocalhostConnection —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ localhost
func TestSimpleLocalhostConnection(t *testing.T) {
	t.Log("üîå –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ localhost")

	// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	config := media_builder.DefaultConfig()
	config.LocalHost = "127.0.0.1"
	config.MinPort = 20000
	config.MaxPort = 20010
	
	// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	var audioReceived int
	var mu sync.Mutex
	
	config.DefaultMediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration, sessionID string) {
		mu.Lock()
		audioReceived++
		mu.Unlock()
		t.Logf("üéµ [%s] –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ: %d –±–∞–π—Ç", sessionID, len(data))
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
	manager, err := media_builder.NewBuilderManager(config)
	require.NoError(t, err)
	defer func() {
		_ = manager.Shutdown()
	}()

	// –°–æ–∑–¥–∞–µ–º –¥–≤–∞ builder'–∞
	builder1, err := manager.CreateBuilder("endpoint1")
	require.NoError(t, err)
	
	builder2, err := manager.CreateBuilder("endpoint2")
	require.NoError(t, err)

	// SDP negotiation
	offer, err := builder1.CreateOffer()
	require.NoError(t, err)
	
	err = builder2.ProcessOffer(offer)
	require.NoError(t, err)
	
	answer, err := builder2.CreateAnswer()
	require.NoError(t, err)
	
	err = builder1.ProcessAnswer(answer)
	require.NoError(t, err)

	// –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	media1 := builder1.GetMediaSession()
	media2 := builder2.GetMediaSession()
	
	require.NotNil(t, media1)
	require.NotNil(t, media2)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	testData := make([]byte, 160) // 20ms PCMU
	
	// Endpoint1 -> Endpoint2
	err = media1.SendAudio(testData)
	assert.NoError(t, err)
	
	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
	time.Sleep(50 * time.Millisecond)
	
	// Endpoint2 -> Endpoint1
	err = media2.SendAudio(testData)
	assert.NoError(t, err)
	
	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
	time.Sleep(50 * time.Millisecond)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	mu.Lock()
	t.Logf("–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤: %d", audioReceived)
	mu.Unlock()

	// –û—á–∏—Å—Ç–∫–∞
	_ = manager.ReleaseBuilder("endpoint1")
	_ = manager.ReleaseBuilder("endpoint2")
}

// TestMultiStreamLocalhost —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏ –Ω–∞ localhost
func TestMultiStreamLocalhost(t *testing.T) {
	t.Log("üåä –¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–æ–≤ –Ω–∞ localhost")

	config := media_builder.DefaultConfig()
	config.LocalHost = "127.0.0.1"
	config.MinPort = 30000
	config.MaxPort = 30100
	
	// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—Ç–æ–∫–∞
	streamStats := make(map[string]int)
	var mu sync.Mutex
	
	config.DefaultMediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration, sessionID string) {
		mu.Lock()
		streamStats[sessionID]++
		mu.Unlock()
	}

	manager, err := media_builder.NewBuilderManager(config)
	require.NoError(t, err)
	defer func() {
		_ = manager.Shutdown()
	}()

	// –°–æ–∑–¥–∞–µ–º builder'—ã
	sender, err := manager.CreateBuilder("sender")
	require.NoError(t, err)
	
	receiver, err := manager.CreateBuilder("receiver")
	require.NoError(t, err)

	// –°–æ–∑–¥–∞–µ–º SDP —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞–º–∏
	offer, err := sender.CreateOffer()
	require.NoError(t, err)
	
	// –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º offer –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ç–æ—Ä–æ–≥–æ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞
	// (–≤ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ API)
	
	err = receiver.ProcessOffer(offer)
	require.NoError(t, err)
	
	answer, err := receiver.CreateAnswer()
	require.NoError(t, err)
	
	err = sender.ProcessAnswer(answer)
	require.NoError(t, err)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤
	senderStreams := sender.GetMediaStreams()
	receiverStreams := receiver.GetMediaStreams()
	
	t.Logf("Sender –ø–æ—Ç–æ–∫–æ–≤: %d", len(senderStreams))
	t.Logf("Receiver –ø–æ—Ç–æ–∫–æ–≤: %d", len(receiverStreams))

	// –û—á–∏—Å—Ç–∫–∞
	_ = manager.ReleaseBuilder("sender")
	_ = manager.ReleaseBuilder("receiver")
}