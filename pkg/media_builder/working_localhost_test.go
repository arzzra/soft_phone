package media_builder_test

import (
	"sync"
	"sync/atomic"
	"testing"
	"time"

	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/media_builder"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// TestWorkingLocalhostAudioExchange —Ç–µ—Å—Ç –æ–±–º–µ–Ω–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–º–∏ –Ω–∞ localhost —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
func TestWorkingLocalhostAudioExchange(t *testing.T) {
	t.Log("üéØ –¢–µ—Å—Ç –æ–±–º–µ–Ω–∞ –∞—É–¥–∏–æ –Ω–∞ localhost (–±–µ–∑ raw packet handler)")

	// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
	var (
		callerAudioReceived atomic.Int32
		calleeAudioReceived atomic.Int32
		callerDTMFReceived  atomic.Int32
		calleeDTMFReceived  atomic.Int32
		dtmfDigits          sync.Map
	)

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	config := media_builder.DefaultConfig()
	config.LocalHost = "127.0.0.1"
	config.MinPort = 50000
	config.MaxPort = 50100
	config.MaxConcurrentBuilders = 10
	config.DefaultPayloadTypes = []uint8{0} // PCMU

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¢–û–õ–¨–ö–û –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞—É–¥–∏–æ (–Ω–µ raw packet!)
	config.DefaultMediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration, sessionID string) {
		// sessionID –∑–¥–µ—Å—å - —ç—Ç–æ RTP session ID, –Ω–∞–ø—Ä–∏–º–µ—Ä "caller_audio_0" –∏–ª–∏ "callee_audio_0"
		if sessionID == "caller_audio_0" {
			count := callerAudioReceived.Add(1)
			t.Logf("üéµ [Caller] –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç #%d: %d –±–∞–π—Ç, PT=%d, sessionID=%s", count, len(data), pt, sessionID)
		} else if sessionID == "callee_audio_0" {
			count := calleeAudioReceived.Add(1)
			t.Logf("üéµ [Callee] –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç #%d: %d –±–∞–π—Ç, PT=%d, sessionID=%s", count, len(data), pt, sessionID)
		} else {
			t.Logf("üéµ [Unknown] –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç: %d –±–∞–π—Ç, PT=%d, sessionID=%s", len(data), pt, sessionID)
		}
	}

	config.DefaultMediaConfig.OnDTMFReceived = func(event media.DTMFEvent, sessionID string) {
		t.Logf("üìû [%s] –ü–æ–ª—É—á–µ–Ω DTMF: %s, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v", sessionID, event.Digit, event.Duration)
		
		// –î–ª—è DTMF sessionID –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å RTP session ID
		if sessionID == "caller_audio_0" || sessionID == "" {
			// DTMF –æ—Ç caller –ø–æ–ª—É—á–∞–µ—Ç callee
			calleeDTMFReceived.Add(1)
			sessionID = "callee" // –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		} else if sessionID == "callee_audio_0" {
			// DTMF –æ—Ç callee –ø–æ–ª—É—á–∞–µ—Ç caller
			callerDTMFReceived.Add(1)
			sessionID = "caller" // –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
		}
		
		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
		if existing, ok := dtmfDigits.Load(sessionID); ok {
			digits := existing.([]media.DTMFDigit)
			dtmfDigits.Store(sessionID, append(digits, event.Digit))
		} else {
			dtmfDigits.Store(sessionID, []media.DTMFDigit{event.Digit})
		}
	}

	config.DefaultMediaConfig.OnMediaError = func(err error, sessionID string) {
		t.Logf("‚ùå [%s] –û—à–∏–±–∫–∞ –º–µ–¥–∏–∞: %v", sessionID, err)
	}

	// –ù–ï —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OnRawPacketReceived —á—Ç–æ–±—ã –ø–∞–∫–µ—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–ª–∏—Å—å –Ω–æ—Ä–º–∞–ª—å–Ω–æ!

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
	manager, err := media_builder.NewBuilderManager(config)
	require.NoError(t, err)
	defer func() {
		_ = manager.Shutdown()
	}()

	// –°–æ–∑–¥–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	t.Log("üìû –°–æ–∑–¥–∞–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")
	
	caller, err := manager.CreateBuilder("caller")
	require.NoError(t, err)
	
	callee, err := manager.CreateBuilder("callee") 
	require.NoError(t, err)

	// SDP negotiation
	t.Log("ü§ù SDP negotiation...")
	
	offer, err := caller.CreateOffer()
	require.NoError(t, err)
	
	err = callee.ProcessOffer(offer)
	require.NoError(t, err)
	
	answer, err := callee.CreateAnswer()
	require.NoError(t, err)
	
	err = caller.ProcessAnswer(answer)
	require.NoError(t, err)

	// –ü–æ–ª—É—á–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	callerMedia := caller.GetMediaSession()
	calleeMedia := callee.GetMediaSession()
	
	require.NotNil(t, callerMedia)
	require.NotNil(t, calleeMedia)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
	assert.Equal(t, media.MediaStateActive, callerMedia.GetState())
	assert.Equal(t, media.MediaStateActive, calleeMedia.GetState())

	// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç–æ–∫–∞—Ö
	callerStreams := caller.GetMediaStreams()
	calleeStreams := callee.GetMediaStreams()
	
	t.Log("üìä –ú–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∏:")
	for _, stream := range callerStreams {
		t.Logf("Caller: %s -> %s, PT=%d", stream.StreamID, stream.RemoteAddr, stream.PayloadType)
	}
	for _, stream := range calleeStreams {
		t.Logf("Callee: %s -> %s, PT=%d", stream.StreamID, stream.RemoteAddr, stream.PayloadType)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—é
	time.Sleep(100 * time.Millisecond)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞—É–¥–∏–æ –æ–±–º–µ–Ω
	t.Log("üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É–¥–∏–æ –æ–±–º–µ–Ω–∞...")
	
	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (160 –±–∞–π—Ç = 20–º—Å –¥–ª—è PCMU)
	testAudio := make([]byte, 160)
	for i := range testAudio {
		testAudio[i] = byte(i % 256)
	}

	// Caller -> Callee
	t.Log("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç Caller –∫ Callee...")
	for i := 0; i < 5; i++ {
		err := callerMedia.SendAudio(testAudio)
		require.NoError(t, err)
		time.Sleep(25 * time.Millisecond) // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
	}

	// –ñ–¥–µ–º –¥–æ—Å—Ç–∞–≤–∫–∏
	time.Sleep(200 * time.Millisecond)

	// Callee -> Caller
	t.Log("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç Callee –∫ Caller...")
	for i := 0; i < 5; i++ {
		err := calleeMedia.SendAudio(testAudio)
		require.NoError(t, err)
		time.Sleep(25 * time.Millisecond)
	}

	// –ñ–¥–µ–º –¥–æ—Å—Ç–∞–≤–∫–∏
	time.Sleep(200 * time.Millisecond)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º DTMF
	t.Log("üìû –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DTMF...")
	
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º DTMF –æ—Ç Caller
	dtmfSequence := []media.DTMFDigit{media.DTMF1, media.DTMF2, media.DTMF3}
	for _, digit := range dtmfSequence {
		err := callerMedia.SendDTMF(digit, 100*time.Millisecond)
		require.NoError(t, err)
		time.Sleep(150 * time.Millisecond)
	}

	// –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
	time.Sleep(300 * time.Millisecond)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
	t.Log("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
	
	callerAudio := callerAudioReceived.Load()
	calleeAudio := calleeAudioReceived.Load()
	callerDTMF := callerDTMFReceived.Load()
	calleeDTMF := calleeDTMFReceived.Load()
	
	t.Logf("Caller –ø–æ–ª—É—á–∏–ª: %d –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤, %d DTMF", callerAudio, callerDTMF)
	t.Logf("Callee –ø–æ–ª—É—á–∏–ª: %d –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤, %d DTMF", calleeAudio, calleeDTMF)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
	callerStats := callerMedia.GetStatistics()
	calleeStats := calleeMedia.GetStatistics()
	
	t.Logf("Caller —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d, –ø–æ–ª—É—á–µ–Ω–æ: %d",
		callerStats.AudioPacketsSent, callerStats.AudioPacketsReceived)
	t.Logf("Callee —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d, –ø–æ–ª—É—á–µ–Ω–æ: %d", 
		calleeStats.AudioPacketsSent, calleeStats.AudioPacketsReceived)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ DTMF —Ü–∏—Ñ—Ä—ã
	if digits, ok := dtmfDigits.Load("callee"); ok {
		dtmfList := digits.([]media.DTMFDigit)
		t.Logf("Callee –ø–æ–ª—É—á–∏–ª DTMF —Ü–∏—Ñ—Ä—ã: %v", dtmfList)
		assert.Equal(t, 3, len(dtmfList))
		if len(dtmfList) >= 3 {
			assert.Equal(t, media.DTMF1, dtmfList[0])
			assert.Equal(t, media.DTMF2, dtmfList[1])
			assert.Equal(t, media.DTMF3, dtmfList[2])
		}
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
	if calleeAudio > 0 {
		t.Log("‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –æ—Ç Caller –∫ Callee")
	} else {
		t.Log("‚ö†Ô∏è –ê—É–¥–∏–æ –æ—Ç Caller –∫ Callee –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
	}
	
	if callerAudio > 0 {
		t.Log("‚úÖ –ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –æ—Ç Callee –∫ Caller")
	} else {
		t.Log("‚ö†Ô∏è –ê—É–¥–∏–æ –æ—Ç Callee –∫ Caller –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ")
	}
	
	if calleeDTMF > 0 {
		t.Log("‚úÖ DTMF —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω")
	} else {
		t.Log("‚ö†Ô∏è DTMF –Ω–µ –ø–æ–ª—É—á–µ–Ω")
	}

	// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
	assert.Greater(t, calleeAudio, int32(0), "Callee –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç")
	assert.Greater(t, callerAudio, int32(0), "Caller –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç")
	assert.Greater(t, calleeDTMF, int32(0), "Callee –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω DTMF")

	// –û—á–∏—Å—Ç–∫–∞
	t.Log("üßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
	_ = manager.ReleaseBuilder("caller")
	_ = manager.ReleaseBuilder("callee")
	
	assert.Len(t, manager.GetActiveBuilders(), 0)
}

// TestMinimalLocalhostSetup –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
func TestMinimalLocalhostSetup(t *testing.T) {
	t.Log("üîß –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç localhost —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")

	received := atomic.Int32{}
	
	config := media_builder.DefaultConfig()
	config.LocalHost = "127.0.0.1"
	config.MinPort = 60000
	config.MaxPort = 60100
	config.MaxConcurrentBuilders = 10
	
	// –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	config.DefaultMediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration, sessionID string) {
		count := received.Add(1)
		t.Logf("–ü–æ–ª—É—á–µ–Ω –ø–∞–∫–µ—Ç #%d –æ—Ç %s", count, sessionID)
	}

	manager, err := media_builder.NewBuilderManager(config)
	require.NoError(t, err)
	defer func() {
		_ = manager.Shutdown()
	}()

	// –°–æ–∑–¥–∞–µ–º –¥–≤–∞ endpoint
	sender, err := manager.CreateBuilder("sender")
	require.NoError(t, err)
	
	receiver, err := manager.CreateBuilder("receiver")
	require.NoError(t, err)

	// SDP –æ–±–º–µ–Ω
	offer, err := sender.CreateOffer()
	require.NoError(t, err)
	
	err = receiver.ProcessOffer(offer)
	require.NoError(t, err)
	
	answer, err := receiver.CreateAnswer()
	require.NoError(t, err)
	
	err = sender.ProcessAnswer(answer)
	require.NoError(t, err)

	// –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏–∏
	senderMedia := sender.GetMediaSession()
	_ = receiver.GetMediaSession() // receiver –ø—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–∏–Ω –ø–∞–∫–µ—Ç
	testData := make([]byte, 160)
	err = senderMedia.SendAudio(testData)
	require.NoError(t, err)

	// –ñ–¥–µ–º
	time.Sleep(100 * time.Millisecond)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º
	assert.Greater(t, received.Load(), int32(0), "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª—É—á–µ–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–∞–∫–µ—Ç")

	// –û—á–∏—Å—Ç–∫–∞
	_ = manager.ReleaseBuilder("sender")
	_ = manager.ReleaseBuilder("receiver")
}