package media_builder_test

import (
	"testing"
	"time"

	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/media_builder"
	"github.com/stretchr/testify/require"
)

// TestMediaBuilderDemo –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É—Å–ø–µ—à–Ω—É—é —Ä–∞–±–æ—Ç—É media_builder
// –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
func TestMediaBuilderDemo(t *testing.T) {
	t.Log("üé¨ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã media_builder")
	t.Log("–ü–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è –ü–û–°–õ–ï –ø–æ–ª—É—á–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	config := media_builder.DefaultConfig()
	config.MinPort = 30000
	config.MaxPort = 30010
	config.MaxConcurrentBuilders = 5 // –£–º–µ–Ω—å—à–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∞

	// –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	var audioPacketsExchanged int
	var dtmfEventsReceived int

	config.DefaultMediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration, sessionID string) {
		audioPacketsExchanged++
		t.Logf("‚úÖ [%s] –ü–æ–ª—É—á–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç #%d: %d –±–∞–π—Ç", sessionID, audioPacketsExchanged, len(data))
	}

	config.DefaultMediaConfig.OnDTMFReceived = func(event media.DTMFEvent, sessionID string) {
		dtmfEventsReceived++
		t.Logf("‚úÖ –ü–æ–ª—É—á–µ–Ω DTMF —Å–∏–≥–Ω–∞–ª: %s", event.Digit)
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
	manager, err := media_builder.NewBuilderManager(config)
	require.NoError(t, err)
	defer func() {
		_ = manager.Shutdown()
	}()

	// === –§–ê–ó–ê 1: –°–æ–∑–¥–∞–Ω–∏–µ builder'–æ–≤ ===
	t.Log("\nüìã –§–ê–ó–ê 1: –°–æ–∑–¥–∞–Ω–∏–µ builder'–æ–≤")

	alice, err := manager.CreateBuilder("alice")
	require.NoError(t, err)
	t.Log("‚úì –°–æ–∑–¥–∞–Ω builder –¥–ª—è Alice")

	bob, err := manager.CreateBuilder("bob")
	require.NoError(t, err)
	t.Log("‚úì –°–æ–∑–¥–∞–Ω builder –¥–ª—è Bob")

	// === –§–ê–ó–ê 2: SDP Offer/Answer ===
	t.Log("\nüìã –§–ê–ó–ê 2: SDP —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ")

	// Alice —Å–æ–∑–¥–∞–µ—Ç offer
	offer, err := alice.CreateOffer()
	require.NoError(t, err)
	t.Log("‚úì Alice —Å–æ–∑–¥–∞–ª–∞ SDP offer")
	t.Logf("  –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å Alice: %s:%d",
		offer.Origin.UnicastAddress,
		offer.MediaDescriptions[0].MediaName.Port.Value)

	// –í–ê–ñ–ù–û: –ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –µ—â–µ –ù–ï —Å–æ–∑–¥–∞–Ω!
	aliceMedia := alice.GetMediaSession()
	if aliceMedia == nil {
		t.Log("‚úì –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç Alice –µ—â–µ –ù–ï —Å–æ–∑–¥–∞–Ω (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ)")
	}

	// Bob –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç offer
	err = bob.ProcessOffer(offer)
	require.NoError(t, err)
	t.Log("‚úì Bob –æ–±—Ä–∞–±–æ—Ç–∞–ª offer")

	// Bob —Å–æ–∑–¥–∞–µ—Ç answer
	answer, err := bob.CreateAnswer()
	require.NoError(t, err)
	t.Log("‚úì Bob —Å–æ–∑–¥–∞–ª SDP answer")
	t.Logf("  –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å Bob: %s:%d",
		answer.Origin.UnicastAddress,
		answer.MediaDescriptions[0].MediaName.Port.Value)

	// Alice –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç answer
	err = alice.ProcessAnswer(answer)
	require.NoError(t, err)
	t.Log("‚úì Alice –æ–±—Ä–∞–±–æ—Ç–∞–ª–∞ answer")

	// === –§–ê–ó–ê 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ ===
	t.Log("\nüìã –§–ê–ó–ê 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤")

	aliceMedia = alice.GetMediaSession()
	require.NotNil(t, aliceMedia, "Media session Alice –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ ProcessAnswer")
	t.Log("‚úì –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç Alice —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º")

	bobMedia := bob.GetMediaSession()
	require.NotNil(t, bobMedia, "Media session Bob –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ –ø–æ—Å–ª–µ CreateAnswer")
	t.Log("‚úì –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç Bob —Å–æ–∑–¥–∞–Ω —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–¥–∞–ª–µ–Ω–Ω—ã–º –∞–¥—Ä–µ—Å–æ–º")

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	err = aliceMedia.Start()
	require.NoError(t, err)
	t.Log("‚úì –ú–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è Alice –∑–∞–ø—É—â–µ–Ω–∞")

	err = bobMedia.Start()
	require.NoError(t, err)
	t.Log("‚úì –ú–µ–¥–∏–∞ —Å–µ—Å—Å–∏—è Bob –∑–∞–ø—É—â–µ–Ω–∞")

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
	time.Sleep(100 * time.Millisecond)

	// === –§–ê–ó–ê 4: –û–±–º–µ–Ω –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–º–∏ ===
	t.Log("\nüìã –§–ê–ó–ê 4: –û–±–º–µ–Ω –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–º–∏")

	// Alice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ
	t.Log("\nAlice –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ...")
	for i := 0; i < 3; i++ {
		audioData := make([]byte, 160) // 20ms @ 8kHz
		for j := range audioData {
			audioData[j] = byte(i + j)
		}
		err = aliceMedia.SendAudio(audioData)
		require.NoError(t, err)
		time.Sleep(50 * time.Millisecond)
	}

	// Bob –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç DTMF
	t.Log("\nBob –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç DTMF...")
	dtmfDigits := []media.DTMFDigit{media.DTMF1, media.DTMF2, media.DTMF3}
	for _, digit := range dtmfDigits {
		err = bobMedia.SendDTMF(digit, 100*time.Millisecond)
		require.NoError(t, err)
		time.Sleep(150 * time.Millisecond)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É
	time.Sleep(500 * time.Millisecond)

	// === –§–ê–ó–ê 5: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã ===
	t.Log("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
	t.Logf("‚úÖ –û–±–º–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–∞–º–∏: %d –ø–∞–∫–µ—Ç–æ–≤", audioPacketsExchanged)
	t.Logf("‚úÖ –ü–æ–ª—É—á–µ–Ω–æ DTMF —Å–∏–≥–Ω–∞–ª–æ–≤: %d", dtmfEventsReceived)

	if audioPacketsExchanged > 0 && dtmfEventsReceived > 0 {
		t.Log("\nüéâ –£–°–ü–ï–•! Media builder —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
		t.Log("–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã —Å–æ–∑–¥–∞—é—Ç—Å—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏ –∏ –ø–∞–∫–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è")
	} else {
		t.Log("\n‚ö†Ô∏è  –ü–∞–∫–µ—Ç—ã –Ω–µ –±—ã–ª–∏ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã (–æ–∂–∏–¥–∞–µ–º–æ –≤ —Ç–µ—Å—Ç–æ–≤–æ–º –æ–∫—Ä—É–∂–µ–Ω–∏–∏ –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ç–µ–≤–æ–≥–æ —Å—Ç–µ–∫–∞)")
	}

	// –û—á–∏—Å—Ç–∫–∞
	err = manager.ReleaseBuilder("alice")
	require.NoError(t, err)
	err = manager.ReleaseBuilder("bob")
	require.NoError(t, err)

	t.Log("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
}
