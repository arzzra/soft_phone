package media_builder_test

import (
	"fmt"
	"math"
	"sync"
	"sync/atomic"
	"testing"
	"time"

	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/media_builder"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// TestSimpleConference —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é —Å 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
func TestSimpleConference(t *testing.T) {
	t.Log("üéôÔ∏è –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —Å 3 —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	config := media_builder.DefaultConfig()
	config.MinPort = 25000
	config.MaxPort = 25100
	config.MaxConcurrentBuilders = 10

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	var audioSent, audioRecv, dtmfSent, dtmfRecv int64

	config.DefaultMediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration, sessionID string) {
		atomic.AddInt64(&audioRecv, 1)
		t.Logf("üéµ [%s] –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ: %d –±–∞–π—Ç", sessionID, len(data))
	}

	config.DefaultMediaConfig.OnDTMFReceived = func(event media.DTMFEvent, sessionID string) {
		atomic.AddInt64(&dtmfRecv, 1)
		t.Logf("‚òéÔ∏è  [%s] –ü–æ–ª—É—á–µ–Ω DTMF: %s", sessionID, event.Digit)
	}

	manager, err := media_builder.NewBuilderManager(config)
	require.NoError(t, err)
	defer func() {
		_ = manager.Shutdown()
	}()

	// –°–æ–∑–¥–∞–µ–º 3—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–∞–∂–¥–∞—è –ø–∞—Ä–∞ –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Å–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
	// A-B connection
	builderA2B, err := manager.CreateBuilder("A-to-B")
	require.NoError(t, err)

	builderB2A, err := manager.CreateBuilder("B-to-A")
	require.NoError(t, err)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ A<->B
	offerAB, err := builderA2B.CreateOffer()
	require.NoError(t, err)

	err = builderB2A.ProcessOffer(offerAB)
	require.NoError(t, err)

	answerBA, err := builderB2A.CreateAnswer()
	require.NoError(t, err)

	err = builderA2B.ProcessAnswer(answerBA)
	require.NoError(t, err)

	// A-C connection
	builderA2C, err := manager.CreateBuilder("A-to-C")
	require.NoError(t, err)

	builderC2A, err := manager.CreateBuilder("C-to-A")
	require.NoError(t, err)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ A<->C
	offerAC, err := builderA2C.CreateOffer()
	require.NoError(t, err)

	err = builderC2A.ProcessOffer(offerAC)
	require.NoError(t, err)

	answerCA, err := builderC2A.CreateAnswer()
	require.NoError(t, err)

	err = builderA2C.ProcessAnswer(answerCA)
	require.NoError(t, err)

	// B-C connection
	builderB2C, err := manager.CreateBuilder("B-to-C")
	require.NoError(t, err)

	builderC2B, err := manager.CreateBuilder("C-to-B")
	require.NoError(t, err)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ B<->C
	offerBC, err := builderB2C.CreateOffer()
	require.NoError(t, err)

	err = builderC2B.ProcessOffer(offerBC)
	require.NoError(t, err)

	answerCB, err := builderC2B.CreateAnswer()
	require.NoError(t, err)

	err = builderB2C.ProcessAnswer(answerCB)
	require.NoError(t, err)

	t.Log("‚úÖ –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
	time.Sleep(500 * time.Millisecond)

	// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	mediaA2B := builderA2B.GetMediaSession()
	mediaA2C := builderA2C.GetMediaSession()
	mediaB2A := builderB2A.GetMediaSession()
	mediaB2C := builderB2C.GetMediaSession()
	mediaC2A := builderC2A.GetMediaSession()
	mediaC2B := builderC2B.GetMediaSession()

	// A –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –∫ B –∏ C
	t.Log("A –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ...")
	testAudio := generateConferenceTestAudio(160, 440.0)

	err = mediaA2B.SendAudio(testAudio)
	if err == nil {
		atomic.AddInt64(&audioSent, 1)
	}

	err = mediaA2C.SendAudio(testAudio)
	if err == nil {
		atomic.AddInt64(&audioSent, 1)
	}

	// B –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –∫ A –∏ C
	t.Log("B –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ...")
	err = mediaB2A.SendAudio(testAudio)
	if err == nil {
		atomic.AddInt64(&audioSent, 1)
	}

	err = mediaB2C.SendAudio(testAudio)
	if err == nil {
		atomic.AddInt64(&audioSent, 1)
	}

	// C –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç DTMF –∫ A –∏ B
	t.Log("C –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç DTMF...")
	err = mediaC2A.SendDTMF(media.DTMF1, 150*time.Millisecond)
	if err == nil {
		atomic.AddInt64(&dtmfSent, 1)
	}

	err = mediaC2B.SendDTMF(media.DTMF2, 150*time.Millisecond)
	if err == nil {
		atomic.AddInt64(&dtmfSent, 1)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
	time.Sleep(1 * time.Second)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	t.Logf("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:")
	t.Logf("  –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d", audioSent)
	t.Logf("  –ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ: %d", audioRecv)
	t.Logf("  DTMF –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d", dtmfSent)
	t.Logf("  DTMF –ø–æ–ª—É—á–µ–Ω–æ: %d", dtmfRecv)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É manager'–∞
	stats := manager.GetStatistics()
	assert.Equal(t, 6, stats.ActiveBuilders, "–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 6 –∞–∫—Ç–∏–≤–Ω—ã—Ö builder'–æ–≤")

	// –û—á–∏—Å—Ç–∫–∞
	builders := []string{"A-to-B", "B-to-A", "A-to-C", "C-to-A", "B-to-C", "C-to-B"}
	for _, id := range builders {
		err := manager.ReleaseBuilder(id)
		assert.NoError(t, err)
	}

	t.Log("‚úÖ –¢–µ—Å—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
}

// TestLargeConference —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
func TestLargeConference(t *testing.T) {
	t.Log("üéôÔ∏è –¢–µ—Å—Ç –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ —Å —Ç–æ–ø–æ–ª–æ–≥–∏–µ–π –∑–≤–µ–∑–¥–∞")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	config := media_builder.DefaultConfig()
	config.MinPort = 26000
	config.MaxPort = 26200
	config.MaxConcurrentBuilders = 50

	// –°—á–µ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
	var totalAudioSent, totalAudioRecv int64
	var mu sync.Mutex
	receivedBy := make(map[string]int)

	config.DefaultMediaConfig.OnAudioReceived = func(data []byte, pt media.PayloadType, ptime time.Duration, sessionID string) {
		atomic.AddInt64(&totalAudioRecv, 1)
		mu.Lock()
		receivedBy[sessionID]++
		mu.Unlock()
	}

	manager, err := media_builder.NewBuilderManager(config)
	require.NoError(t, err)
	defer func() {
		_ = manager.Shutdown()
	}()

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–µ—Ä –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —É–∑–µ–ª)
	serverBuilders := make(map[string]media_builder.Builder)
	clientBuilders := make(map[string]media_builder.Builder)

	participantCount := 10

	// –°–æ–∑–¥–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ –∑–≤–µ–∑–¥–∞
	for i := 1; i <= participantCount; i++ {
		clientID := fmt.Sprintf("client-%d", i)
		serverID := fmt.Sprintf("server-for-%d", i)

		// Client builder
		clientBuilder, err := manager.CreateBuilder(clientID)
		require.NoError(t, err)
		clientBuilders[clientID] = clientBuilder

		// Server builder –¥–ª—è —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
		serverBuilder, err := manager.CreateBuilder(serverID)
		require.NoError(t, err)
		serverBuilders[serverID] = serverBuilder

		// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
		offer, err := clientBuilder.CreateOffer()
		require.NoError(t, err)

		err = serverBuilder.ProcessOffer(offer)
		require.NoError(t, err)

		answer, err := serverBuilder.CreateAnswer()
		require.NoError(t, err)

		err = clientBuilder.ProcessAnswer(answer)
		require.NoError(t, err)
	}

	t.Logf("‚úÖ –°–æ–∑–¥–∞–Ω–æ %d —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –≤ —Ç–æ–ø–æ–ª–æ–≥–∏–∏ –∑–≤–µ–∑–¥–∞", participantCount)
	time.Sleep(500 * time.Millisecond)

	// –ö–∞–∂–¥—ã–π –∫–ª–∏–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ
	var wg sync.WaitGroup
	for clientID, builder := range clientBuilders {
		wg.Add(1)
		go func(id string, b media_builder.Builder) {
			defer wg.Done()

			session := b.GetMediaSession()
			if session != nil {
				for j := 0; j < 5; j++ {
					audio := generateConferenceTestAudio(160, 440.0+float64(j)*50)
					err := session.SendAudio(audio)
					if err == nil {
						atomic.AddInt64(&totalAudioSent, 1)
					}
					time.Sleep(50 * time.Millisecond)
				}
			}
		}(clientID, builder)
	}

	wg.Wait()
	time.Sleep(500 * time.Millisecond)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	t.Logf("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:")
	t.Logf("  –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: %d", participantCount)
	t.Logf("  –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d", totalAudioSent)
	t.Logf("  –ê—É–¥–∏–æ –ø–æ–ª—É—á–µ–Ω–æ: %d", totalAudioRecv)

	mu.Lock()
	for id, count := range receivedBy {
		t.Logf("  %s –ø–æ–ª—É—á–∏–ª %d –ø–∞–∫–µ—Ç–æ–≤", id, count)
	}
	mu.Unlock()

	// –û—á–∏—Å—Ç–∫–∞
	for id := range clientBuilders {
		err := manager.ReleaseBuilder(id)
		assert.NoError(t, err)
	}
	for id := range serverBuilders {
		err := manager.ReleaseBuilder(id)
		assert.NoError(t, err)
	}

	stats := manager.GetStatistics()
	assert.Equal(t, 0, stats.ActiveBuilders, "–í—Å–µ builder'—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")

	t.Log("‚úÖ –¢–µ—Å—Ç –±–æ–ª—å—à–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
}

// generateConferenceTestAudio –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
func generateConferenceTestAudio(samples int, frequency float64) []byte {
	data := make([]byte, samples)
	sampleRate := 8000.0

	for i := range data {
		t := float64(i) / sampleRate
		amplitude := 0.3
		sample := amplitude * math.Sin(2*math.Pi*frequency*t)
		data[i] = byte(128 + sample*127)
	}

	return data
}

// TestConferenceDynamicJoinLeave —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
func TestConferenceDynamicJoinLeave(t *testing.T) {
	t.Log("üéôÔ∏è –¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")

	config := media_builder.DefaultConfig()
	config.MinPort = 27000
	config.MaxPort = 27100
	config.MaxConcurrentBuilders = 20

	manager, err := media_builder.NewBuilderManager(config)
	require.NoError(t, err)
	defer func() {
		_ = manager.Shutdown()
	}()

	// –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é –∏–∑ 3 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Ç–æ–ø–æ–ª–æ–≥–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	builders := make(map[string]media_builder.Builder)

	// –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã—Ö –¥–≤—É—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
	builder1, err := manager.CreateBuilder("participant-1")
	require.NoError(t, err)
	builders["participant-1"] = builder1

	builder2, err := manager.CreateBuilder("participant-2")
	require.NoError(t, err)
	builders["participant-2"] = builder2

	// –°–æ–µ–¥–∏–Ω—è–µ–º –∏—Ö
	offer, err := builder1.CreateOffer()
	require.NoError(t, err)

	err = builder2.ProcessOffer(offer)
	require.NoError(t, err)

	answer, err := builder2.CreateAnswer()
	require.NoError(t, err)

	err = builder1.ProcessAnswer(answer)
	require.NoError(t, err)

	t.Log("‚úÖ –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ—Ç—å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
	time.Sleep(500 * time.Millisecond)

	builder3to1, err := manager.CreateBuilder("participant-3-to-1")
	require.NoError(t, err)
	builders["participant-3-to-1"] = builder3to1

	builder1to3, err := manager.CreateBuilder("participant-1-to-3")
	require.NoError(t, err)
	builders["participant-1-to-3"] = builder1to3

	// –°–æ–µ–¥–∏–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ 3 —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º 1
	offer3, err := builder3to1.CreateOffer()
	require.NoError(t, err)

	err = builder1to3.ProcessOffer(offer3)
	require.NoError(t, err)

	answer13, err := builder1to3.CreateAnswer()
	require.NoError(t, err)

	err = builder3to1.ProcessAnswer(answer13)
	require.NoError(t, err)

	t.Log("‚úÖ –¢—Ä–µ—Ç–∏–π —É—á–∞—Å—Ç–Ω–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω")

	stats := manager.GetStatistics()
	assert.Equal(t, 4, stats.ActiveBuilders)

	// –û—Ç–∫–ª—é—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ 2
	err = manager.ReleaseBuilder("participant-2")
	assert.NoError(t, err)
	delete(builders, "participant-2")

	t.Log("‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ 2 –æ—Ç–∫–ª—é—á–µ–Ω")

	stats = manager.GetStatistics()
	assert.Equal(t, 3, stats.ActiveBuilders)

	// –û—á–∏—Å—Ç–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è
	for id := range builders {
		err := manager.ReleaseBuilder(id)
		assert.NoError(t, err)
	}

	t.Log("‚úÖ –¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω")
}
