package media_builder_test

import (
	"net"
	"testing"
	"time"

	"github.com/stretchr/testify/require"
)

// TestBasicUDPConnectivity –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—É—é UDP —Å–≤—è–∑–Ω–æ—Å—Ç—å –Ω–∞ localhost
func TestBasicUDPConnectivity(t *testing.T) {
	t.Log("üîå –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π UDP —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –Ω–∞ localhost")

	// –°–æ–∑–¥–∞–µ–º –¥–≤–∞ UDP —Å–æ–∫–µ—Ç–∞
	addr1, err := net.ResolveUDPAddr("udp", "127.0.0.1:0")
	require.NoError(t, err)
	
	conn1, err := net.ListenUDP("udp", addr1)
	require.NoError(t, err)
	defer conn1.Close()
	
	addr2, err := net.ResolveUDPAddr("udp", "127.0.0.1:0")
	require.NoError(t, err)
	
	conn2, err := net.ListenUDP("udp", addr2)
	require.NoError(t, err)
	defer conn2.Close()

	// –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞
	localAddr1 := conn1.LocalAddr().(*net.UDPAddr)
	localAddr2 := conn2.LocalAddr().(*net.UDPAddr)
	
	t.Logf("UDP Socket 1: %s", localAddr1)
	t.Logf("UDP Socket 2: %s", localAddr2)

	// –ö–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
	received := make(chan []byte, 1)
	
	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–µ–º –Ω–∞ –≤—Ç–æ—Ä–æ–º —Å–æ–∫–µ—Ç–µ
	go func() {
		buffer := make([]byte, 1500)
		n, addr, err := conn2.ReadFromUDP(buffer)
		if err == nil {
			t.Logf("Socket 2 –ø–æ–ª—É—á–∏–ª %d –±–∞–π—Ç –æ—Ç %s", n, addr)
			received <- buffer[:n]
		}
	}()

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä–≤–æ–≥–æ —Å–æ–∫–µ—Ç–∞
	testData := []byte("Hello from Socket 1")
	n, err := conn1.WriteToUDP(testData, localAddr2)
	require.NoError(t, err)
	t.Logf("Socket 1 –æ—Ç–ø—Ä–∞–≤–∏–ª %d –±–∞–π—Ç", n)

	// –ñ–¥–µ–º –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
	select {
	case data := <-received:
		t.Logf("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã: %s", string(data))
		require.Equal(t, testData, data)
	case <-time.After(1 * time.Second):
		t.Fatal("‚ùå –¢–∞–π–º–∞—É—Ç: –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã")
	}
}