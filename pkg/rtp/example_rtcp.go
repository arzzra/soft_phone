// Package rtp –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è RTCP
package rtp

import (
	"context"
	"fmt"
	"log"
	"net"
	"time"

	"github.com/pion/rtp"
)

// RTCPExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RTCP
func RTCPExample() {
	// –°–æ–∑–¥–∞–µ–º RTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
	rtpConfig := TransportConfig{
		LocalAddr:  ":5004",
		BufferSize: 1500,
	}

	rtpTransport, err := NewUDPTransport(rtpConfig)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: %v", err)
	}
	defer rtpTransport.Close()

	// –°–æ–∑–¥–∞–µ–º RTCP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (–æ–±—ã—á–Ω–æ RTP+1 –ø–æ—Ä—Ç)
	rtcpConfig := RTCPTransportConfig{
		LocalAddr:  ":5005",
		BufferSize: 1500,
	}

	rtcpTransport, err := NewUDPRTCPTransport(rtcpConfig)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RTCP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: %v", err)
	}
	defer rtcpTransport.Close()

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º RTP —Å–µ—Å—Å–∏—é —Å RTCP
	sessionConfig := SessionConfig{
		PayloadType:   PayloadTypePCMU,
		MediaType:     MediaTypeAudio,
		ClockRate:     8000,
		Transport:     rtpTransport,
		RTCPTransport: rtcpTransport,
		LocalSDesc: SourceDescription{
			CNAME: "example@localhost",
			NAME:  "RTP Example User",
			TOOL:  "Go RTP Library",
		},
		OnPacketReceived: func(packet *rtp.Packet, addr net.Addr) {
			fmt.Printf("–ü–æ–ª—É—á–µ–Ω RTP –ø–∞–∫–µ—Ç: SSRC=%d, SeqNum=%d, —Ä–∞–∑–º–µ—Ä=%d –±–∞–π—Ç –æ—Ç %s\n",
				packet.Header.SSRC, packet.Header.SequenceNumber, len(packet.Payload), addr)
		},
		OnRTCPReceived: func(packet RTCPPacket, addr net.Addr) {
			fmt.Printf("–ü–æ–ª—É—á–µ–Ω RTCP –ø–∞–∫–µ—Ç –æ—Ç %s: ", addr)
			switch p := packet.(type) {
			case *SenderReport:
				fmt.Printf("Sender Report: SSRC=%d, –ø–∞–∫–µ—Ç–æ–≤=%d, –±–∞–π—Ç=%d\n",
					p.SSRC, p.SenderPackets, p.SenderOctets)
			case *ReceiverReport:
				fmt.Printf("Receiver Report: SSRC=%d, RR count=%d\n",
					p.SSRC, len(p.ReceptionReports))
			case *SourceDescriptionPacket:
				fmt.Printf("Source Description: %d –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n", len(p.Chunks))
			}
		},
	}

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é
	session, err := NewSession(sessionConfig)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: %v", err)
	}
	defer session.Stop()

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
	if err := session.Start(); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏: %v", err)
	}

	fmt.Println("RTP/RTCP —Å–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞...")
	fmt.Printf("RTP –ø–æ—Ä—Ç: %s\n", rtpTransport.LocalAddr())
	fmt.Printf("RTCP –ø–æ—Ä—Ç: %s\n", rtcpTransport.LocalAddr())

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SDES –ø–∞–∫–µ—Ç
	if err := session.SendSourceDescription(); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SDES: %v", err)
	}

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
	go func() {
		ticker := time.NewTicker(20 * time.Millisecond) // 50 pps –¥–ª—è G.711
		defer ticker.Stop()

		audioData := make([]byte, 160) // 20ms of Œº-law at 8kHz
		for i := range audioData {
			audioData[i] = 0xFF // Silence in Œº-law
		}

		for {
			select {
			case <-ticker.C:
				if err := session.SendAudio(audioData, 20*time.Millisecond); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: %v", err)
				}
			}
		}
	}()

	// –†–∞–±–æ—Ç–∞–µ–º 30 —Å–µ–∫—É–Ω–¥
	time.Sleep(30 * time.Second)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	stats := session.GetStatistics()
	fmt.Printf("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:\n")
	fmt.Printf("  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: %d\n", stats.PacketsSent)
	fmt.Printf("  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–∞–π—Ç: %d\n", stats.BytesSent)
	fmt.Printf("  –ü–æ–ª—É—á–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: %d\n", stats.PacketsReceived)
	fmt.Printf("  –ü–æ–ª—É—á–µ–Ω–æ –±–∞–π—Ç: %d\n", stats.BytesReceived)
	fmt.Printf("  –ü–æ—Ç–µ—Ä—è–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: %d\n", stats.PacketsLost)
	fmt.Printf("  Jitter: %.2f\n", stats.Jitter)

	fmt.Println("\n–ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω.")
}

// MultiplexedRTCPExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RTP/RTCP
func MultiplexedRTCPExample() {
	// –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
	config := TransportConfig{
		LocalAddr:  ":5006",
		BufferSize: 1500,
	}

	muxTransport, err := NewMultiplexedUDPTransport(config)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: %v", err)
	}
	defer muxTransport.Close()

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é —Å –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
	sessionConfig := SessionConfig{
		PayloadType: PayloadTypePCMU,
		MediaType:   MediaTypeAudio,
		ClockRate:   8000,
		Transport:   muxTransport,
		// RTCPTransport –Ω–µ –Ω—É–∂–µ–Ω - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ
		LocalSDesc: SourceDescription{
			CNAME: "mux-example@localhost",
			NAME:  "Multiplexed RTP Example",
			TOOL:  "Go RTP Library",
		},
		OnPacketReceived: func(packet *rtp.Packet, addr net.Addr) {
			fmt.Printf("–ú—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RTP: SSRC=%d, SeqNum=%d\n",
				packet.Header.SSRC, packet.Header.SequenceNumber)
		},
		OnRTCPReceived: func(packet RTCPPacket, addr net.Addr) {
			fmt.Printf("–ú—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π RTCP –ø–æ–ª—É—á–µ–Ω –æ—Ç %s\n", addr)
		},
	}

	session, err := NewSession(sessionConfig)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏: %v", err)
	}
	defer session.Stop()

	if err := session.Start(); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏: %v", err)
	}

	fmt.Println("–ú—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è RTP/RTCP —Å–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞...")
	fmt.Printf("–ü–æ—Ä—Ç: %s (RTP –∏ RTCP –Ω–∞ –æ–¥–Ω–æ–º –ø–æ—Ä—Ç—É)\n", muxTransport.LocalAddr())

	// –†–∞–±–æ—Ç–∞–µ–º 10 —Å–µ–∫—É–Ω–¥
	time.Sleep(10 * time.Second)

	fmt.Println("–ú—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω.")
}

// RTCPStatisticsExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ RTCP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
func RTCPStatisticsExample() {
	fmt.Println("=== –ü—Ä–∏–º–µ—Ä –∞–Ω–∞–ª–∏–∑–∞ RTCP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ===")

	// –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	now := time.Now()

	// –°–æ–∑–¥–∞–µ–º Sender Report
	sr := NewSenderReport(12345, NTPTimestamp(now), 160000, 1000, 160000)

	// –î–æ–±–∞–≤–ª—è–µ–º Reception Report
	rr := ReceptionReport{
		SSRC:             54321,
		FractionLost:     5,    // 5/256 = ~2% –ø–æ—Ç–µ—Ä—å
		CumulativeLost:   10,   // –í—Å–µ–≥–æ –ø–æ—Ç–µ—Ä—è–Ω–æ 10 –ø–∞–∫–µ—Ç–æ–≤
		HighestSeqNum:    1000, // –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä
		Jitter:           20,   // Jitter –≤ RTP timestamp units
		LastSR:           0x12345678,
		DelaySinceLastSR: 65536, // 1 —Å–µ–∫—É–Ω–¥–∞
	}
	sr.AddReceptionReport(rr)

	// –ö–æ–¥–∏—Ä—É–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	data, err := sr.Marshal()
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è SR: %v", err)
	}

	fmt.Printf("–†–∞–∑–º–µ—Ä SR –ø–∞–∫–µ—Ç–∞: %d –±–∞–π—Ç\n", len(data))

	// –ü–∞—Ä—Å–∏–º –æ–±—Ä–∞—Ç–Ω–æ
	parsedSR := &SenderReport{}
	if err := parsedSR.Unmarshal(data); err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è SR: %v", err)
	}

	// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	fmt.Printf("\nSender Report –∞–Ω–∞–ª–∏–∑:\n")
	fmt.Printf("  SSRC –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: %d\n", parsedSR.SSRC)
	fmt.Printf("  NTP –≤—Ä–µ–º—è: %s\n", NTPTimestampToTime(parsedSR.NTPTimestamp))
	fmt.Printf("  RTP –≤—Ä–µ–º—è: %d\n", parsedSR.RTPTimestamp)
	fmt.Printf("  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: %d\n", parsedSR.SenderPackets)
	fmt.Printf("  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ–∫—Ç–µ—Ç–æ–≤: %d\n", parsedSR.SenderOctets)

	if len(parsedSR.ReceptionReports) > 0 {
		rr := parsedSR.ReceptionReports[0]
		fmt.Printf("\nReception Report –∞–Ω–∞–ª–∏–∑:\n")
		fmt.Printf("  SSRC –∏—Å—Ç–æ—á–Ω–∏–∫–∞: %d\n", rr.SSRC)

		lossPercent := float64(rr.FractionLost) / 256.0 * 100.0
		fmt.Printf("  –ü–æ—Ç–µ—Ä–∏: %.2f%% (fraction=%d, cumulative=%d)\n",
			lossPercent, rr.FractionLost, rr.CumulativeLost)

		fmt.Printf("  –ù–∞–∏–≤—ã—Å—à–∏–π seq num: %d\n", rr.HighestSeqNum)
		fmt.Printf("  Jitter: %d RTP units\n", rr.Jitter)

		// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º jitter –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã –¥–ª—è –∞—É–¥–∏–æ (8kHz)
		jitterMs := float64(rr.Jitter) / 8.0
		fmt.Printf("  Jitter: %.2f –º—Å (–¥–ª—è 8kHz –∞—É–¥–∏–æ)\n", jitterMs)
	}

	fmt.Println("\n–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.")
}

// RTCPIntervalExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ RTCP
func RTCPIntervalExample() {
	fmt.Println("=== –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á–µ—Ç–∞ RTCP –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ ===")

	// –†–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
	scenarios := []struct {
		name    string
		members int
		senders int
		rtcpBW  float64
		we_sent bool
		initial bool
	}{
		{"–ú–∞–ª–∞—è –≥—Ä—É–ø–ø–∞", 2, 2, 5.0, true, true},
		{"–°—Ä–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞", 10, 3, 5.0, true, false},
		{"–ë–æ–ª—å—à–∞—è –≥—Ä—É–ø–ø–∞", 100, 5, 5.0, false, false},
		{"–ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è", 500, 10, 2.5, false, false},
		{"–ü—Ä–∏–µ–º–Ω–∏–∫ —Ç–æ–ª—å–∫–æ", 50, 10, 5.0, false, false},
	}

	for _, scenario := range scenarios {
		interval := RTCPIntervalCalculation(
			scenario.members,
			scenario.senders,
			scenario.rtcpBW,
			scenario.we_sent,
			200, // avg RTCP size
			scenario.initial,
		)

		fmt.Printf("%s: —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤=%d, –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–π=%d, –∏–Ω—Ç–µ—Ä–≤–∞–ª=%.1f —Å–µ–∫\n",
			scenario.name, scenario.members, scenario.senders, interval.Seconds())
	}

	fmt.Println("\n–†–∞—Å—á–µ—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω.")
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤
func RunAllRTCPExamples() {
	fmt.Println("üéµ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–æ–≤ RTCP —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
	fmt.Println("=====================================")

	// –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã (–Ω–µ —Ç—Ä–µ–±—É—é—Ç —Å–µ—Ç–∏)
	RTCPStatisticsExample()
	fmt.Println()
	RTCPIntervalExample()
	fmt.Println()

	// –°–µ—Ç–µ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –Ω—É–∂–Ω—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞)
	fmt.Println("–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°–µ—Ç–µ–≤—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
	fmt.Println("RTCPExample() –∏ MultiplexedRTCPExample() –≥–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∞–¥—Ä–µ—Å–∞–º–∏")

	fmt.Println("\n‚úÖ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã RTCP –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
}
