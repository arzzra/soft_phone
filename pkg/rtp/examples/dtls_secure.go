// –ü—Ä–∏–º–µ—Ä –∑–∞—â–∏—â–µ–Ω–Ω–æ–π RTP –ø–µ—Ä–µ–¥–∞—á–∏ —á–µ—Ä–µ–∑ DTLS
// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏
package examples

import (
	"crypto/tls"
	"fmt"
	"net"
	"strings"
	"time"

	"github.com/arzzra/soft_phone/pkg/rtp"
	rtppion "github.com/pion/rtp"
)

// DTLSSecureExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π RTP —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ DTLS
// –ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –∏ WebRTC —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
func DTLSSecureExample() error {
	fmt.Println("=== –ü—Ä–∏–º–µ—Ä –∑–∞—â–∏—â–µ–Ω–Ω–æ–π RTP –ø–µ—Ä–µ–¥–∞—á–∏ —á–µ—Ä–µ–∑ DTLS ===")

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	var securityStats struct {
		EncryptedPackets uint64
		DecryptedPackets uint64
		HandshakeTime    time.Duration
		CipherSuite      string
		CertificateInfo  string
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
	manager := rtp.NewSessionManager(rtp.DefaultSessionManagerConfig())
	defer manager.StopAll()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º DTLS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞)
	_ = &tls.Config{
		// –í production –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
		InsecureSkipVerify: true, // –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞!

		// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º DTLS 1.2 –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å WebRTC
		MinVersion: tls.VersionTLS12,
		MaxVersion: tls.VersionTLS12,

		// –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º cipher suites –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		CipherSuites: []uint16{
			tls.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,
			tls.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,
		},

		// Callback –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
		VerifyConnection: func(cs tls.ConnectionState) error {
			securityStats.CipherSuite = tls.CipherSuiteName(cs.CipherSuite)
			if len(cs.PeerCertificates) > 0 {
				cert := cs.PeerCertificates[0]
				securityStats.CertificateInfo = fmt.Sprintf("%s (expires: %s)",
					cert.Subject.CommonName, cert.NotAfter.Format("2006-01-02"))
			}
			fmt.Printf("üîê DTLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n")
			fmt.Printf("  üîí Cipher Suite: %s\n", securityStats.CipherSuite)
			fmt.Printf("  üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: %s\n", securityStats.CertificateInfo)
			return nil
		},
	}

	// –°–æ–∑–¥–∞–µ–º DTLS —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
	fmt.Println("ü§ù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DTLS —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...")
	handshakeStart := time.Now()

	dtlsTransportConfig := rtp.DefaultDTLSTransportConfig()
	dtlsTransportConfig.LocalAddr = ":5020"
	dtlsTransportConfig.RemoteAddr = "192.168.1.100:5020"
	dtlsTransportConfig.InsecureSkipVerify = true // –¢–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞!

	dtlsTransport, err := rtp.NewDTLSTransport(dtlsTransportConfig)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è DTLS —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: %w", err)
	}

	securityStats.HandshakeTime = time.Since(handshakeStart)
	fmt.Printf("‚úÖ DTLS handshake –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ %v\n", securityStats.HandshakeTime)

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
	sessionConfig := rtp.SessionConfig{
		PayloadType: rtp.PayloadTypePCMA, // G.711 A-law
		MediaType:   rtp.MediaTypeAudio,
		ClockRate:   8000,
		Transport:   dtlsTransport, // –ò—Å–ø–æ–ª—å–∑—É–µ–º DTLS —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç

		LocalSDesc: rtp.SourceDescription{
			CNAME: "secure-user@encrypted.call",
			NAME:  "Secure User",
			TOOL:  "DTLS Secure Example",
		},

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
		OnPacketReceived: func(packet *rtppion.Packet, addr net.Addr) {
			securityStats.DecryptedPackets++

			if securityStats.DecryptedPackets%100 == 0 {
				fmt.Printf("üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: %d\n", securityStats.DecryptedPackets)
			}

			// –ó–¥–µ—Å—å –ø–∞–∫–µ—Ç —É–∂–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω DTLS —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
			// –ú–æ–∂–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
		},

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ RTCP —á–µ—Ä–µ–∑ —Ç–æ—Ç –∂–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
		OnRTCPReceived: func(packet rtp.RTCPPacket, addr net.Addr) {
			switch p := packet.(type) {
			case *rtp.SenderReport:
				fmt.Printf("üîê –ó–∞—â–∏—â–µ–Ω–Ω—ã–π RTCP SR: SSRC=%d, –ø–∞–∫–µ—Ç–æ–≤=%d\n",
					p.SSRC, p.SenderPackets)

			case *rtp.ReceiverReport:
				fmt.Printf("üîê –ó–∞—â–∏—â–µ–Ω–Ω—ã–π RTCP RR: –æ—Ç—á–µ—Ç–æ–≤=%d\n", len(p.ReceptionReports))

				// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
				for _, rr := range p.ReceptionReports {
					lossPercent := float64(rr.FractionLost) / 256.0 * 100.0
					fmt.Printf("  üõ°Ô∏è  –ö–∞—á–µ—Å—Ç–≤–æ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏: –ø–æ—Ç–µ—Ä–∏ %.1f%%, jitter %d\n",
						lossPercent, rr.Jitter)
				}
			}
		},
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
	session, err := manager.CreateSession("secure-call", sessionConfig)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏: %w", err)
	}

	err = session.Start()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏: %w", err)
	}

	fmt.Printf("üõ°Ô∏è  –ó–∞—â–∏—â–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞: SSRC=%d\n", session.GetSSRC())

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SDES —á–µ—Ä–µ–∑ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
	err = session.SendSourceDescription()
	if err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ SDES: %v\n", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ
	fmt.Println("üîí –ù–∞—á–∏–Ω–∞–µ–º –∑–∞—â–∏—â–µ–Ω–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –∞—É–¥–∏–æ...")
	go sendSecureAudio(session, &securityStats)

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	go monitorSecurity(session, &securityStats)

	// –†–∞–±–æ—Ç–∞–µ–º 45 —Å–µ–∫—É–Ω–¥
	fmt.Println("‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ 45 —Å–µ–∫—É–Ω–¥...")
	time.Sleep(45 * time.Second)

	// –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
	printSecurityReport(session, &securityStats)

	return nil
}

// sendSecureAudio –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
func sendSecureAudio(session *rtp.Session, stats *struct {
	EncryptedPackets uint64
	DecryptedPackets uint64
	HandshakeTime    time.Duration
	CipherSuite      string
	CertificateInfo  string
}) {
	// G.711 A-law —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	audioFrame := make([]byte, 160) // 20ms G.711

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª
	for i := range audioFrame {
		// A-law silence pattern
		audioFrame[i] = 0xD5 // A-law silence
	}

	ticker := time.NewTicker(20 * time.Millisecond)
	defer ticker.Stop()

	for range ticker.C {
		err := session.SendAudio(audioFrame, 20*time.Millisecond)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ: %v\n", err)
			return
		}

		stats.EncryptedPackets++

		// –ö–∞–∂–¥—ã–µ 200 –ø–∞–∫–µ—Ç–æ–≤ –≤—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
		if stats.EncryptedPackets%200 == 0 {
			fmt.Printf("üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: %d\n", stats.EncryptedPackets)
		}
	}
}

// monitorSecurity –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
func monitorSecurity(session *rtp.Session, stats *struct {
	EncryptedPackets uint64
	DecryptedPackets uint64
	HandshakeTime    time.Duration
	CipherSuite      string
	CertificateInfo  string
}) {
	ticker := time.NewTicker(15 * time.Second)
	defer ticker.Stop()

	for range ticker.C {
		sessionStats := session.GetStatistics()

		fmt.Printf("\nüõ°Ô∏è  === –û—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ ===\n")
		fmt.Printf("üîê –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∑–∞—â–∏—Ç–∞:\n")
		fmt.Printf("  üîí Cipher Suite: %s\n", stats.CipherSuite)
		fmt.Printf("  üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: %s\n", stats.CertificateInfo)
		fmt.Printf("  ‚è±Ô∏è  –í—Ä–µ–º—è handshake: %v\n", stats.HandshakeTime)

		fmt.Printf("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏:\n")
		fmt.Printf("  üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤\n", stats.EncryptedPackets)
		fmt.Printf("  üîì –ü–æ–ª—É—á–µ–Ω–æ –∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤\n", stats.DecryptedPackets)
		fmt.Printf("  üì§ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤ (%d –±–∞–π—Ç)\n",
			sessionStats.PacketsSent, sessionStats.BytesSent)
		fmt.Printf("  üì• –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤ (%d –±–∞–π—Ç)\n",
			sessionStats.PacketsReceived, sessionStats.BytesReceived)

		// –í—ã—á–∏—Å–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
		if sessionStats.PacketsSent > 0 {
			encryptionOverhead := float64(sessionStats.BytesSent)/float64(stats.EncryptedPackets*160)*100 - 100
			fmt.Printf("  üìà –ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è: +%.1f%%\n", encryptionOverhead)
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
		sources := session.GetSources()
		fmt.Printf("\nüîê –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: %d\n", len(sources))
		for ssrc, source := range sources {
			fmt.Printf("  SSRC=%d: %s (–∑–∞—â–∏—â–µ–Ω DTLS)\n",
				ssrc, source.Description.CNAME)
		}
		fmt.Println()
	}
}

// printSecurityReport –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func printSecurityReport(session *rtp.Session, stats *struct {
	EncryptedPackets uint64
	DecryptedPackets uint64
	HandshakeTime    time.Duration
	CipherSuite      string
	CertificateInfo  string
}) {
	sessionStats := session.GetStatistics()

	fmt.Printf("\nüõ°Ô∏è  === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò ===\n")

	fmt.Printf("\nüîê –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n")
	fmt.Printf("  üîí –ü—Ä–æ—Ç–æ–∫–æ–ª: DTLS 1.2\n")
	fmt.Printf("  üîí Cipher Suite: %s\n", stats.CipherSuite)
	fmt.Printf("  üìú –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: %s\n", stats.CertificateInfo)
	fmt.Printf("  ‚è±Ô∏è  –í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞—â–∏—â–µ–Ω–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: %v\n", stats.HandshakeTime)

	fmt.Printf("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π —Å–µ—Å—Å–∏–∏:\n")
	fmt.Printf("  üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 45 —Å–µ–∫—É–Ω–¥\n")
	fmt.Printf("  üÜî SSRC: %d\n", session.GetSSRC())
	fmt.Printf("  üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤\n", stats.EncryptedPackets)
	fmt.Printf("  üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤\n", stats.DecryptedPackets)

	fmt.Printf("\nüìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:\n")
	if sessionStats.PacketsSent > 0 {
		avgBitrate := float64(sessionStats.BytesSent*8) / (45 * 1000)
		encryptionOverhead := float64(sessionStats.BytesSent)/float64(stats.EncryptedPackets*160)*100 - 100
		fmt.Printf("  üìä –°—Ä–µ–¥–Ω–∏–π –±–∏—Ç—Ä–µ–π—Ç: %.1f kbps\n", avgBitrate)
		fmt.Printf("  üìà –ù–∞–∫–ª–∞–¥–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã DTLS: +%.1f%%\n", encryptionOverhead)
	}

	fmt.Printf("  üìâ –ü–æ—Ç–µ—Ä–∏: %d –ø–∞–∫–µ—Ç–æ–≤\n", sessionStats.PacketsLost)
	fmt.Printf("  üìà Jitter: %.2f –º—Å\n", sessionStats.Jitter)

	fmt.Printf("\nüîí –£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n")
	securityLevel := assessSecurityLevel(stats.CipherSuite, stats.HandshakeTime)
	fmt.Printf("  üõ°Ô∏è  –û—Ü–µ–Ω–∫–∞: %s\n", securityLevel)

	fmt.Printf("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:\n")
	printSecurityRecommendations(stats.CipherSuite, stats.HandshakeTime)

	fmt.Printf("\n‚úÖ –ó–∞—â–∏—â–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n")
}

// assessSecurityLevel –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func assessSecurityLevel(cipherSuite string, handshakeTime time.Duration) string {
	score := 0

	// –û—Ü–µ–Ω–∫–∞ cipher suite
	if contains(cipherSuite, "GCM") {
		score += 3 // –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
	}
	if contains(cipherSuite, "ECDHE") {
		score += 2 // Perfect Forward Secrecy
	}
	if contains(cipherSuite, "AES_128") {
		score += 2 // –°–∏–ª—å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
	}

	// –û—Ü–µ–Ω–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ handshake
	if handshakeTime < 2*time.Second {
		score += 1
	}

	switch {
	case score >= 7:
		return "üü¢ –í—ã—Å–æ–∫–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è production)"
	case score >= 5:
		return "üü° –°—Ä–µ–¥–Ω–∏–π (–ø—Ä–∏–µ–º–ª–µ–º–æ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ —Å–ª—É—á–∞–µ–≤)"
	case score >= 3:
		return "üü† –ë–∞–∑–æ–≤—ã–π (—Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π)"
	default:
		return "üî¥ –ù–∏–∑–∫–∏–π (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è production)"
	}
}

// printSecurityRecommendations –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
func printSecurityRecommendations(cipherSuite string, handshakeTime time.Duration) {
	if !contains(cipherSuite, "GCM") {
		fmt.Printf("  üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ cipher suites —Å GCM –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏\n")
	}
	if !contains(cipherSuite, "ECDHE") {
		fmt.Printf("  üîß –í–∫–ª—é—á–∏—Ç–µ ECDHE –¥–ª—è Perfect Forward Secrecy\n")
	}
	if handshakeTime > 5*time.Second {
		fmt.Printf("  üîß –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ —Å–µ—Ç–µ–≤—É—é –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ handshake\n")
	}
	if contains(cipherSuite, "AES_128") {
		fmt.Printf("  ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å–∏–ª—å–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ AES-128\n")
	}

	fmt.Printf("  üõ°Ô∏è  –í production –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã\n")
	fmt.Printf("  üîê –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏\n")
	fmt.Printf("  üìã –í–µ–¥–∏—Ç–µ –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π\n")
}

// contains –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –ø–æ–¥—Å—Ç—Ä–æ–∫–∏
func contains(s, substr string) bool {
	return len(s) >= len(substr) && (s == substr ||
		(len(s) > len(substr) && (s[:len(substr)] == substr || s[len(s)-len(substr):] == substr ||
			strings.Contains(s, substr))))
}

// RunDTLSSecureExample –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
func RunDTLSSecureExample() {
	fmt.Println("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π DTLS –ø–µ—Ä–µ–¥–∞—á–∏...")

	err := DTLSSecureExample()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞: %v\n", err)
	}
}

// –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
// 1. –ù–∞—Å—Ç—Ä–æ–π–∫—É DTLS —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è –∑–∞—â–∏—â–µ–Ω–Ω–æ–π RTP –ø–µ—Ä–µ–¥–∞—á–∏
// 2. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
// 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
// 4. –ê–Ω–∞–ª–∏–∑ –Ω–∞–∫–ª–∞–¥–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
// 5. –û—Ü–µ–Ω–∫—É —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
// 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
