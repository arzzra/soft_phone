// –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–π RTP —Å–µ—Å—Å–∏–∏ –¥–ª—è G.711 —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏
// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–≤—è–∑–∏
package examples

import (
	"fmt"
	"net"
	"time"

	"github.com/arzzra/soft_phone/pkg/rtp"
	rtppion "github.com/pion/rtp"
)

// BasicSessionExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π RTP —Å–µ—Å—Å–∏–∏ –¥–ª—è G.711 –∞—É–¥–∏–æ
// –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –±–∞–∑–æ–≤–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π —Å–≤—è–∑–∏ –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
func BasicSessionExample() error {
	fmt.Println("=== –ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–π RTP —Å–µ—Å—Å–∏–∏ ===")

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–≤–æ–Ω–∫–∞–º–∏
	manager := rtp.NewSessionManager(rtp.DefaultSessionManagerConfig())
	defer manager.StopAll()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –∞—É–¥–∏–æ
	// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø–æ—Ä—Ç—ã –¥–ª—è RTP/RTCP
	rtpTransport, err := rtp.NewUDPTransport(rtp.TransportConfig{
		LocalAddr:  ":5004",              // –õ–æ–∫–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è RTP
		RemoteAddr: "192.168.1.100:5004", // –£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
		BufferSize: 1500,                 // MTU –¥–ª—è Ethernet
	})
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: %w", err)
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RTCP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (RTP –ø–æ—Ä—Ç + 1)
	rtcpTransport, err := rtp.NewUDPRTCPTransport(rtp.RTCPTransportConfig{
		LocalAddr:  ":5005",              // RTCP –ø–æ—Ä—Ç (RTP + 1)
		RemoteAddr: "192.168.1.100:5005", // –£–¥–∞–ª–µ–Ω–Ω—ã–π RTCP –∞–¥—Ä–µ—Å
		BufferSize: 1500,
	})
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RTCP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: %w", err)
	}

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º RTP —Å–µ—Å—Å–∏—é –¥–ª—è G.711 Œº-law (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏)
	sessionConfig := rtp.SessionConfig{
		PayloadType:   rtp.PayloadTypePCMU, // G.711 Œº-law (64 kbps, 8kHz)
		MediaType:     rtp.MediaTypeAudio,  // –ê—É–¥–∏–æ –º–µ–¥–∏–∞
		ClockRate:     8000,                // 8kHz –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏
		Transport:     rtpTransport,        // RTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
		RTCPTransport: rtcpTransport,       // RTCP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

		// –û–ø–∏—Å–∞–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω–µ)
		LocalSDesc: rtp.SourceDescription{
			CNAME: "basicuser@192.168.1.50", // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
			NAME:  "Basic User",             // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
			TOOL:  "BasicSession Example",   // –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
		},

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö RTP –ø–∞–∫–µ—Ç–æ–≤
		OnPacketReceived: func(packet *rtppion.Packet, addr net.Addr) {
			fmt.Printf("üì¶ RTP –ø–∞–∫–µ—Ç: SSRC=%d, Seq=%d, —Ä–∞–∑–º–µ—Ä=%d –±–∞–π—Ç –æ—Ç %s\n",
				packet.SSRC, packet.SequenceNumber, len(packet.Payload), addr)

			// –ó–¥–µ—Å—å –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∞—É–¥–∏–æ
			// audioData := packet.Payload
			// audioPlayer.Play(audioData)
		},

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏)
		OnSourceAdded: func(ssrc uint32) {
			fmt.Printf("üë§ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: SSRC=%d\n", ssrc)
		},

		// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ RTCP –ø–∞–∫–µ—Ç–æ–≤ (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞)
		OnRTCPReceived: func(packet rtp.RTCPPacket, addr net.Addr) {
			switch p := packet.(type) {
			case *rtp.SenderReport:
				fmt.Printf("üìä Sender Report: SSRC=%d, –ø–∞–∫–µ—Ç–æ–≤=%d, –±–∞–π—Ç=%d\n",
					p.SSRC, p.SenderPackets, p.SenderOctets)

			case *rtp.ReceiverReport:
				fmt.Printf("üìà Receiver Report: SSRC=%d, –æ—Ç—á–µ—Ç–æ–≤=%d\n",
					p.SSRC, len(p.ReceptionReports))

				// –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞—à–µ–π –ø–µ—Ä–µ–¥–∞—á–∏
				for _, rr := range p.ReceptionReports {
					// TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å SSRC —Å–µ—Å—Å–∏–∏
					lossPercent := float64(rr.FractionLost) / 256.0 * 100.0
					fmt.Printf("  üìâ –ö–∞—á–µ—Å—Ç–≤–æ: –ø–æ—Ç–µ—Ä–∏ %.1f%%, jitter %d\n",
						lossPercent, rr.Jitter)
				}

			case *rtp.SourceDescriptionPacket:
				fmt.Printf("üè∑Ô∏è  –û–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: %d —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n", len(p.Chunks))
				for _, chunk := range p.Chunks {
					fmt.Printf("  SSRC=%d\n", chunk.Source)
					for _, item := range chunk.Items {
						switch item.Type {
						case rtp.SDESTypeCNAME:
							fmt.Printf("    CNAME: %s\n", string(item.Text))
						case rtp.SDESTypeName:
							fmt.Printf("    NAME: %s\n", string(item.Text))
						}
					}
				}
			}
		},
	}

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
	session, err := manager.CreateSession("basic-call-001", sessionConfig)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: %w", err)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é (–Ω–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–∏–µ–º –ø–∞–∫–µ—Ç–æ–≤ –∏ RTCP)
	err = session.Start()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏: %w", err)
	}

	fmt.Printf("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞: SSRC=%d\n", session.GetSSRC())

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SDES –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–µ–±—è
	err = session.SendSourceDescription()
	if err != nil {
		fmt.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SDES: %v\n", err)
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ (G.711 Œº-law silence)
	fmt.Println("üéµ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –∞—É–¥–∏–æ...")

	// G.711 Œº-law silence (0xFF = —Ç–∏—à–∏–Ω–∞ –≤ Œº-law)
	audioFrame := make([]byte, 160) // 20ms –ø—Ä–∏ 8kHz = 160 samples
	for i := range audioFrame {
		audioFrame[i] = 0xFF // Œº-law silence
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –∫–∞–∂–¥—ã–µ 20ms (—Å—Ç–∞–Ω–¥–∞—Ä—Ç –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∏–∏)
	ticker := time.NewTicker(20 * time.Millisecond)
	defer ticker.Stop()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		packetCount := 0
		for range ticker.C {
			err := session.SendAudio(audioFrame, 20*time.Millisecond)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: %v\n", err)
				return
			}

			packetCount++
			if packetCount%50 == 0 { // –ö–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
				fmt.Printf("üì° –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d –ø–∞–∫–µ—Ç–æ–≤\n", packetCount)
			}
		}
	}()

	// –†–∞–±–æ—Ç–∞–µ–º 30 —Å–µ–∫—É–Ω–¥
	fmt.Println("‚è±Ô∏è  –†–∞–±–æ—Ç–∞–µ–º 30 —Å–µ–∫—É–Ω–¥...")
	time.Sleep(30 * time.Second)

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	stats := session.GetStatistics()
	fmt.Printf("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:\n")
	fmt.Printf("  –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤, %d –±–∞–π—Ç\n",
		stats.PacketsSent, stats.BytesSent)
	fmt.Printf("  –ü–æ–ª—É—á–µ–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤, %d –±–∞–π—Ç\n",
		stats.PacketsReceived, stats.BytesReceived)
	fmt.Printf("  –ü–æ—Ç–µ—Ä—è–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤\n", stats.PacketsLost)
	fmt.Printf("  Jitter: %.2f –º—Å\n", stats.Jitter)
	fmt.Printf("  –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %s\n", stats.LastActivity.Format("15:04:05"))

	// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö
	sources := session.GetSources()
	fmt.Printf("\nüë• –£–¥–∞–ª–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ (%d):\n", len(sources))
	for ssrc, source := range sources {
		fmt.Printf("  SSRC=%d: %s, –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞–∫–µ—Ç %s\n",
			ssrc, source.Description.CNAME, source.LastSeen.Format("15:04:05"))
	}

	fmt.Println("‚úÖ –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
	return nil
}

// RunBasicSessionExample –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
func RunBasicSessionExample() {
	fmt.Println("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ –±–∞–∑–æ–≤–æ–π RTP —Å–µ—Å—Å–∏–∏...")

	err := BasicSessionExample()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞: %v\n", err)
	}
}

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ main —Ñ—É–Ω–∫—Ü–∏–∏:
//
// func main() {
//     examples.RunBasicSessionExample()
// }
//
// –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
// 1. –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–π RTP —Å–µ—Å—Å–∏–∏ –¥–ª—è G.711 Œº-law
// 2. –ù–∞—Å—Ç—Ä–æ–π–∫—É RTP/RTCP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö
// 3. –û–±—Ä–∞–±–æ—Ç–∫—É –≤—Ö–æ–¥—è—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤ –∏ RTCP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
// 4. –û—Ç–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
// 5. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ RTCP
// 6. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º —Å–µ—Å—Å–∏–∏
