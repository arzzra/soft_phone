// –ü—Ä–∏–º–µ—Ä –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ RTCP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–∏
// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ RTP –ø–µ—Ä–µ–¥–∞—á–∏
package examples

import (
	"fmt"
	"math"
	"net"
	"time"

	"github.com/arzzra/soft_phone/pkg/rtp"
	rtppion "github.com/pion/rtp"
)

// QualityMetrics —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–∏
type QualityMetrics struct {
	PacketsLost    uint32    // –ü–æ—Ç–µ—Ä—è–Ω–æ –ø–∞–∫–µ—Ç–æ–≤
	LossPercentage float64   // –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å
	Jitter         float64   // Jitter –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
	RTT            float64   // Round Trip Time –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
	LastUpdate     time.Time // –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
	TotalPackets   uint64    // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–∫–µ—Ç–æ–≤
	BitrateKbps    float64   // –ë–∏—Ç—Ä–µ–π—Ç –≤ kbps
	QualityScore   int       // –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ (1-5)
}

// RTCPMonitoringExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ RTCP
func RTCPMonitoringExample() error {
	fmt.Println("=== –ü—Ä–∏–º–µ—Ä RTCP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–∏ ===")

	// –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
	var localMetrics, remoteMetrics QualityMetrics
	var lastStatsTime time.Time

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
	manager := rtp.NewSessionManager(rtp.DefaultSessionManagerConfig())
	defer manager.StopAll()

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
	rtpTransport, err := rtp.NewUDPTransport(rtp.TransportConfig{
		LocalAddr:  ":5010",
		RemoteAddr: "192.168.1.100:5010",
		BufferSize: 1500,
	})
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: %w", err)
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º RTCP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç —Å –∫–æ—Ä–æ—Ç–∫–∏–º –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	rtcpTransport, err := rtp.NewUDPRTCPTransport(rtp.RTCPTransportConfig{
		LocalAddr:  ":5011",
		RemoteAddr: "192.168.1.100:5011",
		BufferSize: 1500,
	})
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RTCP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: %w", err)
	}

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
	sessionConfig := rtp.SessionConfig{
		PayloadType:   rtp.PayloadTypeG722, // G.722 –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
		MediaType:     rtp.MediaTypeAudio,
		ClockRate:     8000, // G.722 clock rate
		Transport:     rtpTransport,
		RTCPTransport: rtcpTransport,

		LocalSDesc: rtp.SourceDescription{
			CNAME: "monitor@quality.analyzer",
			NAME:  "Quality Monitor",
			TOOL:  "RTCP Monitoring Example",
		},

		// –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö RTP –ø–∞–∫–µ—Ç–æ–≤ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
		OnPacketReceived: func(packet *rtppion.Packet, addr net.Addr) {
			now := time.Now()

			// –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è
			localMetrics.TotalPackets++
			localMetrics.LastUpdate = now

			// –í—ã—á–∏—Å–ª—è–µ–º –±–∏—Ç—Ä–µ–π—Ç –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
			if !lastStatsTime.IsZero() && now.Sub(lastStatsTime) >= 5*time.Second {
				duration := now.Sub(lastStatsTime).Seconds()
				bytesReceived := float64(len(packet.Payload)) * float64(localMetrics.TotalPackets)
				localMetrics.BitrateKbps = (bytesReceived * 8) / (duration * 1000)
				lastStatsTime = now
			} else if lastStatsTime.IsZero() {
				lastStatsTime = now
			}

			// –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π 100-–π –ø–∞–∫–µ—Ç
			if localMetrics.TotalPackets%100 == 0 {
				fmt.Printf("üì¶ –ü–æ–ª—É—á–µ–Ω–æ –ø–∞–∫–µ—Ç–æ–≤: %d, –±–∏—Ç—Ä–µ–π—Ç: %.1f kbps\n",
					localMetrics.TotalPackets, localMetrics.BitrateKbps)
			}
		},
	}

	// –ü—Ä–æ—Å—Ç–æ–π RTCP –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
	sessionConfig.OnRTCPReceived = func(packet rtp.RTCPPacket, addr net.Addr) {
		now := time.Now()

		switch p := packet.(type) {
		case *rtp.SenderReport:
			fmt.Printf("üìä Sender Report –æ—Ç SSRC=%d:\n", p.SSRC)
			fmt.Printf("  üìà –ü–∞–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n", p.SenderPackets)
			fmt.Printf("  üìà –ë–∞–π—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d\n", p.SenderOctets)

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Reception Reports
			for _, rr := range p.ReceptionReports {
				analyzeReceptionReport(rr, &remoteMetrics, now)
			}

		case *rtp.ReceiverReport:
			fmt.Printf("üìà Receiver Report –æ—Ç SSRC=%d:\n", p.SSRC)

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º Reception Reports
			for _, rr := range p.ReceptionReports {
				analyzeReceptionReport(rr, &remoteMetrics, now)
			}
		}
	}

	// –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
	session, err := manager.CreateSession("quality-monitor", sessionConfig)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏: %w", err)
	}

	err = session.Start()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏: %w", err)
	}

	fmt.Printf("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω: SSRC=%d\n", session.GetSSRC())

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SDES
	session.SendSourceDescription()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞—É–¥–∏–æ G.722
	go sendTestAudio(session)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞
	go startQualityMonitoring(session, &localMetrics, &remoteMetrics)

	// –ú–æ–Ω–∏—Ç–æ—Ä–∏–º 60 —Å–µ–∫—É–Ω–¥
	fmt.Println("‚è±Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ 60 —Å–µ–∫—É–Ω–¥...")
	time.Sleep(60 * time.Second)

	// –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ
	printQualityReport(session, &localMetrics, &remoteMetrics)

	return nil
}

// analyzeReceptionReport –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç Reception Report –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –º–µ—Ç—Ä–∏–∫–∏
func analyzeReceptionReport(rr rtp.ReceptionReport, metrics *QualityMetrics, now time.Time) {
	// –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ—Ç–µ—Ä—å
	if rr.CumulativeLost > 0 && rr.HighestSeqNum > 0 {
		expectedPackets := rr.HighestSeqNum + 1
		metrics.LossPercentage = float64(rr.CumulativeLost) / float64(expectedPackets) * 100.0
	}

	// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º jitter –∏–∑ RTP units –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã (–¥–ª—è G.722 8kHz clock)
	metrics.Jitter = float64(rr.Jitter) / 8.0 // 8000 Hz = 8 units per ms

	// –í—ã—á–∏—Å–ª—è–µ–º RTT –µ—Å–ª–∏ –µ—Å—Ç—å LSR –¥–∞–Ω–Ω—ã–µ
	if rr.LastSR != 0 && rr.DelaySinceLastSR != 0 {
		// RTT = delay since last SR * (1/65536) —Å–µ–∫—É–Ω–¥—ã * 1000 (–≤ –º—Å)
		metrics.RTT = float64(rr.DelaySinceLastSR) / 65536.0 * 1000.0
	}

	metrics.PacketsLost = rr.CumulativeLost
	metrics.LastUpdate = now

	// –í—ã—á–∏—Å–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ (1-5)
	metrics.QualityScore = calculateQualityScore(metrics.LossPercentage, metrics.Jitter, metrics.RTT)

	// –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
	fmt.Printf("  üìä –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:\n")
	fmt.Printf("    üìâ –ü–æ—Ç–µ—Ä–∏: %d –ø–∞–∫–µ—Ç–æ–≤ (%.2f%%)\n", metrics.PacketsLost, metrics.LossPercentage)
	fmt.Printf("    üìà Jitter: %.2f –º—Å\n", metrics.Jitter)
	if metrics.RTT > 0 {
		fmt.Printf("    üîÑ RTT: %.2f –º—Å\n", metrics.RTT)
	}
	fmt.Printf("    ‚≠ê –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: %d/5 %s\n",
		metrics.QualityScore, getQualityEmoji(metrics.QualityScore))
}

// calculateQualityScore –≤—ã—á–∏—Å–ª—è–µ—Ç –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ –æ—Ç 1 –¥–æ 5
func calculateQualityScore(lossPercent, jitter, rtt float64) int {
	score := 5.0

	// –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤
	if lossPercent > 0.1 {
		score -= 0.5
	}
	if lossPercent > 0.5 {
		score -= 0.5
	}
	if lossPercent > 1.0 {
		score -= 1.0
	}
	if lossPercent > 3.0 {
		score -= 2.0
	}

	// –®—Ç—Ä–∞—Ñ—ã –∑–∞ jitter
	if jitter > 10 {
		score -= 0.5
	}
	if jitter > 30 {
		score -= 1.0
	}
	if jitter > 50 {
		score -= 1.5
	}

	// –®—Ç—Ä–∞—Ñ—ã –∑–∞ RTT
	if rtt > 150 {
		score -= 0.5
	}
	if rtt > 300 {
		score -= 1.0
	}

	if score < 1 {
		score = 1
	}

	return int(score)
}

// getQualityEmoji –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
func getQualityEmoji(score int) string {
	switch score {
	case 5:
		return "üü¢ –û—Ç–ª–∏—á–Ω–æ–µ"
	case 4:
		return "üü° –•–æ—Ä–æ—à–µ–µ"
	case 3:
		return "üü† –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ"
	case 2:
		return "üî¥ –ü–ª–æ—Ö–æ–µ"
	default:
		return "üíÄ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ"
	}
}

// sendTestAudio –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–æ–π
func sendTestAudio(session *rtp.Session) {
	// G.722 frame size (20ms –ø—Ä–∏ 16kHz sampling, –Ω–æ RTP clock 8kHz)
	frameSize := 160 // 20ms –¥–ª—è G.722
	audioFrame := make([]byte, frameSize)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∏–Ω—É—Å–æ–∏–¥–∞–ª—å–Ω—ã–π —Ç–æ–Ω
	for i := 0; i < frameSize; i++ {
		audioFrame[i] = byte(128 + 64*math.Sin(2*math.Pi*float64(i)/float64(frameSize)))
	}

	ticker := time.NewTicker(20 * time.Millisecond)
	defer ticker.Stop()

	packetCount := 0
	for range ticker.C {
		// –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å–µ—Ç–∏ (–∫–∞–∂–¥—ã–µ 200 –ø–∞–∫–µ—Ç–æ–≤ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º 5)
		if packetCount%200 >= 195 {
			packetCount++
			continue // –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ—Ç–µ—Ä—é –ø–∞–∫–µ—Ç–∞
		}

		err := session.SendAudio(audioFrame, 20*time.Millisecond)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ: %v\n", err)
			return
		}

		packetCount++
	}
}

// startQualityMonitoring –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞
func startQualityMonitoring(session *rtp.Session, local, remote *QualityMetrics) {
	ticker := time.NewTicker(10 * time.Second)
	defer ticker.Stop()

	for range ticker.C {
		stats := session.GetStatistics()

		fmt.Printf("\nüìä === –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ ===\n")
		fmt.Printf("üîó –õ–æ–∫–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
		fmt.Printf("  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤, %d –±–∞–π—Ç\n",
			stats.PacketsSent, stats.BytesSent)
		fmt.Printf("  üì• –ü–æ–ª—É—á–µ–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤, %d –±–∞–π—Ç\n",
			stats.PacketsReceived, stats.BytesReceived)

		if stats.PacketsSent > 0 {
			local.BitrateKbps = float64(stats.BytesSent*8) / (time.Since(stats.LastActivity).Seconds() * 1000)
			fmt.Printf("  üìä –ë–∏—Ç—Ä–µ–π—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏: %.1f kbps\n", local.BitrateKbps)
		}

		fmt.Printf("  üìà Jitter: %.2f –º—Å\n", stats.Jitter)
		fmt.Printf("  ‚è∞ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %s\n",
			stats.LastActivity.Format("15:04:05"))

		if !remote.LastUpdate.IsZero() {
			fmt.Printf("\nüåê –£–¥–∞–ª–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞:\n")
			fmt.Printf("  üìâ –ü–æ—Ç–µ—Ä–∏: %.2f%%\n", remote.LossPercentage)
			fmt.Printf("  üìà Jitter: %.2f –º—Å\n", remote.Jitter)
			if remote.RTT > 0 {
				fmt.Printf("  üîÑ RTT: %.2f –º—Å\n", remote.RTT)
			}
			fmt.Printf("  ‚≠ê –û—Ü–µ–Ω–∫–∞: %s\n", getQualityEmoji(remote.QualityScore))
		}

		// –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
		sources := session.GetSources()
		fmt.Printf("\nüë• –ê–∫—Ç–∏–≤–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏: %d\n", len(sources))
		for ssrc, source := range sources {
			timeSinceLastSeen := time.Since(source.LastSeen)
			fmt.Printf("  SSRC=%d: %s (%.1f—Å –Ω–∞–∑–∞–¥)\n",
				ssrc, source.Description.CNAME, timeSinceLastSeen.Seconds())
		}
		fmt.Println()
	}
}

// printQualityReport –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –∫–∞—á–µ—Å—Ç–≤–µ
func printQualityReport(session *rtp.Session, local, remote *QualityMetrics) {
	stats := session.GetStatistics()

	fmt.Printf("\nüìã === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –ö–ê–ß–ï–°–¢–í–ï ===\n")
	fmt.Printf("üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏: 60 —Å–µ–∫—É–Ω–¥\n")
	fmt.Printf("üÜî SSRC: %d\n", session.GetSSRC())

	fmt.Printf("\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
	fmt.Printf("  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤, %d –±–∞–π—Ç\n",
		stats.PacketsSent, stats.BytesSent)
	fmt.Printf("  üì• –ü–æ–ª—É—á–µ–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤, %d –±–∞–π—Ç\n",
		stats.PacketsReceived, stats.BytesReceived)
	fmt.Printf("  üìâ –ü–æ—Ç–µ—Ä—è–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤\n", stats.PacketsLost)

	if stats.PacketsSent > 0 {
		avgBitrate := float64(stats.BytesSent*8) / (60 * 1000) // 60 —Å–µ–∫—É–Ω–¥ –≤ kbps
		fmt.Printf("  üìä –°—Ä–µ–¥–Ω–∏–π –±–∏—Ç—Ä–µ–π—Ç: %.1f kbps\n", avgBitrate)
	}

	fmt.Printf("\nüåê –ö–∞—á–µ—Å—Ç–≤–æ –ø–æ –æ—Ü–µ–Ω–∫–µ —É–¥–∞–ª–µ–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã:\n")
	if !remote.LastUpdate.IsZero() {
		fmt.Printf("  üìâ –ü–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤: %.2f%%\n", remote.LossPercentage)
		fmt.Printf("  üìà Jitter: %.2f –º—Å\n", remote.Jitter)
		if remote.RTT > 0 {
			fmt.Printf("  üîÑ RTT: %.2f –º—Å\n", remote.RTT)
		}
		fmt.Printf("  ‚≠ê –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞: %s\n", getQualityEmoji(remote.QualityScore))

		// –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞
		fmt.Printf("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n")
		if remote.LossPercentage > 1.0 {
			fmt.Printf("  üîß –í—ã—Å–æ–∫–∏–µ –ø–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ—Ç—å\n")
		}
		if remote.Jitter > 30 {
			fmt.Printf("  üîß –í—ã—Å–æ–∫–∏–π jitter - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ QoS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n")
		}
		if remote.RTT > 300 {
			fmt.Printf("  üîß –í—ã—Å–æ–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ - –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é\n")
		}
		if remote.QualityScore >= 4 {
			fmt.Printf("  ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ —Å–≤—è–∑–∏ –æ—Ç–ª–∏—á–Ω–æ–µ!\n")
		}
	} else {
		fmt.Printf("  ‚ö†Ô∏è  –î–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã\n")
	}

	fmt.Printf("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω\n")
}

// RunRTCPMonitoringExample –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
func RunRTCPMonitoringExample() {
	fmt.Println("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ RTCP –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")

	err := RTCPMonitoringExample()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞: %v\n", err)
	}
}

// –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
// 1. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ RTCP —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∫–∞—á–µ—Å—Ç–≤–∞
// 2. –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ (–ø–æ—Ç–µ—Ä–∏, jitter, RTT)
// 3. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–∏ (1-5)
// 4. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ—Ç—á–µ—Ç–Ω–æ—Å—Ç—å
// 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –∫–∞—á–µ—Å—Ç–≤–∞
// 6. –ò–º–∏—Ç–∞—Ü–∏—é —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–æ–±–ª–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
