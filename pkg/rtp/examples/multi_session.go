// –ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ RTP —Å–µ—Å—Å–∏—è–º–∏
// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-—Å–≤—è–∑—å –∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
package examples

import (
	"fmt"
	"net"
	"sync"
	"time"

	"github.com/arzzra/soft_phone/pkg/rtp"
	rtppion "github.com/pion/rtp"
)

// CallInfo —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
type CallInfo struct {
	ID         string
	PartyName  string
	StartTime  time.Time
	SSRC       uint32
	Session    *rtp.Session
	Statistics rtp.SessionStatistics
	Quality    string
	Status     string
}

// MultiSessionExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ RTP —Å–µ—Å—Å–∏—è–º–∏
// –ò–º–∏—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–æ—Ñ—Ç—Ñ–æ–Ω–∞ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∑–≤–æ–Ω–∫–∞–º–∏
func MultiSessionExample() error {
	fmt.Println("=== –ü—Ä–∏–º–µ—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ RTP —Å–µ—Å—Å–∏—è–º–∏ ===")

	// –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
	var calls = make(map[string]*CallInfo)
	var callsMutex sync.RWMutex

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
	managerConfig := rtp.SessionManagerConfig{
		MaxSessions:     10,                // –ú–∞–∫—Å–∏–º—É–º 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
		SessionTimeout:  300 * time.Second, // 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
		CleanupInterval: 30 * time.Second,  // –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
	}

	manager := rtp.NewSessionManager(managerConfig)
	defer manager.StopAll()

	// –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞
	createCall := func(callID, partyName, localPort, remoteAddr string) error {
		fmt.Printf("üìû –°–æ–∑–¥–∞–µ–º –∑–≤–æ–Ω–æ–∫ —Å %s (ID: %s)...\n", partyName, callID)

		// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö
		rtpTransport, err := rtp.NewUDPTransport(rtp.TransportConfig{
			LocalAddr:  ":" + localPort,
			RemoteAddr: remoteAddr,
			BufferSize: 1500,
		})
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RTP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è %s: %w", callID, err)
		}

		// RTCP –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ—Ä—Ç—É
		rtcpPort := fmt.Sprintf("%d", mustParsePort(localPort)+1)
		rtcpAddr := incrementPort(remoteAddr)

		rtcpTransport, err := rtp.NewUDPRTCPTransport(rtp.RTCPTransportConfig{
			LocalAddr:  ":" + rtcpPort,
			RemoteAddr: rtcpAddr,
			BufferSize: 1500,
		})
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RTCP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –¥–ª—è %s: %w", callID, err)
		}

		// –°–æ–∑–¥–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
		callInfo := &CallInfo{
			ID:        callID,
			PartyName: partyName,
			StartTime: time.Now(),
			Status:    "Connecting",
		}

		// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
		sessionConfig := rtp.SessionConfig{
			PayloadType:   rtp.PayloadTypePCMU,
			MediaType:     rtp.MediaTypeAudio,
			ClockRate:     8000,
			Transport:     rtpTransport,
			RTCPTransport: rtcpTransport,

			LocalSDesc: rtp.SourceDescription{
				CNAME: fmt.Sprintf("soft_phone-%s@conference.example.com", callID),
				NAME:  fmt.Sprintf("Conference Participant %s", callID),
				TOOL:  "Multi Session Example",
			},

			// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–≤–æ–Ω–∫–∞
			OnPacketReceived: func(packet *rtppion.Packet, addr net.Addr) {
				callsMutex.Lock()
				if call, exists := calls[callID]; exists {
					call.Statistics.PacketsReceived++
					call.Statistics.BytesReceived += uint64(len(packet.Payload))
					call.Statistics.LastActivity = time.Now()
					call.Status = "Active"
				}
				callsMutex.Unlock()

				// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–∞–∂–¥—ã–µ 200 –ø–∞–∫–µ—Ç–æ–≤
				if callInfo.Statistics.PacketsReceived%200 == 0 {
					fmt.Printf("üì¶ %s: –ø–æ–ª—É—á–µ–Ω–æ %d –ø–∞–∫–µ—Ç–æ–≤\n",
						partyName, callInfo.Statistics.PacketsReceived)
				}
			},

			OnSourceAdded: func(ssrc uint32) {
				fmt.Printf("üë§ %s: –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ SSRC=%d\n", partyName, ssrc)
			},

			OnRTCPReceived: func(packet rtp.RTCPPacket, addr net.Addr) {
				switch p := packet.(type) {
				case *rtp.ReceiverReport:
					// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–≤–æ–Ω–∫–∞
					for _, rr := range p.ReceptionReports {
						if rr.SSRC == callInfo.SSRC {
							lossPercent := float64(rr.FractionLost) / 256.0 * 100.0

							// –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
							callsMutex.Lock()
							if call, exists := calls[callID]; exists {
								if lossPercent < 1.0 {
									call.Quality = "üü¢ –û—Ç–ª–∏—á–Ω–æ–µ"
								} else if lossPercent < 3.0 {
									call.Quality = "üü° –•–æ—Ä–æ—à–µ–µ"
								} else {
									call.Quality = "üî¥ –ü–ª–æ—Ö–æ–µ"
								}
							}
							callsMutex.Unlock()
						}
					}
				}
			},
		}

		// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä
		session, err := manager.CreateSession(callID, sessionConfig)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è %s: %w", callID, err)
		}

		callInfo.Session = session
		callInfo.SSRC = session.GetSSRC()

		// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–≤–æ–Ω–∫–µ
		callsMutex.Lock()
		calls[callID] = callInfo
		callsMutex.Unlock()

		// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é
		err = session.Start()
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Å—Å–∏–∏ –¥–ª—è %s: %w", callID, err)
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SDES
		session.SendSourceDescription()

		fmt.Printf("‚úÖ –ó–≤–æ–Ω–æ–∫ —Å %s –∑–∞–ø—É—â–µ–Ω: SSRC=%d\n", partyName, callInfo.SSRC)
		return nil
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
	fmt.Println("üìû –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é –∏–∑ 4 —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤...")

	calls_to_create := []struct {
		id, name, port, remote string
	}{
		{"call-001", "Alice", "5030", "192.168.1.101:5030"},
		{"call-002", "Bob", "5032", "192.168.1.102:5032"},
		{"call-003", "Charlie", "5034", "192.168.1.103:5034"},
		{"call-004", "Diana", "5036", "192.168.1.104:5036"},
	}

	// –°–æ–∑–¥–∞–µ–º –∑–≤–æ–Ω–∫–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
	for _, call := range calls_to_create {
		err := createCall(call.id, call.name, call.port, call.remote)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–≤–æ–Ω–∫–∞ %s: %v\n", call.name, err)
			continue
		}

		time.Sleep(2 * time.Second) // –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–≤–æ–Ω–∫–∞–º–∏
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –∞—É–¥–∏–æ –¥–ª—è –≤—Å–µ—Ö –∑–≤–æ–Ω–∫–æ–≤
	go sendAudioToAllCalls(calls, &callsMutex)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
	go monitorConference(calls, &callsMutex, manager)

	// –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∑–≤–æ–Ω–∫–æ–≤ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
	go simulateCallEvents(calls, &callsMutex, manager)

	// –†–∞–±–æ—Ç–∞–µ–º 2 –º–∏–Ω—É—Ç—ã
	fmt.Println("‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é 2 –º–∏–Ω—É—Ç—ã...")
	time.Sleep(2 * time.Minute)

	// –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
	printConferenceReport(calls, &callsMutex, manager)

	return nil
}

// sendAudioToAllCalls –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –≤–æ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
func sendAudioToAllCalls(calls map[string]*CallInfo, mutex *sync.RWMutex) {
	audioFrame := make([]byte, 160) // G.711 frame
	for i := range audioFrame {
		audioFrame[i] = 0xFF // Œº-law silence
	}

	ticker := time.NewTicker(20 * time.Millisecond)
	defer ticker.Stop()

	for range ticker.C {
		mutex.RLock()
		activeCalls := make([]*CallInfo, 0, len(calls))
		for _, call := range calls {
			if call.Session != nil && call.Status == "Active" {
				activeCalls = append(activeCalls, call)
			}
		}
		mutex.RUnlock()

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≤ –∫–∞–∂–¥—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π –∑–≤–æ–Ω–æ–∫
		for _, call := range activeCalls {
			err := call.Session.SendAudio(audioFrame, 20*time.Millisecond)
			if err != nil {
				fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –≤ %s: %v\n", call.PartyName, err)
			} else {
				mutex.Lock()
				call.Statistics.PacketsSent++
				call.Statistics.BytesSent += uint64(len(audioFrame))
				mutex.Unlock()
			}
		}
	}
}

// monitorConference –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
func monitorConference(calls map[string]*CallInfo, mutex *sync.RWMutex, manager *rtp.SessionManager) {
	ticker := time.NewTicker(30 * time.Second)
	defer ticker.Stop()

	for range ticker.C {
		mutex.RLock()
		activeCount := 0
		totalPackets := uint64(0)
		totalBytes := uint64(0)

		fmt.Printf("\nüìä === –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏ ===\n")
		fmt.Printf("üïê –í—Ä–µ–º—è: %s\n", time.Now().Format("15:04:05"))

		for _, call := range calls {
			if call.Session != nil {
				duration := time.Since(call.StartTime)
				sessionStats := call.Session.GetStatistics()

				fmt.Printf("üìû %s (%s):\n", call.PartyName, call.ID)
				fmt.Printf("  ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v\n", duration.Round(time.Second))
				fmt.Printf("  üìä –°—Ç–∞—Ç—É—Å: %s\n", call.Status)
				fmt.Printf("  üíé –ö–∞—á–µ—Å—Ç–≤–æ: %s\n", call.Quality)
				fmt.Printf("  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤ (%d –±–∞–π—Ç)\n",
					sessionStats.PacketsSent, sessionStats.BytesSent)
				fmt.Printf("  üì• –ü–æ–ª—É—á–µ–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤ (%d –±–∞–π—Ç)\n",
					sessionStats.PacketsReceived, sessionStats.BytesReceived)

				if call.Status == "Active" {
					activeCount++
					totalPackets += sessionStats.PacketsSent
					totalBytes += sessionStats.BytesSent
				}
			}
		}
		mutex.RUnlock()

		// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
		managerStats := manager.GetManagerStatistics()
		fmt.Printf("\nüè¢ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π:\n")
		fmt.Printf("  üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤: %d\n", activeCount)
		fmt.Printf("  üìä –í—Å–µ–≥–æ —Å–µ—Å—Å–∏–π: %d\n", managerStats.TotalSessions)
		fmt.Printf("  üìà –û–±—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: %d –ø–∞–∫–µ—Ç–æ–≤ (%d –±–∞–π—Ç)\n", totalPackets, totalBytes)
		fmt.Println()
	}
}

// simulateCallEvents –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Å–æ–±—ã—Ç–∏—è –∑–≤–æ–Ω–∫–æ–≤ (–∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ)
func simulateCallEvents(calls map[string]*CallInfo, mutex *sync.RWMutex, manager *rtp.SessionManager) {
	time.Sleep(45 * time.Second)

	// –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–≤–æ–Ω–æ–∫ —Å Bob
	fmt.Println("üìû Bob –ø–æ–∫–∏–¥–∞–µ—Ç –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—é...")
	mutex.Lock()
	if call, exists := calls["call-002"]; exists {
		if call.Session != nil {
			call.Session.Stop()
			call.Status = "Disconnected"
		}
	}
	mutex.Unlock()

	manager.RemoveSession("call-002")

	time.Sleep(30 * time.Second)

	// –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
	fmt.Println("üìû Eve –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏...")
	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–≤–æ–Ω–æ–∫, –Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –ø—Ä–∏–º–µ—Ä–∞ –æ—Å—Ç–∞–≤–∏–º –∫–∞–∫ –µ—Å—Ç—å
}

// printConferenceReport –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏
func printConferenceReport(calls map[string]*CallInfo, mutex *sync.RWMutex, manager *rtp.SessionManager) {
	mutex.RLock()
	defer mutex.RUnlock()

	fmt.Printf("\nüìã === –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –û –ö–û–ù–§–ï–†–ï–ù–¶–ò–ò ===\n")
	fmt.Printf("üïê –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 2 –º–∏–Ω—É—Ç—ã\n")

	totalParticipants := len(calls)
	activeParticipants := 0
	totalPacketsSent := uint64(0)
	totalBytesReceived := uint64(0)

	fmt.Printf("\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏:\n")
	for _, call := range calls {
		duration := time.Since(call.StartTime)
		status := call.Status
		if call.Session != nil {
			sessionStats := call.Session.GetStatistics()
			totalPacketsSent += sessionStats.PacketsSent
			totalBytesReceived += sessionStats.BytesReceived

			if status == "Active" {
				activeParticipants++
			}
		}

		fmt.Printf("  üìû %s (%s):\n", call.PartyName, call.ID)
		fmt.Printf("    ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v\n", duration.Round(time.Second))
		fmt.Printf("    üìä –§–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å: %s\n", status)
		fmt.Printf("    üíé –ö–∞—á–µ—Å—Ç–≤–æ: %s\n", call.Quality)
		fmt.Printf("    üÜî SSRC: %d\n", call.SSRC)
	}

	fmt.Printf("\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
	fmt.Printf("  üë• –í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: %d\n", totalParticipants)
	fmt.Printf("  ‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞ –º–æ–º–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: %d\n", activeParticipants)
	fmt.Printf("  üì§ –û–±—â–∏–π –∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: %d –ø–∞–∫–µ—Ç–æ–≤\n", totalPacketsSent)
	fmt.Printf("  üì• –û–±—â–∏–π –≤—Ö–æ–¥—è—â–∏–π —Ç—Ä–∞—Ñ–∏–∫: %s\n", formatBytes(totalBytesReceived))

	if totalPacketsSent > 0 {
		avgBitrate := float64(totalBytesReceived*8) / (120 * 1000) // 2 –º–∏–Ω—É—Ç—ã –≤ kbps
		fmt.Printf("  üìä –°—Ä–µ–¥–Ω–∏–π –±–∏—Ç—Ä–µ–π—Ç: %.1f kbps\n", avgBitrate)
	}

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
	managerStats := manager.GetManagerStatistics()
	fmt.Printf("\nüè¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π:\n")
	fmt.Printf("  üìà –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ —Å–µ—Å—Å–∏–π: %d\n", managerStats.TotalSessions)
	fmt.Printf("  üë• –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: %d\n", managerStats.ActiveSessions)
	fmt.Printf("  üîç –ú–∞–∫—Å–∏–º—É–º —Å–µ—Å—Å–∏–π: %d\n", managerStats.MaxSessions)

	fmt.Printf("\nüí° –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n")
	if activeParticipants == totalParticipants {
		fmt.Printf("  ‚úÖ –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å –∞–∫—Ç–∏–≤–Ω—ã–º–∏\n")
	} else {
		fmt.Printf("  ‚ö†Ô∏è  %d —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ—Ç–∫–ª—é—á–∏–ª–∏—Å—å\n", totalParticipants-activeParticipants)
	}

	fmt.Printf("  ‚úÖ –°–µ—Å—Å–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ\n")

	fmt.Printf("\n‚úÖ –ö–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n")
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
func mustParsePort(portStr string) int {
	// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
	switch portStr {
	case "5030":
		return 5030
	case "5032":
		return 5032
	case "5034":
		return 5034
	case "5036":
		return 5036
	default:
		return 5000
	}
}

func incrementPort(addr string) string {
	// –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
	// –í —Ä–µ–∞–ª—å–Ω–æ–º –∫–æ–¥–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ net.SplitHostPort
	return addr // –£–ø—Ä–æ—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
}

func formatBytes(bytes uint64) string {
	if bytes < 1024 {
		return fmt.Sprintf("%d B", bytes)
	} else if bytes < 1024*1024 {
		return fmt.Sprintf("%.1f KB", float64(bytes)/1024)
	} else {
		return fmt.Sprintf("%.1f MB", float64(bytes)/(1024*1024))
	}
}

// RunMultiSessionExample –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
func RunMultiSessionExample() {
	fmt.Println("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏...")

	err := MultiSessionExample()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞: %v\n", err)
	}
}

// –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
// 1. –°–æ–∑–¥–∞–Ω–∏–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ RTP —Å–µ—Å—Å–∏—è–º–∏
// 2. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–∞–∂–¥–æ–≥–æ –∑–≤–æ–Ω–∫–∞ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
// 3. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞–º–∏ —á–µ—Ä–µ–∑ SessionManager
// 4. –û–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
// 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞–º—è—Ç–∏ –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
// 6. –ò–º–∏—Ç–∞—Ü–∏—é —Ä–µ–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü-—Å–≤—è–∑–∏
