// –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WebRTC –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å WebRTC —Å—Ç–µ–∫–æ–º –¥–ª—è –±—Ä–∞—É–∑–µ—Ä–Ω—ã—Ö –∑–≤–æ–Ω–∫–æ–≤
package examples

import (
	"fmt"
	"net"
	"time"

	"github.com/arzzra/soft_phone/pkg/rtp"
	rtppion "github.com/pion/rtp"
)

// WebRTCIntegrationExample –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å WebRTC –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
// –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
func WebRTCIntegrationExample() error {
	fmt.Println("=== –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å WebRTC ===")

	// WebRTC —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	var webrtcStats struct {
		ExtensionsUsed    []string
		RTXPackets        uint64
		FECPackets        uint64
		KeyFrames         uint64
		MediaSSRC         uint32
		RTXSsrc           uint32
		MediaSynchronized bool
		BWEUpdates        uint64
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
	manager := rtp.NewSessionManager(rtp.DefaultSessionManagerConfig())
	defer manager.StopAll()

	// –°–æ–∑–¥–∞–µ–º –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç (WebRTC —Å—Ç–∏–ª—å - RTP –∏ RTCP –Ω–∞ –æ–¥–Ω–æ–º –ø–æ—Ä—Ç—É)
	fmt.Println("üîó –°–æ–∑–¥–∞–µ–º WebRTC-—Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç...")

	// –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π UDP —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
	muxTransport, err := rtp.NewUDPTransport(rtp.TransportConfig{
		LocalAddr:  ":5040",
		RemoteAddr: "192.168.1.110:5040", // WebRTC –∫–ª–∏–µ–Ω—Ç
		BufferSize: 1500,
	})
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞: %w", err)
	}

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º —Å–µ—Å—Å–∏—é –≤ WebRTC —Å—Ç–∏–ª–µ
	sessionConfig := rtp.SessionConfig{
		PayloadType: 111, // Opus codec (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π payload type)
		MediaType:   rtp.MediaTypeAudio,
		ClockRate:   48000,        // 48kHz –¥–ª—è Opus (WebRTC —Å—Ç–∞–Ω–¥–∞—Ä—Ç)
		Transport:   muxTransport, // –ú—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
		// RTCPTransport –Ω–µ –Ω—É–∂–µ–Ω - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ

		LocalSDesc: rtp.SourceDescription{
			CNAME: "webrtc-user@browser.example.com",
			NAME:  "WebRTC Browser User",
			TOOL:  "WebRTC Integration Example",
		},

		// WebRTC —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
		OnPacketReceived: func(packet *rtppion.Packet, addr net.Addr) {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º WebRTC extension headers
			if packet.Header.Extension {
				webrtcStats.ExtensionsUsed = append(webrtcStats.ExtensionsUsed, "RTP Extension")

				// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
				fmt.Printf("üîß RTP Extension –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ –≤ –ø–∞–∫–µ—Ç–µ seq=%d\n", packet.SequenceNumber)
			}

			// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏–∞ –ø–æ payload type
			switch packet.Header.PayloadType {
			case 111: // Opus
				fmt.Printf("üéµ Opus –ø–∞–∫–µ—Ç: seq=%d, ts=%d, —Ä–∞–∑–º–µ—Ä=%d\n",
					packet.SequenceNumber, packet.Timestamp, len(packet.Payload))

			case 96: // RTX (retransmission)
				webrtcStats.RTXPackets++
				fmt.Printf("üîÅ RTX –ø–∞–∫–µ—Ç –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ç–µ—Ä—å\n")

			case 97: // FEC (Forward Error Correction)
				webrtcStats.FECPackets++
				fmt.Printf("üõ†Ô∏è  FEC –ø–∞–∫–µ—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –æ—à–∏–±–æ–∫\n")
			}

			// –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–∞–¥—Ä—ã (–¥–ª—è –≤–∏–¥–µ–æ, –Ω–æ –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–∏–º–∞)
			if packet.Header.Marker {
				webrtcStats.KeyFrames++
				fmt.Printf("üîë –ö–ª—é—á–µ–≤–æ–π –∫–∞–¥—Ä –æ–±–Ω–∞—Ä—É–∂–µ–Ω\n")
			}
		},

		// WebRTC RTCP –æ–±—Ä–∞–±–æ—Ç–∫–∞
		OnRTCPReceived: func(packet rtp.RTCPPacket, addr net.Addr) {
			switch p := packet.(type) {
			case *rtp.SenderReport:
				webrtcStats.MediaSSRC = p.SSRC
				fmt.Printf("üìä WebRTC SR: SSRC=%d, NTP=%d\n", p.SSRC, p.NTPTimestamp)

				// WebRTC –∏—Å–ø–æ–ª—å–∑—É–µ—Ç NTP –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞
				if !webrtcStats.MediaSynchronized {
					webrtcStats.MediaSynchronized = true
					fmt.Printf("üîÑ –ú–µ–¥–∏–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞\n")
				}

			case *rtp.ReceiverReport:
				// –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–ª—è WebRTC –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –±–∏—Ç—Ä–µ–π—Ç–∞
				for _, rr := range p.ReceptionReports {
					analyzeWebRTCQuality(rr, &webrtcStats)
				}

			case *rtp.SourceDescriptionPacket:
				// WebRTC —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç SDES –¥–ª—è –æ–±–º–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—Ç–æ–∫–∞—Ö
				fmt.Printf("üè∑Ô∏è  WebRTC SDES: %d –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n", len(p.Chunks))
				for _, chunk := range p.Chunks {
					for _, item := range chunk.Items {
						if item.Type == rtp.SDESTypeCNAME {
							fmt.Printf("  üìß WebRTC CNAME: %s\n", string(item.Text))
						}
					}
				}
			}
		},
	}

	// –°–æ–∑–¥–∞–µ–º WebRTC-—Å–æ–≤–º–µ—Å—Ç–∏–º—É—é —Å–µ—Å—Å–∏—é
	session, err := manager.CreateSession("webrtc-call", sessionConfig)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebRTC —Å–µ—Å—Å–∏–∏: %w", err)
	}

	err = session.Start()
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebRTC —Å–µ—Å—Å–∏–∏: %w", err)
	}

	webrtcStats.MediaSSRC = session.GetSSRC()
	fmt.Printf("‚úÖ WebRTC —Å–µ—Å—Å–∏—è –∑–∞–ø—É—â–µ–Ω–∞: SSRC=%d\n", webrtcStats.MediaSSRC)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º SDES —Å WebRTC —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
	session.SendSourceDescription()

	// –ó–∞–ø—É—Å–∫–∞–µ–º WebRTC —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
	go sendWebRTCAudio(session, &webrtcStats)
	go monitorWebRTCStatistics(session, &webrtcStats)
	go simulateWebRTCEvents(session, &webrtcStats)

	// –¢–µ—Å—Ç–∏—Ä—É–µ–º WebRTC –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é 90 —Å–µ–∫—É–Ω–¥
	fmt.Println("‚è±Ô∏è  –¢–µ—Å—Ç–∏—Ä—É–µ–º WebRTC –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é 90 —Å–µ–∫—É–Ω–¥...")
	time.Sleep(90 * time.Second)

	// –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ WebRTC —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
	printWebRTCReport(session, &webrtcStats)

	return nil
}

// analyzeWebRTCQuality –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è WebRTC –∞–¥–∞–ø—Ç–∞—Ü–∏–∏
func analyzeWebRTCQuality(rr rtp.ReceptionReport, stats *struct {
	ExtensionsUsed    []string
	RTXPackets        uint64
	FECPackets        uint64
	KeyFrames         uint64
	MediaSSRC         uint32
	RTXSsrc           uint32
	MediaSynchronized bool
	BWEUpdates        uint64
}) {
	lossPercent := float64(rr.FractionLost) / 256.0 * 100.0
	jitterMs := float64(rr.Jitter) / 48.0 // 48kHz clock –¥–ª—è Opus

	fmt.Printf("üìà WebRTC –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑:\n")
	fmt.Printf("  üìâ –ü–æ—Ç–µ—Ä–∏: %.2f%% (RTCP)\n", lossPercent)
	fmt.Printf("  üìà Jitter: %.2f –º—Å\n", jitterMs)

	// WebRTC –∞–¥–∞–ø—Ç–∞—Ü–∏—è –±–∏—Ç—Ä–µ–π—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—á–µ—Å—Ç–≤–∞
	if lossPercent > 5.0 {
		stats.BWEUpdates++
		fmt.Printf("  üìâ BWE: –°–Ω–∏–∂–µ–Ω–∏–µ –±–∏—Ç—Ä–µ–π—Ç–∞ –∏–∑-–∑–∞ –ø–æ—Ç–µ—Ä—å\n")
	} else if lossPercent < 1.0 && jitterMs < 10.0 {
		stats.BWEUpdates++
		fmt.Printf("  üìà BWE: –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –±–∏—Ç—Ä–µ–π—Ç–∞ - —Ö–æ—Ä–æ—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ\n")
	}

	// –¢—Ä–∏–≥–≥–µ—Ä FEC –ø—Ä–∏ –≤—ã—Å–æ–∫–∏—Ö –ø–æ—Ç–µ—Ä—è—Ö
	if lossPercent > 3.0 {
		fmt.Printf("  üõ†Ô∏è  FEC: –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏ –æ—à–∏–±–æ–∫\n")
	}
}

// sendWebRTCAudio –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç WebRTC —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–µ –∞—É–¥–∏–æ
func sendWebRTCAudio(session *rtp.Session, stats *struct {
	ExtensionsUsed    []string
	RTXPackets        uint64
	FECPackets        uint64
	KeyFrames         uint64
	MediaSSRC         uint32
	RTXSsrc           uint32
	MediaSynchronized bool
	BWEUpdates        uint64
}) {
	// Opus frame size –¥–ª—è 20ms –ø—Ä–∏ 48kHz
	frameSize := 960 * 2 // 960 samples * 2 bytes/sample –¥–ª—è —Å—Ç–µ—Ä–µ–æ
	audioFrame := make([]byte, frameSize)

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Opus –∫–æ–Ω—Ç–µ–Ω—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
	for i := range audioFrame {
		audioFrame[i] = byte(i % 256) // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ç—Ç–µ—Ä–Ω
	}

	ticker := time.NewTicker(20 * time.Millisecond)
	defer ticker.Stop()

	packetCount := 0
	for range ticker.C {
		// –°–æ–∑–¥–∞–µ–º RTP –ø–∞–∫–µ—Ç —Å WebRTC —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
		packet := &rtppion.Packet{
			Header: rtppion.Header{
				Version:        2,
				Padding:        false,
				Extension:      packetCount%10 == 0, // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
				Marker:         false,
				PayloadType:    111, // Opus
				SequenceNumber: uint16(packetCount),
				Timestamp:      uint32(packetCount * 960), // 960 samples per 20ms at 48kHz
				SSRC:           stats.MediaSSRC,
			},
			Payload: audioFrame,
		}

		// –î–æ–±–∞–≤–ª—è–µ–º WebRTC extension header –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
		if packet.Header.Extension {
			// –ò–º–∏—Ç–∏—Ä—É–µ–º RTP extension (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
			stats.ExtensionsUsed = append(stats.ExtensionsUsed, "AudioLevel")
		}

		err := session.SendPacket(packet)
		if err != nil {
			fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebRTC –ø–∞–∫–µ—Ç–∞: %v\n", err)
			continue
		}

		packetCount++

		// –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º RTX –ø–∞–∫–µ—Ç—ã (–∏–º–∏—Ç–∞—Ü–∏—è)
		if packetCount%100 == 0 {
			stats.RTXPackets++
			fmt.Printf("üîÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω RTX –ø–∞–∫–µ—Ç –¥–ª—è seq=%d\n", packetCount-5)
		}

		// –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥ "–∫–ª—é—á–µ–≤–æ–π –∫–∞–¥—Ä"
		if packetCount%(250) == 0 { // 250 * 20ms = 5 seconds
			stats.KeyFrames++
			fmt.Printf("üîë –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–ª—é—á–µ–≤–æ–π –∫–∞–¥—Ä (–∞—É–¥–∏–æ —Ñ—Ä–µ–π–º)\n")
		}
	}
}

// monitorWebRTCStatistics –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç WebRTC —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
func monitorWebRTCStatistics(session *rtp.Session, stats *struct {
	ExtensionsUsed    []string
	RTXPackets        uint64
	FECPackets        uint64
	KeyFrames         uint64
	MediaSSRC         uint32
	RTXSsrc           uint32
	MediaSynchronized bool
	BWEUpdates        uint64
}) {
	ticker := time.NewTicker(20 * time.Second)
	defer ticker.Stop()

	for range ticker.C {
		sessionStats := session.GetStatistics()

		fmt.Printf("\nüåê === WebRTC –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ===\n")
		fmt.Printf("üïê –í—Ä–µ–º—è: %s\n", time.Now().Format("15:04:05"))

		fmt.Printf("\nüìä –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:\n")
		fmt.Printf("  üÜî Media SSRC: %d\n", stats.MediaSSRC)
		fmt.Printf("  üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: %t\n", stats.MediaSynchronized)
		fmt.Printf("  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤ (%d –±–∞–π—Ç)\n",
			sessionStats.PacketsSent, sessionStats.BytesSent)
		fmt.Printf("  üì• –ü–æ–ª—É—á–µ–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤ (%d –±–∞–π—Ç)\n",
			sessionStats.PacketsReceived, sessionStats.BytesReceived)

		fmt.Printf("\nüîß WebRTC —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:\n")
		fmt.Printf("  üîÅ RTX –ø–∞–∫–µ—Ç—ã: %d\n", stats.RTXPackets)
		fmt.Printf("  üõ†Ô∏è  FEC –ø–∞–∫–µ—Ç—ã: %d\n", stats.FECPackets)
		fmt.Printf("  üîë –ö–ª—é—á–µ–≤—ã–µ –∫–∞–¥—Ä—ã: %d\n", stats.KeyFrames)
		fmt.Printf("  üìä BWE –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: %d\n", stats.BWEUpdates)
		fmt.Printf("  üîß RTP Extensions: %d —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö\n", len(unique(stats.ExtensionsUsed)))

		// –í—ã—á–∏—Å–ª—è–µ–º WebRTC –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
		if sessionStats.PacketsSent > 0 {
			lossRate := float64(sessionStats.PacketsLost) / float64(sessionStats.PacketsSent) * 100
			rtxRate := float64(stats.RTXPackets) / float64(sessionStats.PacketsSent) * 100

			fmt.Printf("\nüìà –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:\n")
			fmt.Printf("  üìâ –ü–æ—Ç–µ—Ä–∏: %.2f%%\n", lossRate)
			fmt.Printf("  üîÅ RTX —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %.2f%%\n", rtxRate)
			fmt.Printf("  üìà Jitter: %.2f –º—Å\n", sessionStats.Jitter)

			// WebRTC –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
			quality := assessWebRTCQuality(lossRate, sessionStats.Jitter, stats.BWEUpdates)
			fmt.Printf("  ‚≠ê WebRTC –∫–∞—á–µ—Å—Ç–≤–æ: %s\n", quality)
		}
		fmt.Println()
	}
}

// simulateWebRTCEvents –∏–º–∏—Ç–∏—Ä—É–µ—Ç —Ç–∏–ø–∏—á–Ω—ã–µ WebRTC —Å–æ–±—ã—Ç–∏—è
func simulateWebRTCEvents(session *rtp.Session, stats *struct {
	ExtensionsUsed    []string
	RTXPackets        uint64
	FECPackets        uint64
	KeyFrames         uint64
	MediaSSRC         uint32
	RTXSsrc           uint32
	MediaSynchronized bool
	BWEUpdates        uint64
}) {
	time.Sleep(30 * time.Second)

	// –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–µ—Ç–∏ (BWE –∞–¥–∞–ø—Ç–∞—Ü–∏—è)
	fmt.Println("üåê –ò–º–∏—Ç–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ç–∏...")
	stats.BWEUpdates += 3

	time.Sleep(20 * time.Second)

	// –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ—Ç–µ—Ä—é –ø–∞–∫–µ—Ç–æ–≤ –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—é FEC
	fmt.Println("üìâ –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ—Ç–µ—Ä–∏ –ø–∞–∫–µ—Ç–æ–≤ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º FEC...")
	stats.FECPackets += 10

	time.Sleep(20 * time.Second)

	// –ò–º–∏—Ç–∏—Ä—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞
	fmt.Println("üìà –ö–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
	stats.BWEUpdates += 2
}

// assessWebRTCQuality –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
func assessWebRTCQuality(lossRate, jitter float64, bweUpdates uint64) string {
	score := 100.0

	// –®—Ç—Ä–∞—Ñ—ã –∑–∞ –ø–æ—Ç–µ—Ä–∏
	score -= lossRate * 10

	// –®—Ç—Ä–∞—Ñ—ã –∑–∞ jitter
	if jitter > 30 {
		score -= 20
	} else if jitter > 10 {
		score -= 10
	}

	// –®—Ç—Ä–∞—Ñ—ã –∑–∞ —á–∞—Å—Ç—ã–µ BWE –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ—Ç–∏)
	if bweUpdates > 10 {
		score -= 15
	}

	switch {
	case score >= 80:
		return "üü¢ –û—Ç–ª–∏—á–Ω–æ–µ (WebRTC –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ)"
	case score >= 60:
		return "üü° –•–æ—Ä–æ—à–µ–µ (WebRTC –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è)"
	case score >= 40:
		return "üü† –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ (–∞–∫—Ç–∏–≤–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏—è)"
	default:
		return "üî¥ –ü–ª–æ—Ö–æ–µ (—Ç—Ä–µ–±—É–µ—Ç –≤–º–µ—à–∞—Ç–µ–ª—å—Å—Ç–≤–∞)"
	}
}

// printWebRTCReport –≤—ã–≤–æ–¥–∏—Ç –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç –æ WebRTC —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
func printWebRTCReport(session *rtp.Session, stats *struct {
	ExtensionsUsed    []string
	RTXPackets        uint64
	FECPackets        uint64
	KeyFrames         uint64
	MediaSSRC         uint32
	RTXSsrc           uint32
	MediaSynchronized bool
	BWEUpdates        uint64
}) {
	sessionStats := session.GetStatistics()

	fmt.Printf("\nüåê === –ò–¢–û–ì–û–í–´–ô WEBRTC –û–¢–ß–ï–¢ ===\n")
	fmt.Printf("üïê –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: 90 —Å–µ–∫—É–Ω–¥\n")
	fmt.Printf("üÜî Media SSRC: %d\n", stats.MediaSSRC)

	fmt.Printf("\nüìä –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n")
	fmt.Printf("  üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤ (%d –±–∞–π—Ç)\n",
		sessionStats.PacketsSent, sessionStats.BytesSent)
	fmt.Printf("  üì• –ü–æ–ª—É—á–µ–Ω–æ: %d –ø–∞–∫–µ—Ç–æ–≤ (%d –±–∞–π—Ç)\n",
		sessionStats.PacketsReceived, sessionStats.BytesReceived)
	fmt.Printf("  üìâ –ü–æ—Ç–µ—Ä–∏: %d –ø–∞–∫–µ—Ç–æ–≤\n", sessionStats.PacketsLost)

	if sessionStats.PacketsSent > 0 {
		avgBitrate := float64(sessionStats.BytesSent*8) / (90 * 1000) // 90 —Å–µ–∫—É–Ω–¥ –≤ kbps
		fmt.Printf("  üìä –°—Ä–µ–¥–Ω–∏–π –±–∏—Ç—Ä–µ–π—Ç: %.1f kbps (Opus 48kHz)\n", avgBitrate)
	}

	fmt.Printf("\nüîß WebRTC —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n")
	fmt.Printf("  üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: %t\n", stats.MediaSynchronized)
	fmt.Printf("  üîÅ RTX –ø–∞–∫–µ—Ç—ã (—Ä–µ—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è): %d\n", stats.RTXPackets)
	fmt.Printf("  üõ†Ô∏è  FEC –ø–∞–∫–µ—Ç—ã (–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—à–∏–±–æ–∫): %d\n", stats.FECPackets)
	fmt.Printf("  üîë –ö–ª—é—á–µ–≤—ã–µ –∫–∞–¥—Ä—ã: %d\n", stats.KeyFrames)
	fmt.Printf("  üìä BWE –∞–¥–∞–ø—Ç–∞—Ü–∏–∏: %d\n", stats.BWEUpdates)
	fmt.Printf("  üîß RTP Extensions –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: %d —Ç–∏–ø–æ–≤\n", len(unique(stats.ExtensionsUsed)))

	fmt.Printf("\nüìà –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n")
	if sessionStats.PacketsSent > 0 {
		lossRate := float64(sessionStats.PacketsLost) / float64(sessionStats.PacketsSent) * 100
		rtxEfficiency := float64(stats.RTXPackets) / float64(sessionStats.PacketsSent) * 100

		fmt.Printf("  üìâ –û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ—Ç–µ—Ä—å: %.2f%%\n", lossRate)
		fmt.Printf("  üîÅ RTX —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %.2f%%\n", rtxEfficiency)
		fmt.Printf("  üìà Jitter: %.2f –º—Å\n", sessionStats.Jitter)

		quality := assessWebRTCQuality(lossRate, sessionStats.Jitter, stats.BWEUpdates)
		fmt.Printf("  ‚≠ê –ò—Ç–æ–≥–æ–≤–æ–µ WebRTC –∫–∞—á–µ—Å—Ç–≤–æ: %s\n", quality)
	}

	fmt.Printf("\nüåê WebRTC —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:\n")
	fmt.Printf("  ‚úÖ –ú—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ RTP/RTCP: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n")
	fmt.Printf("  ‚úÖ Opus –∫–æ–¥–µ–∫ (48kHz): –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n")
	fmt.Printf("  ‚úÖ RTP Extensions: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n")
	fmt.Printf("  ‚úÖ RTCP –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n")
	fmt.Printf("  ‚úÖ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç (BWE): –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è\n")

	if stats.RTXPackets > 0 {
		fmt.Printf("  ‚úÖ –†–µ—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è (RTX): –∞–∫—Ç–∏–≤–Ω–∞\n")
	}
	if stats.FECPackets > 0 {
		fmt.Printf("  ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—à–∏–±–æ–∫ (FEC): –∞–∫—Ç–∏–≤–Ω–∞\n")
	}

	fmt.Printf("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è WebRTC –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:\n")
	if stats.BWEUpdates > 5 {
		fmt.Printf("  üîß –ß–∞—Å—Ç—ã–µ BWE –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ QoS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n")
	} else {
		fmt.Printf("  ‚úÖ –°—Ç–∞–±–∏–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–µ—Ç–∏\n")
	}

	if sessionStats.PacketsLost == 0 {
		fmt.Printf("  ‚úÖ –ù–µ—Ç –ø–æ—Ç–µ—Ä—å - –æ—Ç–ª–∏—á–Ω–∞—è —Å–µ—Ç–µ–≤–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n")
	} else if sessionStats.PacketsLost < 10 {
		fmt.Printf("  ‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏ - —Ö–æ—Ä–æ—à–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n")
	} else {
		fmt.Printf("  üîß –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ FEC –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–∞\n")
	}

	fmt.Printf("\n‚úÖ WebRTC –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ\n")
}

// unique –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å—Ä–µ–∑–∞
func unique(slice []string) []string {
	keys := make(map[string]bool)
	result := []string{}

	for _, item := range slice {
		if !keys[item] {
			keys[item] = true
			result = append(result, item)
		}
	}

	return result
}

// RunWebRTCIntegrationExample –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–º–µ—Ä —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
func RunWebRTCIntegrationExample() {
	fmt.Println("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–º–µ—Ä–∞ WebRTC –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")

	err := WebRTCIntegrationExample()
	if err != nil {
		fmt.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–∞: %v\n", err)
	}
}

// –≠—Ç–æ—Ç –ø—Ä–∏–º–µ—Ä –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç:
// 1. –ù–∞—Å—Ç—Ä–æ–π–∫—É RTP —Å–µ—Å—Å–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å WebRTC –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–º
// 2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º—É–ª—å—Ç–∏–ø–ª–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ (RTP/RTCP –Ω–∞ –æ–¥–Ω–æ–º –ø–æ—Ä—Ç—É)
// 3. –ü–æ–¥–¥–µ—Ä–∂–∫—É Opus –∫–æ–¥–µ–∫–∞ —Å 48kHz —á–∞—Å—Ç–æ—Ç–æ–π –¥–∏—Å–∫—Ä–µ—Ç–∏–∑–∞—Ü–∏–∏
// 4. –û–±—Ä–∞–±–æ—Ç–∫—É RTP extensions –¥–ª—è WebRTC —Ñ—É–Ω–∫—Ü–∏–π
// 5. –†–µ–∞–ª–∏–∑–∞—Ü–∏—é BWE (Bandwidth Estimation) –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –±–∏—Ç—Ä–µ–π—Ç–∞
// 6. –ü–æ–¥–¥–µ—Ä–∂–∫—É RTX (—Ä–µ—Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏—è) –∏ FEC (–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –æ—à–∏–±–æ–∫)
// 7. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ –∞–¥–∞–ø—Ç–∞—Ü–∏—é –≤ —Å—Ç–∏–ª–µ WebRTC
