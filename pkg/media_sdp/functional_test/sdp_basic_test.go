package functional_test

import (
	"testing"
	"time"

	"github.com/arzzra/soft_phone/pkg/media"
	"github.com/arzzra/soft_phone/pkg/media_sdp"
	"github.com/arzzra/soft_phone/pkg/rtp"
)

// TestBasicSDPWorkflow —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤—ã–π SDP workflow –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞ –¥–∞–Ω–Ω—ã–º–∏
func TestBasicSDPWorkflow(t *testing.T) {
	t.Log("üéµ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ SDP workflow üéµ")

	// –≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ SDP Offer
	t.Log("–≠—Ç–∞–ø 1: –°–æ–∑–¥–∞–Ω–∏–µ SDP Offer...")

	builderConfig := media_sdp.DefaultBuilderConfig()
	builderConfig.SessionID = "test-caller-basic"
	builderConfig.SessionName = "Basic Test Call"
	builderConfig.PayloadType = rtp.PayloadTypePCMU
	builderConfig.ClockRate = 8000
	builderConfig.Transport.LocalAddr = ":0"
	builderConfig.DTMFEnabled = true

	caller, err := media_sdp.NewSDPMediaBuilder(builderConfig)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SDPMediaBuilder: %v", err)
	}
	defer func() { _ = caller.Stop() }()

	offer, err := caller.CreateOffer()
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SDP offer: %v", err)
	}

	t.Log("‚úÖ SDP Offer —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ offer
	if len(offer.MediaDescriptions) == 0 {
		t.Fatal("SDP offer –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ –æ–ø–∏—Å–∞–Ω–∏–π")
	}

	mediaDesc := offer.MediaDescriptions[0]
	if mediaDesc.MediaName.Media != "audio" {
		t.Fatalf("–û–∂–∏–¥–∞–ª—Å—è audio media type, –ø–æ–ª—É—á–µ–Ω: %s", mediaDesc.MediaName.Media)
	}

	if len(mediaDesc.MediaName.Formats) == 0 {
		t.Fatal("SDP offer –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ä–º–∞—Ç–æ–≤")
	}

	t.Logf("SDP Offer: media=%s, port=%d, formats=%v",
		mediaDesc.MediaName.Media, mediaDesc.MediaName.Port.Value, mediaDesc.MediaName.Formats)

	// –≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ SDP Answer
	t.Log("–≠—Ç–∞–ø 2: –°–æ–∑–¥–∞–Ω–∏–µ SDP Answer...")

	handlerConfig := media_sdp.DefaultHandlerConfig()
	handlerConfig.SessionID = "test-callee-basic"
	handlerConfig.SessionName = "Basic Test Response"
	handlerConfig.Transport.LocalAddr = ":0"
	handlerConfig.DTMFEnabled = true

	callee, err := media_sdp.NewSDPMediaHandler(handlerConfig)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SDPMediaHandler: %v", err)
	}
	defer callee.Stop()

	err = callee.ProcessOffer(offer)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å SDP offer: %v", err)
	}

	answer, err := callee.CreateAnswer()
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å SDP answer: %v", err)
	}

	t.Log("‚úÖ SDP Answer —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ answer
	if len(answer.MediaDescriptions) == 0 {
		t.Fatal("SDP answer –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ –æ–ø–∏—Å–∞–Ω–∏–π")
	}

	answerMediaDesc := answer.MediaDescriptions[0]
	if answerMediaDesc.MediaName.Media != "audio" {
		t.Fatalf("–û–∂–∏–¥–∞–ª—Å—è audio media type –≤ answer, –ø–æ–ª—É—á–µ–Ω: %s", answerMediaDesc.MediaName.Media)
	}

	t.Logf("SDP Answer: media=%s, port=%d, formats=%v",
		answerMediaDesc.MediaName.Media, answerMediaDesc.MediaName.Port.Value, answerMediaDesc.MediaName.Formats)

	// –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–π
	t.Log("–≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π...")

	callerMedia := caller.GetMediaSession()
	calleeMedia := callee.GetMediaSession()
	callerRTP := caller.GetRTPSession()
	calleeRTP := callee.GetRTPSession()

	if callerMedia == nil {
		t.Fatal("Caller media session –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
	}

	if calleeMedia == nil {
		t.Fatal("Callee media session –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
	}

	if callerRTP == nil {
		t.Fatal("Caller RTP session –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
	}

	if calleeRTP == nil {
		t.Fatal("Callee RTP session –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º SSRC
	callerSSRC := callerRTP.GetSSRC()
	calleeSSRC := calleeRTP.GetSSRC()

	if callerSSRC == 0 {
		t.Fatal("Caller SSRC –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	if calleeSSRC == 0 {
		t.Fatal("Callee SSRC –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	if callerSSRC == calleeSSRC {
		t.Fatal("SSRC –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–∞–∑–Ω—ã–º–∏")
	}

	t.Logf("Caller SSRC: %d, Callee SSRC: %d", callerSSRC, calleeSSRC)

	// –≠—Ç–∞–ø 4: –ó–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–π
	t.Log("–≠—Ç–∞–ø 4: –ó–∞–ø—É—Å–∫ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π...")

	err = callerMedia.Start()
	if err != nil {
		t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å caller media session: %v", err)
	}

	err = calleeMedia.Start()
	if err != nil {
		t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å callee media session: %v", err)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
	time.Sleep(100 * time.Millisecond)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ RTP —Å–µ—Å—Å–∏–π
	if callerSession, ok := callerRTP.(*rtp.Session); ok {
		state := callerSession.GetState()
		t.Logf("Caller RTP session state: %v", state)
		if state != rtp.SessionStateActive && state != rtp.SessionStateIdle {
			t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ caller RTP session: %v", state)
		}
	}

	if calleeSession, ok := calleeRTP.(*rtp.Session); ok {
		state := calleeSession.GetState()
		t.Logf("Callee RTP session state: %v", state)
		if state != rtp.SessionStateActive && state != rtp.SessionStateIdle {
			t.Logf("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ callee RTP session: %v", state)
		}
	}

	// –≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	t.Log("–≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")

	callerStats := callerMedia.GetStatistics()
	calleeStats := calleeMedia.GetStatistics()

	t.Logf("Caller media stats: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d, –ø–æ–ª—É—á–µ–Ω–æ %d –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤",
		callerStats.AudioPacketsSent, callerStats.AudioPacketsReceived)
	t.Logf("Callee media stats: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ %d, –ø–æ–ª—É—á–µ–Ω–æ %d –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤",
		calleeStats.AudioPacketsSent, calleeStats.AudioPacketsReceived)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º RTCP –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
	if callerRTP.IsRTCPEnabled() {
		t.Log("Caller RTCP –≤–∫–ª—é—á–µ–Ω")
	}

	if calleeRTP.IsRTCPEnabled() {
		t.Log("Callee RTCP –≤–∫–ª—é—á–µ–Ω")
	}

	t.Log("üéâ –ë–∞–∑–æ–≤—ã–π SDP workflow —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
}

// TestSDPAttributes —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å SDP –∞—Ç—Ä–∏–±—É—Ç–æ–≤
func TestSDPAttributes(t *testing.T) {
	t.Log("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SDP –∞—Ç—Ä–∏–±—É—Ç–æ–≤")

	builderConfig := media_sdp.DefaultBuilderConfig()
	builderConfig.SessionID = "attr-test"
	builderConfig.PayloadType = rtp.PayloadTypeG722
	builderConfig.ClockRate = 8000
	builderConfig.Transport.LocalAddr = ":0"
	builderConfig.DTMFEnabled = true
	builderConfig.DTMFPayloadType = 101
	builderConfig.Direction = media.DirectionSendOnly

	builder, err := media_sdp.NewSDPMediaBuilder(builderConfig)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å builder: %v", err)
	}
	defer func() { _ = builder.Stop() }()

	offer, err := builder.CreateOffer()
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å offer: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
	mediaDesc := offer.MediaDescriptions[0]

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º formats (–¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å G722 –∏ DTMF)
	expectedFormats := []string{"9", "101"} // G722 = 9, DTMF = 101
	if len(mediaDesc.MediaName.Formats) != len(expectedFormats) {
		t.Errorf("–û–∂–∏–¥–∞–ª–æ—Å—å %d —Ñ–æ—Ä–º–∞—Ç–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ %d", len(expectedFormats), len(mediaDesc.MediaName.Formats))
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ rtpmap –∞—Ç—Ä–∏–±—É—Ç–æ–≤
	rtpmapFound := false
	dtmfRtpmapFound := false
	directionFound := false

	for _, attr := range mediaDesc.Attributes {
		switch attr.Key {
		case "rtpmap":
			if attr.Value == "9 G722/8000" {
				rtpmapFound = true
			}
			if attr.Value == "101 telephone-event/8000" {
				dtmfRtpmapFound = true
			}
		case "sendonly":
			directionFound = true
		}
	}

	if !rtpmapFound {
		t.Error("G722 rtpmap –∞—Ç—Ä–∏–±—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	if !dtmfRtpmapFound {
		t.Error("DTMF rtpmap –∞—Ç—Ä–∏–±—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	if !directionFound {
		t.Error("Direction –∞—Ç—Ä–∏–±—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
	}

	t.Log("‚úÖ SDP –∞—Ç—Ä–∏–±—É—Ç—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
}

// TestCodecCompatibility —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–¥–µ–∫–æ–≤
func TestCodecCompatibility(t *testing.T) {
	t.Log("üéß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –∫–æ–¥–µ–∫–æ–≤")

	// –°–æ–∑–¥–∞–µ–º offer —Å G722
	builderConfig := media_sdp.DefaultBuilderConfig()
	builderConfig.SessionID = "codec-test-caller"
	builderConfig.PayloadType = rtp.PayloadTypeG722
	builderConfig.ClockRate = 8000
	builderConfig.Transport.LocalAddr = ":0"

	builder, err := media_sdp.NewSDPMediaBuilder(builderConfig)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å builder: %v", err)
	}
	defer func() { _ = builder.Stop() }()

	offer, err := builder.CreateOffer()
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å offer: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º handler –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç G722
	handlerConfig := media_sdp.DefaultHandlerConfig()
	handlerConfig.SessionID = "codec-test-callee"
	handlerConfig.Transport.LocalAddr = ":0"
	// –û—Å—Ç–∞–≤–ª—è–µ–º default supported codecs (–≤–∫–ª—é—á–∞–µ—Ç G722)

	handler, err := media_sdp.NewSDPMediaHandler(handlerConfig)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å handler: %v", err)
	}
	defer func() { _ = handler.Stop() }()

	err = handler.ProcessOffer(offer)
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å offer: %v", err)
	}

	answer, err := handler.CreateAnswer()
	if err != nil {
		t.Fatalf("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å answer: %v", err)
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ answer —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥–µ–∫
	answerMedia := answer.MediaDescriptions[0]

	// –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω G722 (payload type 9)
	hasG722 := false
	for _, format := range answerMedia.MediaName.Formats {
		if format == "9" {
			hasG722 = true
			break
		}
	}

	if !hasG722 {
		t.Errorf("G722 –∫–æ–¥–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ answer. Formats: %v", answerMedia.MediaName.Formats)
	}

	t.Log("‚úÖ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –∫–æ–¥–µ–∫–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
}
