package main

import (
	"fmt"
	"log"
	"time"

	"github.com/arzzra/soft_phone/pkg/manager_media"
	"github.com/arzzra/soft_phone/pkg/media"
)

// SimpleEventHandler –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
type SimpleEventHandler struct{}

func (h *SimpleEventHandler) OnSessionCreated(sessionID string) {
	fmt.Printf("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è: %s...\n", sessionID[:8])
}

func (h *SimpleEventHandler) OnSessionUpdated(sessionID string) {
	fmt.Printf("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å–µ—Å—Å–∏—è: %s...\n", sessionID[:8])
}

func (h *SimpleEventHandler) OnSessionClosed(sessionID string) {
	fmt.Printf("‚ùå –ó–∞–∫—Ä—ã—Ç–∞ —Å–µ—Å—Å–∏—è: %s...\n", sessionID[:8])
}

func (h *SimpleEventHandler) OnSessionError(sessionID string, err error) {
	fmt.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ %s...: %v\n", sessionID[:8], err)
}

func (h *SimpleEventHandler) OnMediaReceived(sessionID string, data []byte, mediaType string) {
	fmt.Printf("üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ (%s): %d –±–∞–π—Ç\n", mediaType, len(data))
}

func (h *SimpleEventHandler) OnSDPNegotiated(sessionID string, localSDP, remoteSDP string) {
	fmt.Printf("ü§ù SDP —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ %s...\n", sessionID[:8])
}

// SimpleDemo –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Media Manager
func SimpleDemo() error {
	fmt.Println("üéØ –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä Media Manager")
	fmt.Println("===============================")

	// –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	fmt.Println("üì¶ –®–∞–≥ 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
	config := manager_media.ManagerConfig{
		DefaultLocalIP: "127.0.0.1", // –õ–æ–∫–∞–ª—å–Ω—ã–π IP –∞–¥—Ä–µ—Å
		DefaultPtime:   20,          // Packet time –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
		RTPPortRange: manager_media.PortRange{
			Min: 10000, // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è RTP
			Max: 10050, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è RTP
		},
		DefaultAudioCodecs: []string{"PCMU", "PCMA"}, // –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–¥–µ–∫–∏
	}
	fmt.Printf("   IP: %s, –ü–æ—Ä—Ç—ã: %d-%d\n",
		config.DefaultLocalIP, config.RTPPortRange.Min, config.RTPPortRange.Max)

	// –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ Media Manager
	fmt.Println("üöÄ –®–∞–≥ 2: –°–æ–∑–¥–∞–Ω–∏–µ Media Manager...")
	mediaManager, err := manager_media.NewMediaManager(config)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: %w", err)
	}
	// –í–∞–∂–Ω–æ: –≤—Å–µ–≥–¥–∞ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä
	defer mediaManager.Stop()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
	handler := &SimpleEventHandler{}
	mediaManager.SetEventHandler(handler)

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
	if err := mediaManager.Start(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞: %w", err)
	}
	fmt.Println("   ‚úÖ Media Manager –∑–∞–ø—É—â–µ–Ω")

	// –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏ (Caller)
	fmt.Println("üìû –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ Caller —Å–µ—Å—Å–∏–∏...")
	callerConstraints := manager_media.SessionConstraints{
		AudioEnabled:   true,                            // –í–∫–ª—é—á–∞–µ–º –∞—É–¥–∏–æ
		AudioDirection: manager_media.DirectionSendRecv, // –î–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –∞—É–¥–∏–æ
		AudioCodecs:    []string{"PCMU", "PCMA"},        // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∫–æ–¥–µ–∫–∏
	}

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (offer)
	callerSession, sdpOffer, err := mediaManager.CreateOffer(callerConstraints)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è caller: %w", err)
	}
	fmt.Printf("   ‚úÖ Caller —Å–æ–∑–¥–∞–Ω: %s...\n", callerSession.SessionID[:8])
	fmt.Printf("   üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: %v\n", callerSession.LocalAddress)

	// –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —Å–µ—Å—Å–∏–∏ (Callee)
	fmt.Println("üìû –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ Callee —Å–µ—Å—Å–∏–∏...")

	// –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ SDP offer
	calleeSession, err := mediaManager.CreateSessionFromSDP(sdpOffer)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è callee: %w", err)
	}
	fmt.Printf("   ‚úÖ Callee —Å–æ–∑–¥–∞–Ω: %s...\n", calleeSession.SessionID[:8])
	fmt.Printf("   üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: %v\n", calleeSession.LocalAddress)

	// –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç (answer)
	calleeConstraints := manager_media.SessionConstraints{
		AudioEnabled:   true,
		AudioDirection: manager_media.DirectionSendRecv,
		AudioCodecs:    []string{"PCMU"}, // –í—ã–±–∏—Ä–∞–µ–º –æ–¥–∏–Ω –∫–æ–¥–µ–∫
	}

	sdpAnswer, err := mediaManager.CreateAnswer(calleeSession.SessionID, calleeConstraints)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è answer: %w", err)
	}
	fmt.Printf("   ‚úÖ SDP Answer —Å–æ–∑–¥–∞–Ω (%d —Å–∏–º–≤–æ–ª–æ–≤)\n", len(sdpAnswer))

	// –®–∞–≥ 5: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	fmt.Println("ü§ù –®–∞–≥ 5: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")

	// –û–±–Ω–æ–≤–ª—è–µ–º caller —Å–µ—Å—Å–∏—é —Å –ø–æ–ª—É—á–µ–Ω–Ω—ã–º answer
	err = mediaManager.UpdateSession(callerSession.SessionID, sdpAnswer)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è caller: %w", err)
	}
	fmt.Println("   ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

	// –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–π
	fmt.Println("üìä –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–π...")

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ caller
	updatedCaller, err := mediaManager.GetSession(callerSession.SessionID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è caller: %w", err)
	}
	fmt.Printf("   üìû Caller —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %v\n", updatedCaller.State)

	// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ callee
	updatedCallee, err := mediaManager.GetSession(calleeSession.SessionID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è callee: %w", err)
	}
	fmt.Printf("   üìû Callee —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %v\n", updatedCallee.State)

	// –®–∞–≥ 7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	fmt.Println("üìà –®–∞–≥ 7: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ caller
	callerStats, err := mediaManager.GetSessionStatistics(callerSession.SessionID)
	if err == nil {
		fmt.Printf("   üìä Caller: —Å–æ—Å—Ç–æ—è–Ω–∏–µ=%v, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å=%d —Å–µ–∫\n",
			callerStats.State, callerStats.Duration)
	}

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ callee
	calleeStats, err := mediaManager.GetSessionStatistics(calleeSession.SessionID)
	if err == nil {
		fmt.Printf("   üìä Callee: —Å–æ—Å—Ç–æ—è–Ω–∏–µ=%v, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å=%d —Å–µ–∫\n",
			calleeStats.State, calleeStats.Duration)
	}

	// –®–∞–≥ 8: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ
	fmt.Println("üéµ –®–∞–≥ 8: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ...")

	// –ï—Å–ª–∏ MediaSession –¥–æ—Å—Ç—É–ø–Ω—ã, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á—É
	if updatedCaller.MediaSession != nil && updatedCallee.MediaSession != nil {
		if err := demonstrateSimpleAudioTransmission(updatedCaller, updatedCallee); err != nil {
			fmt.Printf("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ: %v\n", err)
		}
	} else {
		fmt.Println("   ‚ÑπÔ∏è MediaSession –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –∞—É–¥–∏–æ")
		time.Sleep(2 * time.Second)
	}

	// –®–∞–≥ 9: –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–π
	fmt.Println("üèÅ –®–∞–≥ 9: –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–π...")

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º caller
	if err := mediaManager.CloseSession(callerSession.SessionID); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è caller: %v", err)
	}

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º callee
	if err := mediaManager.CloseSession(calleeSession.SessionID); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è callee: %v", err)
	}

	fmt.Println("‚úÖ –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
	return nil
}

// runSimpleExample –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä
func runSimpleExample() {
	if err := SimpleDemo(); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ: %v", err)
	}
}

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
func demonstrateBasicOperations() {
	fmt.Println("\nüîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
	fmt.Println("=================================")

	// –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	config := manager_media.ManagerConfig{
		DefaultLocalIP: "127.0.0.1",
		RTPPortRange:   manager_media.PortRange{Min: 15000, Max: 15100},
	}

	manager, err := manager_media.NewMediaManager(config)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞: %v", err)
		return
	}
	defer manager.Stop()

	if err := manager.Start(); err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: %v", err)
		return
	}

	// –û–ø–µ—Ä–∞—Ü–∏—è 1: –°–ø–∏—Å–æ–∫ —Å–µ—Å—Å–∏–π (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º)
	sessions := manager.ListSessions()
	fmt.Printf("üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: %d\n", len(sessions))

	// –û–ø–µ—Ä–∞—Ü–∏—è 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ offer
	constraints := manager_media.SessionConstraints{
		AudioEnabled: true,
		AudioCodecs:  []string{"PCMU"},
	}

	session, offer, err := manager.CreateOffer(constraints)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer: %v", err)
		return
	}

	fmt.Printf("‚úÖ –°–æ–∑–¥–∞–Ω offer –¥–ª—è —Å–µ—Å—Å–∏–∏ %s...\n", session.SessionID[:8])
	fmt.Printf("üìù SDP –¥–ª–∏–Ω–∞: %d —Å–∏–º–≤–æ–ª–æ–≤\n", len(offer))

	// –û–ø–µ—Ä–∞—Ü–∏—è 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π
	sessions = manager.ListSessions()
	fmt.Printf("üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: %d\n", len(sessions))

	// –û–ø–µ—Ä–∞—Ü–∏—è 4: –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–µ—Å—Å–∏–∏
	if err := manager.CloseSession(session.SessionID); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è: %v", err)
	} else {
		fmt.Println("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞")
	}

	// –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
	sessions = manager.ListSessions()
	fmt.Printf("üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: %d\n", len(sessions))
}

// demonstrateSimpleAudioTransmission –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é –ø–µ—Ä–µ–¥–∞—á—É –∞—É–¥–∏–æ
func demonstrateSimpleAudioTransmission(callerSession, calleeSession *manager_media.MediaSessionInfo) error {
	// –ó–∞–ø—É—Å–∫–∞–µ–º MediaSession –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if callerSession.MediaSession.GetState() != media.MediaStateActive {
		if err := callerSession.MediaSession.Start(); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ caller MediaSession: %w", err)
		}
	}

	if calleeSession.MediaSession.GetState() != media.MediaStateActive {
		if err := calleeSession.MediaSession.Start(); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ callee MediaSession: %w", err)
		}
	}

	// –ü—Ä–æ—Å—Ç–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
	testData := make([]byte, 160) // 20ms –∞—É–¥–∏–æ –¥–ª—è 8kHz
	for i := range testData {
		testData[i] = byte(i % 128) // –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
	}

	fmt.Println("   üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤...")

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º 3 –ø–∞–∫–µ—Ç–∞ –æ—Ç –∫–∞–∂–¥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã
	for i := 1; i <= 3; i++ {
		// –û—Ç caller
		if err := callerSession.MediaSession.SendAudio(testData); err != nil {
			fmt.Printf("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç caller: %v\n", err)
		} else {
			fmt.Printf("   üì§ Caller –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–∞–∫–µ—Ç %d\n", i)
		}

		// –û—Ç callee
		if err := calleeSession.MediaSession.SendAudio(testData); err != nil {
			fmt.Printf("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç callee: %v\n", err)
		} else {
			fmt.Printf("   üì§ Callee –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–∞–∫–µ—Ç %d\n", i)
		}

		time.Sleep(20 * time.Millisecond) // 20ms –∏–Ω—Ç–µ—Ä–≤–∞–ª
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	callerStats := callerSession.MediaSession.GetStatistics()
	calleeStats := calleeSession.MediaSession.GetStatistics()

	fmt.Printf("   üìä Caller: %d –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n", callerStats.AudioPacketsSent)
	fmt.Printf("   üìä Callee: %d –ø–∞–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n", calleeStats.AudioPacketsSent)
	fmt.Println("   ‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

	return nil
}
