package main

import (
	"fmt"
	"log"
	"time"

	"github.com/arzzra/soft_phone/pkg/manager_media"
)

func main() {
	fmt.Println("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Media Manager: Peer-to-Peer –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è")
	fmt.Println("============================================================")

	// 1. –°–æ–∑–¥–∞–µ–º Media Manager –Ω–∞ localhost
	fmt.Println("\nüì¶ 1. –°–æ–∑–¥–∞–Ω–∏–µ Media Manager –Ω–∞ localhost...")

	config := manager_media.ManagerConfig{
		DefaultLocalIP: "127.0.0.1",
		DefaultPtime:   20,
		RTPPortRange: manager_media.PortRange{
			Min: 10000,
			Max: 10100,
		},
	}

	mediaManager, err := manager_media.NewMediaManager(config)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Media Manager: %v", err)
	}
	defer mediaManager.Stop()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
	eventHandler := &EventHandler{}
	mediaManager.SetEventHandler(eventHandler)

	fmt.Printf("‚úÖ Media Manager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ\n")
	fmt.Printf("   üìç –õ–æ–∫–∞–ª—å–Ω—ã–π IP: %s\n", config.DefaultLocalIP)
	fmt.Printf("   üîå –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤: %d-%d\n", config.RTPPortRange.Min, config.RTPPortRange.Max)

	// 2. –°–æ–∑–¥–∞–µ–º SDP offer –∏ –ø–µ—Ä–≤—É—é –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏—é (–æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å)
	fmt.Println("\nüöÄ 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏ (Caller) —Å SDP offer...")

	callerConstraints := manager_media.SessionConstraints{
		AudioEnabled:   true,
		AudioDirection: manager_media.DirectionSendRecv,
		AudioCodecs:    []string{"PCMU", "PCMA"},
	}

	callerSession, sdpOffer, err := mediaManager.CreateOffer(callerConstraints)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SDP offer: %v", err)
	}

	fmt.Printf("‚úÖ Caller —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: %s\n", callerSession.SessionID[:8]+"...")
	fmt.Printf("   üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: %v\n", callerSession.LocalAddress)
	fmt.Printf("   üìÑ SDP Offer (%d —Å–∏–º–≤–æ–ª–æ–≤):\n", len(sdpOffer))
	fmt.Printf("---\n%s\n---\n", sdpOffer)

	// 3. –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é —Å–µ—Å—Å–∏—é (–ø–æ–ª—É—á–∞—Ç–µ–ª—å) –Ω–∞ –æ—Å–Ω–æ–≤–µ SDP offer
	fmt.Println("\nüìû 3. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —Å–µ—Å—Å–∏–∏ (Callee) –Ω–∞ –æ—Å–Ω–æ–≤–µ SDP offer...")

	calleeSession, err := mediaManager.CreateSessionFromSDP(sdpOffer)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ –∏–∑ SDP: %v", err)
	}

	fmt.Printf("‚úÖ Callee —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: %s\n", calleeSession.SessionID[:8]+"...")
	fmt.Printf("   üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: %v\n", calleeSession.LocalAddress)
	fmt.Printf("   üìç –£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: %v\n", calleeSession.RemoteAddress)

	// –°–æ–∑–¥–∞–µ–º SDP answer
	calleeConstraints := manager_media.SessionConstraints{
		AudioEnabled:   true,
		AudioDirection: manager_media.DirectionSendRecv,
		AudioCodecs:    []string{"PCMU"},
	}

	sdpAnswer, err := mediaManager.CreateAnswer(calleeSession.SessionID, calleeConstraints)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SDP answer: %v", err)
	}

	fmt.Printf("‚úÖ SDP Answer —Å–æ–∑–¥–∞–Ω (%d —Å–∏–º–≤–æ–ª–æ–≤):\n", len(sdpAnswer))
	fmt.Printf("---\n%s\n---\n", sdpAnswer)

	// 4. –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏ —Å –ø–æ–º–æ—â—å—é SDP answer
	fmt.Println("\nü§ù 4. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")

	err = mediaManager.UpdateSession(callerSession.SessionID, sdpAnswer)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è caller —Å–µ—Å—Å–∏–∏: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏—è—Ö
	updatedCallerSession, err := mediaManager.GetSession(callerSession.SessionID)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è caller —Å–µ—Å—Å–∏–∏: %v", err)
	}

	updatedCalleeSession, err := mediaManager.GetSession(calleeSession.SessionID)
	if err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è callee —Å–µ—Å—Å–∏–∏: %v", err)
	}

	fmt.Printf("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!\n")
	fmt.Printf("   üìû Caller —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %v\n", updatedCallerSession.State)
	fmt.Printf("   üìû Callee —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %v\n", updatedCalleeSession.State)
	fmt.Printf("   üîó Caller -> Callee: %v -> %v\n",
		updatedCallerSession.LocalAddress, updatedCallerSession.RemoteAddress)
	fmt.Printf("   üîó Callee -> Caller: %v -> %v\n",
		updatedCalleeSession.LocalAddress, updatedCalleeSession.RemoteAddress)

	// 5. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
	fmt.Println("\nüéµ 5. –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö...")

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –ø–µ—Ä–µ–¥–∞—á—É –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
	if err := simulateAudioTransmission(mediaManager, updatedCallerSession, updatedCalleeSession); err != nil {
		log.Printf("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	fmt.Println("\nüìä 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π:")

	callerStats, err := mediaManager.GetSessionStatistics(callerSession.SessionID)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ caller: %v", err)
	} else {
		displaySessionStats("Caller", callerStats)
	}

	calleeStats, err := mediaManager.GetSessionStatistics(calleeSession.SessionID)
	if err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ callee: %v", err)
	} else {
		displaySessionStats("Callee", calleeStats)
	}

	// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
	fmt.Println("\nüèÅ 7. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π...")

	fmt.Printf("üìû –ó–∞–∫—Ä—ã—Ç–∏–µ caller —Å–µ—Å—Å–∏–∏...\n")
	if err := mediaManager.CloseSession(callerSession.SessionID); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è caller —Å–µ—Å—Å–∏–∏: %v", err)
	}

	fmt.Printf("üìû –ó–∞–∫—Ä—ã—Ç–∏–µ callee —Å–µ—Å—Å–∏–∏...\n")
	if err := mediaManager.CloseSession(calleeSession.SessionID); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è callee —Å–µ—Å—Å–∏–∏: %v", err)
	}

	fmt.Printf("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!\n")
	fmt.Printf("üéØ –í—Å–µ —ç—Ç–∞–ø—ã peer-to-peer –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:\n")
	fmt.Printf("   ‚úì –°–æ–∑–¥–∞–Ω–∏–µ Media Manager\n")
	fmt.Printf("   ‚úì –°–æ–∑–¥–∞–Ω–∏–µ SDP offer –∏ caller —Å–µ—Å—Å–∏–∏\n")
	fmt.Printf("   ‚úì –°–æ–∑–¥–∞–Ω–∏–µ callee —Å–µ—Å—Å–∏–∏ –∏ SDP answer\n")
	fmt.Printf("   ‚úì –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è\n")
	fmt.Printf("   ‚úì –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö\n")
	fmt.Printf("   ‚úì –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n")
	fmt.Printf("   ‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ\n")
}

// simulateAudioTransmission —Å–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏
func simulateAudioTransmission(manager *manager_media.MediaManager, caller, callee *manager_media.MediaSessionInfo) error {
	fmt.Printf("üéµ –°–∏–º—É–ª—è—Ü–∏—è –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–æ–≤...\n")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–π
	if caller.MediaSession == nil || callee.MediaSession == nil {
		return fmt.Errorf("–º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º peer —Å–≤—è–∑—å –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö
	if callerStub, ok := caller.MediaSession.(interface {
		SetPeer(manager_media.MediaSessionInterface)
	}); ok {
		callerStub.SetPeer(callee.MediaSession)
	}
	if calleeStub, ok := callee.MediaSession.(interface {
		SetPeer(manager_media.MediaSessionInterface)
	}); ok {
		calleeStub.SetPeer(caller.MediaSession)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ–¥–∏–∞ —Å–µ—Å—Å–∏–∏
	if err := caller.MediaSession.Start(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ caller —Å–µ—Å—Å–∏–∏: %v", err)
	}
	if err := callee.MediaSession.Start(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ callee —Å–µ—Å—Å–∏–∏: %v", err)
	}

	// –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤
	for i := 0; i < 5; i++ {
		// –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç (160 –±–∞–π—Ç = 20ms –ø—Ä–∏ 8kHz)
		audioData := make([]byte, 160)
		for j := range audioData {
			audioData[j] = byte(i*10 + j) // –ü—Ä–æ—Å—Ç—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
		}

		fmt.Printf("   üì§ Caller –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–∫–µ—Ç %d (%d –±–∞–π—Ç)\n", i+1, len(audioData))
		if err := caller.MediaSession.SendAudio(audioData); err != nil {
			fmt.Printf("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç caller: %v\n", err)
		}

		fmt.Printf("   üì• Callee –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–∞–∫–µ—Ç %d (%d –±–∞–π—Ç)\n", i+1, len(audioData))
		if err := callee.MediaSession.SendAudio(audioData); err != nil {
			fmt.Printf("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç callee: %v\n", err)
		}

		// –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
		time.Sleep(20 * time.Millisecond)
	}

	// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
	time.Sleep(100 * time.Millisecond)

	fmt.Printf("‚úÖ –ü–µ—Ä–µ–¥–∞—á–∞ %d –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n", 5)
	return nil
}

// displaySessionStats –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–∏
func displaySessionStats(name string, stats *manager_media.SessionStatistics) {
	fmt.Printf("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ %s —Å–µ—Å—Å–∏–∏:\n", name)
	fmt.Printf("   üÜî ID: %s\n", stats.SessionID[:8]+"...")
	fmt.Printf("   üìà –°–æ—Å—Ç–æ—è–Ω–∏–µ: %v\n", stats.State)
	fmt.Printf("   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d —Å–µ–∫\n", stats.Duration)
	fmt.Printf("   üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %d\n", stats.LastActivity)
	fmt.Printf("   üéµ –ú–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–æ–≤: %d\n", len(stats.MediaStatistics))

	for mediaType, mediaStats := range stats.MediaStatistics {
		fmt.Printf("     üìª %s: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ=%d, –ø–æ–ª—É—á–µ–Ω–æ=%d –ø–∞–∫–µ—Ç–æ–≤\n",
			mediaType, mediaStats.PacketsSent, mediaStats.PacketsReceived)
		fmt.Printf("             –±–∞–π—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ=%d, –ø–æ–ª—É—á–µ–Ω–æ=%d\n",
			mediaStats.BytesSent, mediaStats.BytesReceived)

		if mediaStats.PacketsSent > 0 || mediaStats.PacketsReceived > 0 {
			fmt.Printf("             üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏:\n")
			if mediaStats.PacketsSent > 0 {
				avgPacketSizeOut := mediaStats.BytesSent / mediaStats.PacketsSent
				fmt.Printf("                 –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞: %d –±–∞–π—Ç\n", avgPacketSizeOut)
			}
			if mediaStats.PacketsReceived > 0 {
				avgPacketSizeIn := mediaStats.BytesReceived / mediaStats.PacketsReceived
				fmt.Printf("                 –°—Ä–µ–¥–Ω–∏–π —Ä–∞–∑–º–µ—Ä –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞: %d –±–∞–π—Ç\n", avgPacketSizeIn)
			}
		}
	}
}

// EventHandler —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å MediaManagerEventHandler
type EventHandler struct{}

func (h *EventHandler) OnSessionCreated(sessionID string) {
	fmt.Printf("üéâ –°–æ–±—ã—Ç–∏–µ: –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ [%s]\n", sessionID[:8]+"...")
}

func (h *EventHandler) OnSessionUpdated(sessionID string) {
	fmt.Printf("üîÑ –°–æ–±—ã—Ç–∏–µ: –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ [%s]\n", sessionID[:8]+"...")
}

func (h *EventHandler) OnSessionClosed(sessionID string) {
	fmt.Printf("üö™ –°–æ–±—ã—Ç–∏–µ: –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ [%s]\n", sessionID[:8]+"...")
}

func (h *EventHandler) OnSessionError(sessionID string, err error) {
	fmt.Printf("‚ùå –°–æ–±—ã—Ç–∏–µ: –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ [%s]: %v\n", sessionID[:8]+"...", err)
}

func (h *EventHandler) OnMediaReceived(sessionID string, data []byte, mediaType string) {
	fmt.Printf("üì• –°–æ–±—ã—Ç–∏–µ: –ü–æ–ª—É—á–µ–Ω—ã –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ [%s]: %d –±–∞–π—Ç (%s)\n",
		sessionID[:8]+"...", len(data), mediaType)
}

func (h *EventHandler) OnSDPNegotiated(sessionID string, localSDP, remoteSDP string) {
	fmt.Printf("ü§ù –°–æ–±—ã—Ç–∏–µ: SDP —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω [%s]\n", sessionID[:8]+"...")
}
