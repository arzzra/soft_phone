package main

import (
	"context"
	"fmt"
	"log"
	"net"
	"strings"
	"time"

	"github.com/arzzra/soft_phone/pkg/manager_media"
	"github.com/arzzra/soft_phone/pkg/media"
)

// eventHandler —Ä–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å MediaManagerEventHandler –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
type eventHandler struct{}

func (h *eventHandler) OnSessionCreated(sessionID string) {
	fmt.Printf("üéâ –°–æ–±—ã—Ç–∏–µ: –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞ [%s...]\n", sessionID[:8])
}

func (h *eventHandler) OnSessionUpdated(sessionID string) {
	fmt.Printf("üîÑ –°–æ–±—ã—Ç–∏–µ: –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ [%s...]\n", sessionID[:8])
}

func (h *eventHandler) OnSessionClosed(sessionID string) {
	fmt.Printf("üö™ –°–æ–±—ã—Ç–∏–µ: –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞ [%s...]\n", sessionID[:8])
}

func (h *eventHandler) OnSessionError(sessionID string, err error) {
	fmt.Printf("‚ùå –°–æ–±—ã—Ç–∏–µ: –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ [%s...]: %v\n", sessionID[:8], err)
}

func (h *eventHandler) OnMediaReceived(sessionID string, data []byte, mediaType string) {
	fmt.Printf("üì• –°–æ–±—ã—Ç–∏–µ: –ü–æ–ª—É—á–µ–Ω—ã –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–µ—Å—Å–∏–∏ [%s...]: %d –±–∞–π—Ç, —Ç–∏–ø %s\n", sessionID[:8], len(data), mediaType)
}

func (h *eventHandler) OnSDPNegotiated(sessionID string, localSDP, remoteSDP string) {
	fmt.Printf("‚úÖ –°–æ–±—ã—Ç–∏–µ: SDP —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ [%s...]\n", sessionID[:8])
}

func main() {
	fmt.Println("üéØ –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Media Manager")
	fmt.Println("=====================================")
	fmt.Println()
	fmt.Println("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞:")
	fmt.Println("1. üìû –ü–æ–ª–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è P2P –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ (–æ—Å–Ω–æ–≤–Ω–æ–π)")
	fmt.Println("2. üîß –ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö")
	fmt.Println("3. üöÄ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å–µ—Å—Å–∏—è–º–∏")
	fmt.Println("4. ‚öôÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π")
	fmt.Println("5. üéØ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ")
	fmt.Println()

	var choice int
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∏–º–µ—Ä–∞ (1-5): ")
	_, err := fmt.Scanf("%d", &choice)
	if err != nil {
		choice = 1 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–µ—Ä
	}

	fmt.Println()

	switch choice {
	case 1:
		runMainDemo()
	case 2:
		runSimpleExample()
	case 3:
		runAdvancedExample()
	case 4:
		demonstrateBasicOperations()
	case 5:
		runAllExamples()
	default:
		fmt.Println("ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä, –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–∏–º–µ—Ä...")
		runMainDemo()
	}
}

// runMainDemo –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
func runMainDemo() {
	fmt.Println("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è Media Manager: Peer-to-Peer –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—è")
	fmt.Println("============================================================")

	ctx, cancel := context.WithTimeout(context.Background(), 30*time.Second)
	defer cancel()

	if err := runDemo(ctx); err != nil {
		log.Fatalf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
	}

	fmt.Println("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
	fmt.Println("üéØ –í—Å–µ —ç—Ç–∞–ø—ã peer-to-peer –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:")
	fmt.Println("   ‚úì –°–æ–∑–¥–∞–Ω–∏–µ Media Manager")
	fmt.Println("   ‚úì –°–æ–∑–¥–∞–Ω–∏–µ SDP offer –∏ caller —Å–µ—Å—Å–∏–∏")
	fmt.Println("   ‚úì –°–æ–∑–¥–∞–Ω–∏–µ callee —Å–µ—Å—Å–∏–∏ –∏ SDP answer")
	fmt.Println("   ‚úì –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è")
	fmt.Println("   ‚úì –ü–µ—Ä–µ–¥–∞—á–∞ –¥–∞–Ω–Ω—ã—Ö")
	fmt.Println("   ‚úì –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
	fmt.Println("   ‚úì –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ")
}

// runAllExamples –∑–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –ø—Ä–∏–º–µ—Ä—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
func runAllExamples() {
	fmt.Println("üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–∏–º–µ—Ä–æ–≤ Media Manager")
	fmt.Println("=====================================")

	examples := []struct {
		name string
		fn   func()
	}{
		{"–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä", runSimpleExample},
		{"–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π", demonstrateBasicOperations},
		{"–û—Å–Ω–æ–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è P2P", runMainDemo},
		{"–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä", runAdvancedExample},
	}

	for i, example := range examples {
		fmt.Printf("\nüîÑ [%d/%d] –ó–∞–ø—É—Å–∫: %s\n", i+1, len(examples), example.name)
		fmt.Println(strings.Repeat("=", 50))

		example.fn()

		if i < len(examples)-1 {
			fmt.Println("\n‚è∏Ô∏è –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–∏–º–µ—Ä–∞–º–∏ (3 —Å–µ–∫—É–Ω–¥—ã)...")
			time.Sleep(3 * time.Second)
		}
	}

	fmt.Println("\nüéâ –í—Å–µ –ø—Ä–∏–º–µ—Ä—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
}

func runDemo(ctx context.Context) error {
	// 1. –°–æ–∑–¥–∞–Ω–∏–µ Media Manager –Ω–∞ localhost
	fmt.Println("\nüì¶ 1. –°–æ–∑–¥–∞–Ω–∏–µ Media Manager –Ω–∞ localhost...")

	config := manager_media.ManagerConfig{
		DefaultLocalIP: "127.0.0.1",
		DefaultPtime:   20,
		RTPPortRange: manager_media.PortRange{
			Min: 10000,
			Max: 10100,
		},
		DefaultAudioCodecs: []string{"PCMU", "PCMA"},
	}

	mediaManager, err := manager_media.NewMediaManager(config)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Media Manager: %w", err)
	}
	defer mediaManager.Stop()

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
	handler := &eventHandler{}
	mediaManager.SetEventHandler(handler)

	if err := mediaManager.Start(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Media Manager: %w", err)
	}

	fmt.Println("‚úÖ Media Manager —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
	fmt.Printf("   üìç –õ–æ–∫–∞–ª—å–Ω—ã–π IP: %s\n", config.DefaultLocalIP)
	fmt.Printf("   üîå –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤: %d-%d\n", config.RTPPortRange.Min, config.RTPPortRange.Max)

	// 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏ (Caller) —Å SDP offer
	fmt.Println("\nüöÄ 2. –°–æ–∑–¥–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å–µ—Å—Å–∏–∏ (Caller) —Å SDP offer...")

	callerConstraints := manager_media.SessionConstraints{
		LocalIP:        config.DefaultLocalIP,
		AudioEnabled:   true,
		AudioDirection: manager_media.DirectionSendRecv,
		AudioCodecs:    []string{"PCMU", "PCMA"},
		AudioPtime:     20,
	}

	callerSession, sdpOffer, err := mediaManager.CreateOffer(callerConstraints)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è caller —Å–µ—Å—Å–∏–∏: %w", err)
	}

	fmt.Printf("‚úÖ Caller —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: %s...\n", callerSession.SessionID[:8])
	fmt.Printf("   üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: %v\n", callerSession.LocalAddress)
	fmt.Printf("   üìÑ SDP Offer (%d —Å–∏–º–≤–æ–ª–æ–≤):\n", len(sdpOffer))
	fmt.Println("---")
	fmt.Println(sdpOffer)
	fmt.Println("---")

	// 3. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —Å–µ—Å—Å–∏–∏ (Callee) –Ω–∞ –æ—Å–Ω–æ–≤–µ SDP offer
	fmt.Println("\nüìû 3. –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ç–æ—Ä–æ–π —Å–µ—Å—Å–∏–∏ (Callee) –Ω–∞ –æ—Å–Ω–æ–≤–µ SDP offer...")

	calleeSession, err := mediaManager.CreateSessionFromSDP(sdpOffer)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è callee —Å–µ—Å—Å–∏–∏: %w", err)
	}

	fmt.Printf("‚úÖ Callee —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: %s...\n", calleeSession.SessionID[:8])
	fmt.Printf("   üìç –õ–æ–∫–∞–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å: %v\n", calleeSession.LocalAddress)
	fmt.Printf("   üìç –£–¥–∞–ª–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å: %v\n", calleeSession.RemoteAddress)

	calleeConstraints := manager_media.SessionConstraints{
		AudioEnabled:   true,
		AudioDirection: manager_media.DirectionSendRecv,
		AudioCodecs:    []string{"PCMU"}, // –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º PCMU
	}

	sdpAnswer, err := mediaManager.CreateAnswer(calleeSession.SessionID, calleeConstraints)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SDP answer: %w", err)
	}

	fmt.Printf("‚úÖ SDP Answer —Å–æ–∑–¥–∞–Ω (%d —Å–∏–º–≤–æ–ª–æ–≤):\n", len(sdpAnswer))
	fmt.Println("---")
	fmt.Println(sdpAnswer)
	fmt.Println("---")

	// 4. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	fmt.Println("\nü§ù 4. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")

	err = mediaManager.UpdateSession(callerSession.SessionID, sdpAnswer)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è caller —Å–µ—Å—Å–∏–∏: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–π
	updatedCallerSession, err := mediaManager.GetSession(callerSession.SessionID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è caller —Å–µ—Å—Å–∏–∏: %w", err)
	}

	updatedCalleeSession, err := mediaManager.GetSession(calleeSession.SessionID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è callee —Å–µ—Å—Å–∏–∏: %w", err)
	}

	fmt.Println("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
	fmt.Printf("   üìû Caller —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %v\n", updatedCallerSession.State)
	fmt.Printf("   üìû Callee —Å–æ—Å—Ç–æ—è–Ω–∏–µ: %v\n", updatedCalleeSession.State)

	if updatedCallerSession.LocalAddress != nil && updatedCallerSession.RemoteAddress != nil {
		fmt.Printf("   üîó Caller -> Callee: %v -> %v\n",
			updatedCallerSession.LocalAddress, updatedCallerSession.RemoteAddress)
	}
	if updatedCalleeSession.LocalAddress != nil && updatedCalleeSession.RemoteAddress != nil {
		fmt.Printf("   üîó Callee -> Caller: %v -> %v\n",
			updatedCalleeSession.LocalAddress, updatedCalleeSession.RemoteAddress)
	}

	// 5. –†–µ–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö
	fmt.Println("\nüéµ 5. –†–µ–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö...")

	if err := realAudioTransmission(ctx, updatedCallerSession, updatedCalleeSession); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ: %w", err)
	}

	// 6. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	fmt.Println("\nüìä 6. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π:")

	if err := displaySessionStatistics(mediaManager, updatedCallerSession.SessionID, "Caller"); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ caller: %v", err)
	}

	if err := displaySessionStatistics(mediaManager, updatedCalleeSession.SessionID, "Callee"); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ callee: %v", err)
	}

	// 7. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
	fmt.Println("\nüèÅ 7. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–π...")

	fmt.Println("üìû –ó–∞–∫—Ä—ã—Ç–∏–µ caller —Å–µ—Å—Å–∏–∏...")
	if err := mediaManager.CloseSession(updatedCallerSession.SessionID); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è caller —Å–µ—Å—Å–∏–∏: %v", err)
	}

	fmt.Println("üìû –ó–∞–∫—Ä—ã—Ç–∏–µ callee —Å–µ—Å—Å–∏–∏...")
	if err := mediaManager.CloseSession(updatedCalleeSession.SessionID); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è callee —Å–µ—Å—Å–∏–∏: %v", err)
	}

	return nil
}

func realAudioTransmission(ctx context.Context, callerSession, calleeSession *manager_media.MediaSessionInfo) error {
	fmt.Println("üéµ –†–µ–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã—Ö...")

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ MediaSession –¥–æ—Å—Ç—É–ø–Ω—ã
	if callerSession.MediaSession == nil || calleeSession.MediaSession == nil {
		return fmt.Errorf("MediaSession –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º MediaSession –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã
	if callerSession.MediaSession.GetState() != media.MediaStateActive {
		if err := callerSession.MediaSession.Start(); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ caller MediaSession: %w", err)
		}
		fmt.Println("   üöÄ Caller MediaSession –∑–∞–ø—É—â–µ–Ω–∞")
	}

	if calleeSession.MediaSession.GetState() != media.MediaStateActive {
		if err := calleeSession.MediaSession.Start(); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ callee MediaSession: %w", err)
		}
		fmt.Println("   üöÄ Callee MediaSession –∑–∞–ø—É—â–µ–Ω–∞")
	}

	// –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	fmt.Println("   üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏...")

	// –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
	// –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é MediaSession –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏

	// –°–æ–∑–¥–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ (160 –±–∞–π—Ç –¥–ª—è 20ms –ø—Ä–∏ 8kHz PCMU)
	packetSize := 160 // 20ms * 8000 Hz / 1000ms = 160 samples
	packetCount := 10

	fmt.Printf("   üìä –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É %d –ø–∞–∫–µ—Ç–æ–≤ –ø–æ %d –±–∞–π—Ç –∫–∞–∂–¥—ã–π\n", packetCount, packetSize)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –≤ –æ–±–æ–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö
	for i := 1; i <= packetCount; i++ {
		select {
		case <-ctx.Done():
			return ctx.Err()
		default:
		}

		// –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è caller –∏ callee
		callerAudioData := generateTestAudioData(packetSize, i, "caller")
		calleeAudioData := generateTestAudioData(packetSize, i, "callee")

		// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç caller
		if err := callerSession.MediaSession.SendAudio(callerAudioData); err != nil {
			fmt.Printf("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç caller (–ø–∞–∫–µ—Ç %d): %v\n", i, err)
		} else {
			fmt.Printf("   üì§ Caller –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–∞–∫–µ—Ç %d (%d –±–∞–π—Ç)\n", i, len(callerAudioData))
		}

		// –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç callee
		if err := calleeSession.MediaSession.SendAudio(calleeAudioData); err != nil {
			fmt.Printf("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç callee (–ø–∞–∫–µ—Ç %d): %v\n", i, err)
		} else {
			fmt.Printf("   üì§ Callee –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–∞–∫–µ—Ç %d (%d –±–∞–π—Ç)\n", i, len(calleeAudioData))
		}

		// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ø–∞—É–∑–∞ 20ms –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è VoIP)
		time.Sleep(20 * time.Millisecond)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–∞–∫–µ—Ç–æ–≤
	fmt.Println("   ‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
	time.Sleep(100 * time.Millisecond)

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
	callerStats := callerSession.MediaSession.GetStatistics()
	calleeStats := calleeSession.MediaSession.GetStatistics()

	fmt.Printf("   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Caller: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ=%d, –ø–æ–ª—É—á–µ–Ω–æ=%d –ø–∞–∫–µ—Ç–æ–≤\n",
		callerStats.AudioPacketsSent, callerStats.AudioPacketsReceived)
	fmt.Printf("   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Callee: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ=%d, –ø–æ–ª—É—á–µ–Ω–æ=%d –ø–∞–∫–µ—Ç–æ–≤\n",
		calleeStats.AudioPacketsSent, calleeStats.AudioPacketsReceived)

	fmt.Printf("‚úÖ –†–µ–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ %d –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n", packetCount)

	return nil
}

// generateTestAudioData –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏
func generateTestAudioData(size int, packetNum int, source string) []byte {
	data := make([]byte, size)

	// –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è caller –∏ callee –¥–ª—è –ª—É—á—à–µ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
	var baseValue byte
	switch source {
	case "caller":
		baseValue = 0x7F // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è caller
	case "callee":
		baseValue = 0x80 // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è callee
	}

	// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å–∏–Ω—É—Å–æ–∏–¥—É –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
	for i := range data {
		// –ü—Ä–æ—Å—Ç–∞—è —Ñ–æ—Ä–º—É–ª–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–∞–∑–ª–∏—á–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
		value := int(baseValue) + (packetNum*10)%32 + (i % 16) - 8
		if value < 0 {
			value = 0
		} else if value > 255 {
			value = 255
		}
		data[i] = byte(value)
	}

	return data
}

func displaySessionStatistics(manager manager_media.MediaManagerInterface, sessionID, sessionType string) error {
	stats, err := manager.GetSessionStatistics(sessionID)
	if err != nil {
		return err
	}

	fmt.Printf("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ %s —Å–µ—Å—Å–∏–∏:\n", sessionType)
	fmt.Printf("   üÜî ID: %s...\n", sessionID[:8])
	fmt.Printf("   üìà –°–æ—Å—Ç–æ—è–Ω–∏–µ: %v\n", stats.State)
	fmt.Printf("   ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %d —Å–µ–∫\n", stats.Duration)
	fmt.Printf("   üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %d\n", stats.LastActivity)

	if len(stats.MediaStatistics) > 0 {
		fmt.Printf("   üéµ –ú–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–æ–≤: %d\n", len(stats.MediaStatistics))
		for mediaType, mediaStats := range stats.MediaStatistics {
			fmt.Printf("     üìª %s: –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ=%d, –ø–æ–ª—É—á–µ–Ω–æ=%d –ø–∞–∫–µ—Ç–æ–≤\n",
				mediaType, mediaStats.PacketsSent, mediaStats.PacketsReceived)
			fmt.Printf("             –±–∞–π—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ=%d, –ø–æ–ª—É—á–µ–Ω–æ=%d\n",
				mediaStats.BytesSent, mediaStats.BytesReceived)
		}
	}

	if stats.NetworkStats != nil {
		fmt.Printf("   üåê –°–µ—Ç—å: %s -> %s (%s)\n",
			stats.NetworkStats.LocalAddress,
			stats.NetworkStats.RemoteAddress,
			stats.NetworkStats.ConnectionType)
	}

	return nil
}

func getLocalIP() string {
	addrs, err := net.InterfaceAddrs()
	if err != nil {
		return "127.0.0.1"
	}

	for _, addr := range addrs {
		if ipNet, ok := addr.(*net.IPNet); ok && !ipNet.IP.IsLoopback() {
			if ipNet.IP.To4() != nil {
				return ipNet.IP.String()
			}
		}
	}
	return "127.0.0.1"
}
