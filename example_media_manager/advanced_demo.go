package main

import (
	"context"
	"fmt"
	"log"
	"sync"
	"time"

	"github.com/arzzra/soft_phone/pkg/manager_media"
	"github.com/arzzra/soft_phone/pkg/media"
)

// AdvancedEventHandler —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
type AdvancedEventHandler struct {
	sessionStats map[string]*SessionStats
	mutex        sync.RWMutex
}

type SessionStats struct {
	SessionID    string
	CreatedAt    time.Time
	EventCount   int
	LastActivity time.Time
	Errors       []error
}

func NewAdvancedEventHandler() *AdvancedEventHandler {
	return &AdvancedEventHandler{
		sessionStats: make(map[string]*SessionStats),
	}
}

func (h *AdvancedEventHandler) OnSessionCreated(sessionID string) {
	h.mutex.Lock()
	defer h.mutex.Unlock()

	h.sessionStats[sessionID] = &SessionStats{
		SessionID:    sessionID,
		CreatedAt:    time.Now(),
		EventCount:   1,
		LastActivity: time.Now(),
		Errors:       make([]error, 0),
	}

	fmt.Printf("üéâ [%s] –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: %s...\n",
		time.Now().Format("15:04:05"), sessionID[:8])
}

func (h *AdvancedEventHandler) OnSessionUpdated(sessionID string) {
	h.updateActivity(sessionID)
	fmt.Printf("üîÑ [%s] –°–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: %s...\n",
		time.Now().Format("15:04:05"), sessionID[:8])
}

func (h *AdvancedEventHandler) OnSessionClosed(sessionID string) {
	h.updateActivity(sessionID)
	fmt.Printf("üö™ [%s] –°–µ—Å—Å–∏—è –∑–∞–∫—Ä—ã—Ç–∞: %s...\n",
		time.Now().Format("15:04:05"), sessionID[:8])
}

func (h *AdvancedEventHandler) OnSessionError(sessionID string, err error) {
	h.mutex.Lock()
	defer h.mutex.Unlock()

	if stats, exists := h.sessionStats[sessionID]; exists {
		stats.Errors = append(stats.Errors, err)
		stats.LastActivity = time.Now()
		stats.EventCount++
	}

	fmt.Printf("‚ùå [%s] –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ %s...: %v\n",
		time.Now().Format("15:04:05"), sessionID[:8], err)
}

func (h *AdvancedEventHandler) OnMediaReceived(sessionID string, data []byte, mediaType string) {
	h.updateActivity(sessionID)
	fmt.Printf("üì• [%s] –ú–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã–µ %s... (%s, %d –±–∞–π—Ç)\n",
		time.Now().Format("15:04:05"), sessionID[:8], mediaType, len(data))
}

func (h *AdvancedEventHandler) OnSDPNegotiated(sessionID string, localSDP, remoteSDP string) {
	h.updateActivity(sessionID)
	fmt.Printf("‚úÖ [%s] SDP —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω –¥–ª—è %s...\n",
		time.Now().Format("15:04:05"), sessionID[:8])
}

func (h *AdvancedEventHandler) updateActivity(sessionID string) {
	h.mutex.Lock()
	defer h.mutex.Unlock()

	if stats, exists := h.sessionStats[sessionID]; exists {
		stats.LastActivity = time.Now()
		stats.EventCount++
	}
}

func (h *AdvancedEventHandler) GetSessionStats(sessionID string) *SessionStats {
	h.mutex.RLock()
	defer h.mutex.RUnlock()

	if stats, exists := h.sessionStats[sessionID]; exists {
		return stats
	}
	return nil
}

func (h *AdvancedEventHandler) PrintOverallStats() {
	h.mutex.RLock()
	defer h.mutex.RUnlock()

	fmt.Println("\nüìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–±—ã—Ç–∏–π:")
	for sessionID, stats := range h.sessionStats {
		duration := time.Since(stats.CreatedAt)
		fmt.Printf("   üÜî –°–µ—Å—Å–∏—è %s...:\n", sessionID[:8])
		fmt.Printf("      ‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: %v\n", duration.Round(time.Second))
		fmt.Printf("      üìà –°–æ–±—ã—Ç–∏–π: %d\n", stats.EventCount)
		fmt.Printf("      üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: %v –Ω–∞–∑–∞–¥\n",
			time.Since(stats.LastActivity).Round(time.Second))
		if len(stats.Errors) > 0 {
			fmt.Printf("      ‚ùå –û—à–∏–±–æ–∫: %d\n", len(stats.Errors))
		}
	}
}

// runAdvancedDemo –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ Media Manager
func runAdvancedDemo() error {
	fmt.Println("\nüöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ Media Manager")
	fmt.Println("===================================================")

	ctx, cancel := context.WithTimeout(context.Background(), 45*time.Second)
	defer cancel()

	// –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
	handler := NewAdvancedEventHandler()

	// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏
	config := manager_media.ManagerConfig{
		DefaultLocalIP: "127.0.0.1",
		DefaultPtime:   20,
		RTPPortRange: manager_media.PortRange{
			Min: 12000,
			Max: 12200,
		},
		DefaultAudioCodecs: []string{"PCMU", "PCMA", "G722"},
	}

	fmt.Println("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ Media Manager —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...")
	mediaManager, err := manager_media.NewMediaManager(config)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Media Manager: %w", err)
	}
	defer mediaManager.Stop()

	mediaManager.SetEventHandler(handler)

	if err := mediaManager.Start(); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Media Manager: %w", err)
	}

	fmt.Println("‚úÖ Media Manager –∑–∞–ø—É—â–µ–Ω")
	fmt.Printf("   üéµ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –∫–æ–¥–µ–∫–∏: %v\n", config.DefaultAudioCodecs)

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π
	if err := demonstrateMultipleSessions(ctx, mediaManager, handler); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π: %w", err)
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–¥–µ–∫–æ–≤
	if err := demonstrateCodecNegotiation(ctx, mediaManager); err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–¥–µ–∫–æ–≤: %w", err)
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
	if err := demonstrateErrorHandling(ctx, mediaManager); err != nil {
		log.Printf("‚ö†Ô∏è –û–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏ –≤ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: %v", err)
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ–¥–∏–∞
	if err := demonstrateRealMediaTransmission(ctx, mediaManager); err != nil {
		log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –º–µ–¥–∏–∞ –ø–µ—Ä–µ–¥–∞—á–∏: %v", err)
	}

	// –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	handler.PrintOverallStats()

	return nil
}

func demonstrateMultipleSessions(ctx context.Context, manager manager_media.MediaManagerInterface, handler *AdvancedEventHandler) error {
	fmt.Println("\nüîó –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π...")

	sessions := make([]*manager_media.MediaSessionInfo, 0, 3)

	// –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Å—Å–∏–π —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–∏
	for i := 0; i < 3; i++ {
		constraints := manager_media.SessionConstraints{
			AudioEnabled:   true,
			AudioDirection: manager_media.DirectionSendRecv,
			AudioCodecs:    []string{"PCMU"},
			AudioPtime:     20,
		}

		session, sdpOffer, err := manager.CreateOffer(constraints)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ %d: %w", i+1, err)
		}

		sessions = append(sessions, session)
		fmt.Printf("‚úÖ –°–µ—Å—Å–∏—è %d —Å–æ–∑–¥–∞–Ω–∞: %s... (–ø–æ—Ä—Ç: %v)\n",
			i+1, session.SessionID[:8], session.LocalAddress)

		// –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é
		answerSession, err := manager.CreateSessionFromSDP(sdpOffer)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–Ω–æ–π —Å–µ—Å—Å–∏–∏ %d: %w", i+1, err)
		}

		// –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
		_, err = manager.CreateAnswer(answerSession.SessionID, constraints)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ %d: %w", i+1, err)
		}

		sessions = append(sessions, answerSession)
	}

	fmt.Printf("üéØ –°–æ–∑–¥–∞–Ω–æ %d –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π\n", len(sessions))

	// –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
	activeSessions := manager.ListSessions()
	fmt.Printf("üìã –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ: %d\n", len(activeSessions))

	// –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏–∏
	for i, session := range sessions {
		if err := manager.CloseSession(session.SessionID); err != nil {
			log.Printf("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–µ—Å—Å–∏–∏ %d: %v", i+1, err)
		}
	}

	return nil
}

func demonstrateCodecNegotiation(ctx context.Context, manager manager_media.MediaManagerInterface) error {
	fmt.Println("\nüéµ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –∫–æ–¥–µ–∫–æ–≤...")

	testCases := []struct {
		name           string
		offerCodecs    []string
		answerCodecs   []string
		expectedResult string
	}{
		{
			name:           "PCMU –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
			offerCodecs:    []string{"PCMU", "PCMA"},
			answerCodecs:   []string{"PCMU"},
			expectedResult: "PCMU",
		},
		{
			name:           "PCMA fallback",
			offerCodecs:    []string{"G722", "PCMA"},
			answerCodecs:   []string{"PCMA", "PCMU"},
			expectedResult: "PCMA",
		},
		{
			name:           "–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–¥–µ–∫–∏",
			offerCodecs:    []string{"PCMU", "PCMA", "G722"},
			answerCodecs:   []string{"G722", "PCMU"},
			expectedResult: "PCMU –∏–ª–∏ G722",
		},
	}

	for i, tc := range testCases {
		fmt.Printf("\n   üß™ –¢–µ—Å—Ç %d: %s\n", i+1, tc.name)

		offerConstraints := manager_media.SessionConstraints{
			AudioEnabled:   true,
			AudioDirection: manager_media.DirectionSendRecv,
			AudioCodecs:    tc.offerCodecs,
		}

		session, sdpOffer, err := manager.CreateOffer(offerConstraints)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è offer –¥–ª—è —Ç–µ—Å—Ç–∞ %s: %w", tc.name, err)
		}

		fmt.Printf("      üì§ Offer –∫–æ–¥–µ–∫–∏: %v\n", tc.offerCodecs)

		answerSession, err := manager.CreateSessionFromSDP(sdpOffer)
		if err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è answer —Å–µ—Å—Å–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∞ %s: %w", tc.name, err)
		}

		answerConstraints := manager_media.SessionConstraints{
			AudioEnabled:   true,
			AudioDirection: manager_media.DirectionSendRecv,
			AudioCodecs:    tc.answerCodecs,
		}

		sdpAnswer, err := manager.CreateAnswer(answerSession.SessionID, answerConstraints)
		if err != nil {
			fmt.Printf("      ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –∫–æ–¥–µ–∫–∏: %v\n", err)
		} else {
			fmt.Printf("      üì• Answer –∫–æ–¥–µ–∫–∏: %v\n", tc.answerCodecs)
			fmt.Printf("      ‚úÖ –û–∂–∏–¥–∞–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: %s\n", tc.expectedResult)
			fmt.Printf("      üìÑ SDP Answer –¥–ª–∏–Ω–∞: %d —Å–∏–º–≤–æ–ª–æ–≤\n", len(sdpAnswer))
		}

		// –û—á–∏—Å—Ç–∫–∞
		manager.CloseSession(session.SessionID)
		manager.CloseSession(answerSession.SessionID)
	}

	return nil
}

func demonstrateErrorHandling(ctx context.Context, manager manager_media.MediaManagerInterface) error {
	fmt.Println("\n‚ùå –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")

	// –¢–µ—Å—Ç 1: –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è —Å–µ—Å—Å–∏—è
	fmt.Println("   üß™ –¢–µ—Å—Ç 1: –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–µ–π")
	fakeSessionID := "non-existent-session-id"

	_, err := manager.GetSession(fakeSessionID)
	if err != nil {
		fmt.Printf("      ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ GetSession: %v\n", err)
	}

	err = manager.CloseSession(fakeSessionID)
	if err != nil {
		fmt.Printf("      ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ CloseSession: %v\n", err)
	}

	// –¢–µ—Å—Ç 2: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SDP
	fmt.Println("   üß™ –¢–µ—Å—Ç 2: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π SDP")
	invalidSDP := "v=0\no=invalid sdp\nthis is not valid"

	_, err = manager.CreateSessionFromSDP(invalidSDP)
	if err != nil {
		fmt.Printf("      ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ SDP: %v\n", err)
	}

	// –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –æ—Ç–≤–µ—Ç –±–µ–∑ —Å–µ—Å—Å–∏–∏
	fmt.Println("   üß™ –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–µ—Å—Å–∏–∏")
	constraints := manager_media.SessionConstraints{
		AudioEnabled: true,
	}

	_, err = manager.CreateAnswer(fakeSessionID, constraints)
	if err != nil {
		fmt.Printf("      ‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞ CreateAnswer: %v\n", err)
	}

	return fmt.Errorf("–¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (—ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ)")
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞
func runAdvancedExample() {
	fmt.Println("üéØ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Media Manager")
	fmt.Println("=================================================")

	if err := runAdvancedDemo(); err != nil {
		log.Printf("‚ö†Ô∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏: %v", err)
	}

	fmt.Println("\n‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
	fmt.Println("üéØ –ü—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:")
	fmt.Println("   ‚úì –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏")
	fmt.Println("   ‚úì –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–¥–µ–∫–æ–≤")
	fmt.Println("   ‚úì –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
	fmt.Println("   ‚úì –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π")
	fmt.Println("   ‚úì –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
	fmt.Println("   ‚úì –†–µ–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –º–µ–¥–∏–∞ –¥–∞–Ω–Ω—ã—Ö")
	fmt.Println("   ‚úì DTMF —Å–∏–≥–Ω–∞–ª–∏–Ω–≥")
}

// demonstrateRealMediaTransmission –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É –º–µ–¥–∏–∞
func demonstrateRealMediaTransmission(ctx context.Context, manager manager_media.MediaManagerInterface) error {
	fmt.Println("\nüéµ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –º–µ–¥–∏–∞ –∏ DTMF...")

	// –°–æ–∑–¥–∞–µ–º –¥–≤–µ —Å–µ—Å—Å–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	constraints := manager_media.SessionConstraints{
		AudioEnabled:   true,
		AudioDirection: manager_media.DirectionSendRecv,
		AudioCodecs:    []string{"PCMU"},
		AudioPtime:     20,
	}

	// –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—É—é —Å–µ—Å—Å–∏—é (transmitter)
	session1, sdpOffer, err := manager.CreateOffer(constraints)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è transmitter —Å–µ—Å—Å–∏–∏: %w", err)
	}
	fmt.Printf("   ‚úÖ Transmitter —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: %s...\n", session1.SessionID[:8])

	// –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é —Å–µ—Å—Å–∏—é (receiver)
	session2, err := manager.CreateSessionFromSDP(sdpOffer)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è receiver —Å–µ—Å—Å–∏–∏: %w", err)
	}
	fmt.Printf("   ‚úÖ Receiver —Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞: %s...\n", session2.SessionID[:8])

	// –°–æ–∑–¥–∞–µ–º answer –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
	_, err = manager.CreateAnswer(session2.SessionID, constraints)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è answer: %w", err)
	}

	// –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
	updatedSession1, err := manager.GetSession(session1.SessionID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è session1: %w", err)
	}

	updatedSession2, err := manager.GetSession(session2.SessionID)
	if err != nil {
		return fmt.Errorf("–æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è session2: %w", err)
	}

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É
	if updatedSession1.MediaSession != nil && updatedSession2.MediaSession != nil {
		if err := demonstrateAdvancedAudioAndDTMF(updatedSession1, updatedSession2); err != nil {
			fmt.Printf("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏: %v\n", err)
		}
	} else {
		fmt.Println("   ‚ÑπÔ∏è MediaSession –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
	}

	// –û—á–∏—Å—Ç–∫–∞
	manager.CloseSession(session1.SessionID)
	manager.CloseSession(session2.SessionID)

	return nil
}

// demonstrateAdvancedAudioAndDTMF –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–¥–∞—á—É –∞—É–¥–∏–æ –∏ DTMF
func demonstrateAdvancedAudioAndDTMF(session1, session2 *manager_media.MediaSessionInfo) error {
	fmt.Println("   üéµ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É –∞—É–¥–∏–æ –∏ DTMF...")

	// –ó–∞–ø—É—Å–∫–∞–µ–º MediaSession
	if session1.MediaSession.GetState() != media.MediaStateActive {
		if err := session1.MediaSession.Start(); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ session1: %w", err)
		}
	}

	if session2.MediaSession.GetState() != media.MediaStateActive {
		if err := session2.MediaSession.Start(); err != nil {
			return fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ session2: %w", err)
		}
	}

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
	fmt.Println("   üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥–∞—á–∏ –∞—É–¥–∏–æ –∏ DTMF...")

	// –ü–µ—Ä–µ–¥–∞—á–∞ –∞—É–¥–∏–æ
	fmt.Println("   üì§ –ü–µ—Ä–µ–¥–∞—á–∞ –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–æ–≤...")
	audioData := make([]byte, 160) // 20ms –¥–ª—è 8kHz
	for i := range audioData {
		audioData[i] = byte(i % 200) // –¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
	}

	for i := 1; i <= 5; i++ {
		if err := session1.MediaSession.SendAudio(audioData); err != nil {
			fmt.Printf("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç–∞ %d: %v\n", i, err)
		} else {
			fmt.Printf("   üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞—É–¥–∏–æ –ø–∞–∫–µ—Ç %d\n", i)
		}
		time.Sleep(20 * time.Millisecond)
	}

	// DTMF –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è
	fmt.Println("   üìû –ü–µ—Ä–µ–¥–∞—á–∞ DTMF —Å–∏–≥–Ω–∞–ª–æ–≤...")
	dtmfDigits := []media.DTMFDigit{media.DTMF1, media.DTMF2, media.DTMF3}

	for _, digit := range dtmfDigits {
		if err := session1.MediaSession.SendDTMF(digit, 100*time.Millisecond); err != nil {
			fmt.Printf("   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ DTMF %s: %v\n", digit, err)
		} else {
			fmt.Printf("   üìû –û—Ç–ø—Ä–∞–≤–ª–µ–Ω DTMF: %s\n", digit)
		}
		time.Sleep(200 * time.Millisecond)
	}

	// –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É
	time.Sleep(500 * time.Millisecond)

	// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
	stats1 := session1.MediaSession.GetStatistics()
	stats2 := session2.MediaSession.GetStatistics()

	fmt.Printf("   üìä Session1: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞—É–¥–∏–æ=%d, DTMF=%d\n",
		stats1.AudioPacketsSent, stats1.DTMFEventsSent)
	fmt.Printf("   üìä Session2: –ü–æ–ª—É—á–µ–Ω–æ –∞—É–¥–∏–æ=%d, DTMF=%d\n",
		stats2.AudioPacketsReceived, stats2.DTMFEventsReceived)

	fmt.Println("   ‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
	return nil
}
